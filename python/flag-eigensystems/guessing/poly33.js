const sl = require('../libshape');

/* this is the result of asking sage what

[[poly32.monomial_coefficient(m), list(m.degrees())] for m in poly32.monomials()]

is. This should be equal to poly33(e=0)
*/
const guess1 =
[[1, [5, 0, 0, 0, 0, 0]],
 [1, [4, 1, 0, 0, 0, 0]],
 [-2, [3, 2, 0, 0, 0, 0]],
 [-2, [2, 3, 0, 0, 0, 0]],
 [1, [1, 4, 0, 0, 0, 0]],
 [1, [0, 5, 0, 0, 0, 0]],
 [1, [4, 0, 1, 0, 0, 0]],
 [2, [3, 1, 1, 0, 0, 0]],
 [-2, [1, 3, 1, 0, 0, 0]],
 [-1, [0, 4, 1, 0, 0, 0]],
 [-2, [3, 0, 2, 0, 0, 0]],
 [3, [1, 2, 2, 0, 0, 0]],
 [1, [0, 3, 2, 0, 0, 0]],
 [-2, [2, 0, 3, 0, 0, 0]],
 [-2, [1, 1, 3, 0, 0, 0]],
 [1, [0, 2, 3, 0, 0, 0]],
 [1, [1, 0, 4, 0, 0, 0]],
 [-1, [0, 1, 4, 0, 0, 0]],
 [1, [0, 0, 5, 0, 0, 0]],
 [1, [4, 0, 0, 1, 0, 0]],
 [-2, [2, 2, 0, 1, 0, 0]],
 [1, [0, 4, 0, 1, 0, 0]],
 [2, [3, 0, 1, 1, 0, 0]],
 [-2, [1, 2, 1, 1, 0, 0]],
 [2, [1, 1, 2, 1, 0, 0]],
 [-1, [0, 2, 2, 1, 0, 0]],
 [-2, [1, 0, 3, 1, 0, 0]],
 [2, [0, 1, 3, 1, 0, 0]],
 [-1, [0, 0, 4, 1, 0, 0]],
 [-2, [3, 0, 0, 2, 0, 0]],
 [-2, [2, 1, 0, 2, 0, 0]],
 [-2, [1, 2, 0, 2, 0, 0]],
 [-2, [0, 3, 0, 2, 0, 0]],
 [-2, [1, 1, 1, 2, 0, 0]],
 [2, [0, 2, 1, 2, 0, 0]],
 [3, [1, 0, 2, 2, 0, 0]],
 [-1, [0, 1, 2, 2, 0, 0]],
 [1, [0, 0, 3, 2, 0, 0]],
 [-2, [2, 0, 0, 3, 0, 0]],
 [-2, [0, 2, 0, 3, 0, 0]],
 [-2, [1, 0, 1, 3, 0, 0]],
 [1, [0, 0, 2, 3, 0, 0]],
 [1, [1, 0, 0, 4, 0, 0]],
 [1, [0, 1, 0, 4, 0, 0]],
 [-1, [0, 0, 1, 4, 0, 0]],
 [1, [0, 0, 0, 5, 0, 0]],
 [1, [4, 0, 0, 0, 1, 0]],
 [-2, [2, 2, 0, 0, 1, 0]],
 [1, [0, 4, 0, 0, 1, 0]],
 [2, [2, 1, 1, 0, 1, 0]],
 [-2, [0, 3, 1, 0, 1, 0]],
 [-2, [2, 0, 2, 0, 1, 0]],
 [3, [0, 2, 2, 0, 1, 0]],
 [-2, [0, 1, 3, 0, 1, 0]],
 [1, [0, 0, 4, 0, 1, 0]],
 [2, [3, 0, 0, 1, 1, 0]],
 [2, [2, 1, 0, 1, 1, 0]],
 [2, [1, 2, 0, 1, 1, 0]],
 [2, [0, 3, 0, 1, 1, 0]],
 [2, [1, 1, 1, 1, 1, 0]],
 [-2, [0, 2, 1, 1, 1, 0]],
 [-2, [1, 0, 2, 1, 1, 0]],
 [2, [0, 1, 2, 1, 1, 0]],
 [2, [1, 0, 1, 2, 1, 0]],
 [2, [0, 1, 1, 2, 1, 0]],
 [-1, [0, 0, 2, 2, 1, 0]],
 [-2, [1, 0, 0, 3, 1, 0]],
 [-2, [0, 1, 0, 3, 1, 0]],
 [2, [0, 0, 1, 3, 1, 0]],
 [-1, [0, 0, 0, 4, 1, 0]],
 [-2, [3, 0, 0, 0, 2, 0]],
 [-2, [2, 1, 0, 0, 2, 0]],
 [-2, [1, 2, 0, 0, 2, 0]],
 [-2, [0, 3, 0, 0, 2, 0]],
 [-2, [2, 0, 1, 0, 2, 0]],
 [2, [1, 1, 1, 0, 2, 0]],
 [-2, [1, 0, 2, 0, 2, 0]],
 [-2, [0, 0, 3, 0, 2, 0]],
 [-2, [1, 0, 1, 1, 2, 0]],
 [-2, [0, 1, 1, 1, 2, 0]],
 [2, [0, 0, 2, 1, 2, 0]],
 [3, [1, 0, 0, 2, 2, 0]],
 [3, [0, 1, 0, 2, 2, 0]],
 [-1, [0, 0, 1, 2, 2, 0]],
 [1, [0, 0, 0, 3, 2, 0]],
 [-2, [2, 0, 0, 0, 3, 0]],
 [-2, [0, 2, 0, 0, 3, 0]],
 [2, [0, 1, 1, 0, 3, 0]],
 [-2, [0, 0, 2, 0, 3, 0]],
 [-2, [1, 0, 0, 1, 3, 0]],
 [-2, [0, 1, 0, 1, 3, 0]],
 [1, [0, 0, 0, 2, 3, 0]],
 [1, [1, 0, 0, 0, 4, 0]],
 [1, [0, 1, 0, 0, 4, 0]],
 [1, [0, 0, 1, 0, 4, 0]],
 [-1, [0, 0, 0, 1, 4, 0]],
 [1, [0, 0, 0, 0, 5, 0]]];

/* this is the result of setting

guess = poly31(x=x+e) * poly22(x=x-e)

and asking sage what

[[guess.monomial_coefficient(m), list(m.degrees())] for m in guess.monomials()]

is. This should be equal to poly33(d=0)
*/
const guess2 =
[[1, [5, 0, 0, 0, 0, 0]],
 [1, [4, 1, 0, 0, 0, 0]],
 [-2, [3, 2, 0, 0, 0, 0]],
 [-2, [2, 3, 0, 0, 0, 0]],
 [1, [1, 4, 0, 0, 0, 0]],
 [1, [0, 5, 0, 0, 0, 0]],
 [1, [4, 0, 1, 0, 0, 0]],
 [2, [3, 1, 1, 0, 0, 0]],
 [-2, [1, 3, 1, 0, 0, 0]],
 [-1, [0, 4, 1, 0, 0, 0]],
 [-2, [3, 0, 2, 0, 0, 0]],
 [3, [1, 2, 2, 0, 0, 0]],
 [1, [0, 3, 2, 0, 0, 0]],
 [-2, [2, 0, 3, 0, 0, 0]],
 [-2, [1, 1, 3, 0, 0, 0]],
 [1, [0, 2, 3, 0, 0, 0]],
 [1, [1, 0, 4, 0, 0, 0]],
 [-1, [0, 1, 4, 0, 0, 0]],
 [1, [0, 0, 5, 0, 0, 0]],
 [1, [4, 0, 0, 1, 0, 0]],
 [-2, [2, 2, 0, 1, 0, 0]],
 [1, [0, 4, 0, 1, 0, 0]],
 [2, [3, 0, 1, 1, 0, 0]],
 [-2, [1, 2, 1, 1, 0, 0]],
 [2, [1, 1, 2, 1, 0, 0]],
 [-1, [0, 2, 2, 1, 0, 0]],
 [-2, [1, 0, 3, 1, 0, 0]],
 [2, [0, 1, 3, 1, 0, 0]],
 [-1, [0, 0, 4, 1, 0, 0]],
 [-2, [3, 0, 0, 2, 0, 0]],
 [-2, [2, 1, 0, 2, 0, 0]],
 [-2, [1, 2, 0, 2, 0, 0]],
 [-2, [0, 3, 0, 2, 0, 0]],
 [-2, [1, 1, 1, 2, 0, 0]],
 [2, [0, 2, 1, 2, 0, 0]],
 [3, [1, 0, 2, 2, 0, 0]],
 [-1, [0, 1, 2, 2, 0, 0]],
 [1, [0, 0, 3, 2, 0, 0]],
 [-2, [2, 0, 0, 3, 0, 0]],
 [-2, [0, 2, 0, 3, 0, 0]],
 [-2, [1, 0, 1, 3, 0, 0]],
 [1, [0, 0, 2, 3, 0, 0]],
 [1, [1, 0, 0, 4, 0, 0]],
 [1, [0, 1, 0, 4, 0, 0]],
 [-1, [0, 0, 1, 4, 0, 0]],
 [1, [0, 0, 0, 5, 0, 0]],
 [1, [4, 0, 0, 0, 0, 1]],
 [-2, [2, 2, 0, 0, 0, 1]],
 [1, [0, 4, 0, 0, 0, 1]],
 [2, [2, 1, 1, 0, 0, 1]],
 [-2, [0, 3, 1, 0, 0, 1]],
 [-2, [2, 0, 2, 0, 0, 1]],
 [3, [0, 2, 2, 0, 0, 1]],
 [-2, [0, 1, 3, 0, 0, 1]],
 [1, [0, 0, 4, 0, 0, 1]],
 [-8, [2, 1, 0, 1, 0, 1]],
 [-8, [1, 2, 0, 1, 0, 1]],
 [2, [2, 0, 1, 1, 0, 1]],
 [-2, [0, 2, 1, 1, 0, 1]],
 [2, [0, 1, 2, 1, 0, 1]],
 [-2, [0, 0, 3, 1, 0, 1]],
 [-2, [2, 0, 0, 2, 0, 1]],
 [-8, [1, 1, 0, 2, 0, 1]],
 [-2, [0, 2, 0, 2, 0, 1]],
 [-2, [0, 1, 1, 2, 0, 1]],
 [3, [0, 0, 2, 2, 0, 1]],
 [-2, [0, 0, 1, 3, 0, 1]],
 [1, [0, 0, 0, 4, 0, 1]],
 [-2, [3, 0, 0, 0, 0, 2]],
 [-2, [2, 1, 0, 0, 0, 2]],
 [-2, [1, 2, 0, 0, 0, 2]],
 [-2, [0, 3, 0, 0, 0, 2]],
 [-2, [2, 0, 1, 0, 0, 2]],
 [2, [1, 1, 1, 0, 0, 2]],
 [-2, [1, 0, 2, 0, 0, 2]],
 [-2, [0, 0, 3, 0, 0, 2]],
 [-2, [2, 0, 0, 1, 0, 2]],
 [-8, [1, 1, 0, 1, 0, 2]],
 [-2, [0, 2, 0, 1, 0, 2]],
 [2, [1, 0, 1, 1, 0, 2]],
 [-2, [1, 0, 0, 2, 0, 2]],
 [-2, [0, 1, 0, 2, 0, 2]],
 [-2, [0, 0, 0, 3, 0, 2]],
 [-2, [2, 0, 0, 0, 0, 3]],
 [-2, [0, 2, 0, 0, 0, 3]],
 [2, [0, 1, 1, 0, 0, 3]],
 [-2, [0, 0, 2, 0, 0, 3]],
 [2, [0, 0, 1, 1, 0, 3]],
 [-2, [0, 0, 0, 2, 0, 3]],
 [1, [1, 0, 0, 0, 0, 4]],
 [1, [0, 1, 0, 0, 0, 4]],
 [1, [0, 0, 1, 0, 0, 4]],
 [1, [0, 0, 0, 1, 0, 4]],
 [1, [0, 0, 0, 0, 0, 5]]];


[guess1, guess2].forEach(guess =>  {
  guess.forEach(([coef, mon]) => {
	 // we do slice(1) because ignore the first variable, which is x.
	 console.log(coef, `[${sl.shape_of_mon(mon.slice(1))}]`);
  });
});

// from
// node poly33-guess.js | sort | uniq
// we get
// -1 [2-2-1]
// -1 [4-1]
// -2 [2 1]
// -2 [2 2 1]
// -2 [2 2]
// -2 [2-1-1 1]
// -2 [2-1-1-1]
// -2 [2-1-1]
// -2 [2]
// -2 [3 2]
// -2 [3-1 1]
// -2 [3-1]
// -2 [3]
// -8 [1 1 1]
// -8 [2 1 1]
// 1 [1]
// 1 [3-2]
// 1 [4 1]
// 1 [4]
// 1 [5]
// 1 []
// 2 [1-1 1]
// 2 [1-1-1-1]
// 2 [1-1]
// 2 [1-2-1 1]
// 2 [1-2-1-1]
// 2 [1-2-1]
// 2 [1-3-1]
// 2 [2 1-1]
// 2 [2-1-2]
// 2 [3 1-1]
// 3 [2-2 1]
// 3 [2-2]
