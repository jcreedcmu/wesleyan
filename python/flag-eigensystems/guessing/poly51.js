const sl = require('../libshape');

/* this is the result of setting

guess = poly4(x=x-e) * poly4(x=x+e) * poly31(x=x+e)

and asking sage what

[[guess.monomial_coefficient(m), list(m.degrees())] for m in guess.monomials()]

is. This should be equal to poly51(d=0)
*/
const guess1 =
[[1, [5, 0, 0, 0, 0, 0]],
 [3, [4, 1, 0, 0, 0, 0]],
 [2, [3, 2, 0, 0, 0, 0]],
 [-2, [2, 3, 0, 0, 0, 0]],
 [-3, [1, 4, 0, 0, 0, 0]],
 [-1, [0, 5, 0, 0, 0, 0]],
 [3, [4, 0, 1, 0, 0, 0]],
 [7, [3, 1, 1, 0, 0, 0]],
 [3, [2, 2, 1, 0, 0, 0]],
 [-3, [1, 3, 1, 0, 0, 0]],
 [-2, [0, 4, 1, 0, 0, 0]],
 [2, [3, 0, 2, 0, 0, 0]],
 [3, [2, 1, 2, 0, 0, 0]],
 [-1, [0, 3, 2, 0, 0, 0]],
 [-2, [2, 0, 3, 0, 0, 0]],
 [-3, [1, 1, 3, 0, 0, 0]],
 [-1, [0, 2, 3, 0, 0, 0]],
 [-3, [1, 0, 4, 0, 0, 0]],
 [-2, [0, 1, 4, 0, 0, 0]],
 [-1, [0, 0, 5, 0, 0, 0]],
 [3, [4, 0, 0, 1, 0, 0]],
 [8, [3, 1, 0, 1, 0, 0]],
 [6, [2, 2, 0, 1, 0, 0]],
 [-1, [0, 4, 0, 1, 0, 0]],
 [7, [3, 0, 1, 1, 0, 0]],
 [14, [2, 1, 1, 1, 0, 0]],
 [7, [1, 2, 1, 1, 0, 0]],
 [3, [2, 0, 2, 1, 0, 0]],
 [4, [1, 1, 2, 1, 0, 0]],
 [1, [0, 2, 2, 1, 0, 0]],
 [-3, [1, 0, 3, 1, 0, 0]],
 [-2, [0, 1, 3, 1, 0, 0]],
 [-2, [0, 0, 4, 1, 0, 0]],
 [2, [3, 0, 0, 2, 0, 0]],
 [6, [2, 1, 0, 2, 0, 0]],
 [6, [1, 2, 0, 2, 0, 0]],
 [2, [0, 3, 0, 2, 0, 0]],
 [3, [2, 0, 1, 2, 0, 0]],
 [7, [1, 1, 1, 2, 0, 0]],
 [4, [0, 2, 1, 2, 0, 0]],
 [1, [0, 1, 2, 2, 0, 0]],
 [-1, [0, 0, 3, 2, 0, 0]],
 [-2, [2, 0, 0, 3, 0, 0]],
 [2, [0, 2, 0, 3, 0, 0]],
 [-3, [1, 0, 1, 3, 0, 0]],
 [-1, [0, 0, 2, 3, 0, 0]],
 [-3, [1, 0, 0, 4, 0, 0]],
 [-1, [0, 1, 0, 4, 0, 0]],
 [-2, [0, 0, 1, 4, 0, 0]],
 [-1, [0, 0, 0, 5, 0, 0]],
 [3, [4, 0, 0, 0, 0, 1]],
 [8, [3, 1, 0, 0, 0, 1]],
 [6, [2, 2, 0, 0, 0, 1]],
 [-1, [0, 4, 0, 0, 0, 1]],
 [8, [3, 0, 1, 0, 0, 1]],
 [15, [2, 1, 1, 0, 0, 1]],
 [6, [1, 2, 1, 0, 0, 1]],
 [-1, [0, 3, 1, 0, 0, 1]],
 [6, [2, 0, 2, 0, 0, 1]],
 [6, [1, 1, 2, 0, 0, 1]],
 [-1, [0, 1, 3, 0, 0, 1]],
 [-1, [0, 0, 4, 0, 0, 1]],
 [8, [3, 0, 0, 1, 0, 1]],
 [16, [2, 1, 0, 1, 0, 1]],
 [8, [1, 2, 0, 1, 0, 1]],
 [15, [2, 0, 1, 1, 0, 1]],
 [20, [1, 1, 1, 1, 0, 1]],
 [5, [0, 2, 1, 1, 0, 1]],
 [6, [1, 0, 2, 1, 0, 1]],
 [4, [0, 1, 2, 1, 0, 1]],
 [-1, [0, 0, 3, 1, 0, 1]],
 [6, [2, 0, 0, 2, 0, 1]],
 [8, [1, 1, 0, 2, 0, 1]],
 [2, [0, 2, 0, 2, 0, 1]],
 [6, [1, 0, 1, 2, 0, 1]],
 [5, [0, 1, 1, 2, 0, 1]],
 [-1, [0, 0, 1, 3, 0, 1]],
 [-1, [0, 0, 0, 4, 0, 1]],
 [2, [3, 0, 0, 0, 0, 2]],
 [6, [2, 1, 0, 0, 0, 2]],
 [6, [1, 2, 0, 0, 0, 2]],
 [2, [0, 3, 0, 0, 0, 2]],
 [6, [2, 0, 1, 0, 0, 2]],
 [9, [1, 1, 1, 0, 0, 2]],
 [3, [0, 2, 1, 0, 0, 2]],
 [6, [1, 0, 2, 0, 0, 2]],
 [3, [0, 1, 2, 0, 0, 2]],
 [2, [0, 0, 3, 0, 0, 2]],
 [6, [2, 0, 0, 1, 0, 2]],
 [8, [1, 1, 0, 1, 0, 2]],
 [2, [0, 2, 0, 1, 0, 2]],
 [9, [1, 0, 1, 1, 0, 2]],
 [6, [0, 1, 1, 1, 0, 2]],
 [3, [0, 0, 2, 1, 0, 2]],
 [6, [1, 0, 0, 2, 0, 2]],
 [2, [0, 1, 0, 2, 0, 2]],
 [3, [0, 0, 1, 2, 0, 2]],
 [2, [0, 0, 0, 3, 0, 2]],
 [-2, [2, 0, 0, 0, 0, 3]],
 [2, [0, 2, 0, 0, 0, 3]],
 [1, [0, 1, 1, 0, 0, 3]],
 [2, [0, 0, 2, 0, 0, 3]],
 [1, [0, 0, 1, 1, 0, 3]],
 [2, [0, 0, 0, 2, 0, 3]],
 [-3, [1, 0, 0, 0, 0, 4]],
 [-1, [0, 1, 0, 0, 0, 4]],
 [-1, [0, 0, 1, 0, 0, 4]],
 [-1, [0, 0, 0, 1, 0, 4]],
 [-1, [0, 0, 0, 0, 0, 5]]];

/* this is the result of setting

guess = poly41 * poly5

and asking sage what

[[guess.monomial_coefficient(m), list(m.degrees())] for m in guess.monomials()]

is. This should be equal to poly51(e=0)
*/
const guess2 = [[1, [5, 0, 0, 0, 0, 0]],
 [3, [4, 1, 0, 0, 0, 0]],
 [2, [3, 2, 0, 0, 0, 0]],
 [-2, [2, 3, 0, 0, 0, 0]],
 [-3, [1, 4, 0, 0, 0, 0]],
 [-1, [0, 5, 0, 0, 0, 0]],
 [3, [4, 0, 1, 0, 0, 0]],
 [7, [3, 1, 1, 0, 0, 0]],
 [3, [2, 2, 1, 0, 0, 0]],
 [-3, [1, 3, 1, 0, 0, 0]],
 [-2, [0, 4, 1, 0, 0, 0]],
 [2, [3, 0, 2, 0, 0, 0]],
 [3, [2, 1, 2, 0, 0, 0]],
 [-1, [0, 3, 2, 0, 0, 0]],
 [-2, [2, 0, 3, 0, 0, 0]],
 [-3, [1, 1, 3, 0, 0, 0]],
 [-1, [0, 2, 3, 0, 0, 0]],
 [-3, [1, 0, 4, 0, 0, 0]],
 [-2, [0, 1, 4, 0, 0, 0]],
 [-1, [0, 0, 5, 0, 0, 0]],
 [3, [4, 0, 0, 1, 0, 0]],
 [8, [3, 1, 0, 1, 0, 0]],
 [6, [2, 2, 0, 1, 0, 0]],
 [-1, [0, 4, 0, 1, 0, 0]],
 [7, [3, 0, 1, 1, 0, 0]],
 [14, [2, 1, 1, 1, 0, 0]],
 [7, [1, 2, 1, 1, 0, 0]],
 [3, [2, 0, 2, 1, 0, 0]],
 [4, [1, 1, 2, 1, 0, 0]],
 [1, [0, 2, 2, 1, 0, 0]],
 [-3, [1, 0, 3, 1, 0, 0]],
 [-2, [0, 1, 3, 1, 0, 0]],
 [-2, [0, 0, 4, 1, 0, 0]],
 [2, [3, 0, 0, 2, 0, 0]],
 [6, [2, 1, 0, 2, 0, 0]],
 [6, [1, 2, 0, 2, 0, 0]],
 [2, [0, 3, 0, 2, 0, 0]],
 [3, [2, 0, 1, 2, 0, 0]],
 [7, [1, 1, 1, 2, 0, 0]],
 [4, [0, 2, 1, 2, 0, 0]],
 [1, [0, 1, 2, 2, 0, 0]],
 [-1, [0, 0, 3, 2, 0, 0]],
 [-2, [2, 0, 0, 3, 0, 0]],
 [2, [0, 2, 0, 3, 0, 0]],
 [-3, [1, 0, 1, 3, 0, 0]],
 [-1, [0, 0, 2, 3, 0, 0]],
 [-3, [1, 0, 0, 4, 0, 0]],
 [-1, [0, 1, 0, 4, 0, 0]],
 [-2, [0, 0, 1, 4, 0, 0]],
 [-1, [0, 0, 0, 5, 0, 0]],
 [3, [4, 0, 0, 0, 1, 0]],
 [8, [3, 1, 0, 0, 1, 0]],
 [6, [2, 2, 0, 0, 1, 0]],
 [-1, [0, 4, 0, 0, 1, 0]],
 [8, [3, 0, 1, 0, 1, 0]],
 [15, [2, 1, 1, 0, 1, 0]],
 [6, [1, 2, 1, 0, 1, 0]],
 [-1, [0, 3, 1, 0, 1, 0]],
 [6, [2, 0, 2, 0, 1, 0]],
 [6, [1, 1, 2, 0, 1, 0]],
 [-1, [0, 1, 3, 0, 1, 0]],
 [-1, [0, 0, 4, 0, 1, 0]],
 [7, [3, 0, 0, 1, 1, 0]],
 [15, [2, 1, 0, 1, 1, 0]],
 [9, [1, 2, 0, 1, 1, 0]],
 [1, [0, 3, 0, 1, 1, 0]],
 [14, [2, 0, 1, 1, 1, 0]],
 [19, [1, 1, 1, 1, 1, 0]],
 [5, [0, 2, 1, 1, 1, 0]],
 [7, [1, 0, 2, 1, 1, 0]],
 [4, [0, 1, 2, 1, 1, 0]],
 [3, [2, 0, 0, 2, 1, 0]],
 [6, [1, 1, 0, 2, 1, 0]],
 [3, [0, 2, 0, 2, 1, 0]],
 [4, [1, 0, 1, 2, 1, 0]],
 [4, [0, 1, 1, 2, 1, 0]],
 [1, [0, 0, 2, 2, 1, 0]],
 [-3, [1, 0, 0, 3, 1, 0]],
 [-1, [0, 1, 0, 3, 1, 0]],
 [-2, [0, 0, 1, 3, 1, 0]],
 [-2, [0, 0, 0, 4, 1, 0]],
 [2, [3, 0, 0, 0, 2, 0]],
 [6, [2, 1, 0, 0, 2, 0]],
 [6, [1, 2, 0, 0, 2, 0]],
 [2, [0, 3, 0, 0, 2, 0]],
 [6, [2, 0, 1, 0, 2, 0]],
 [9, [1, 1, 1, 0, 2, 0]],
 [3, [0, 2, 1, 0, 2, 0]],
 [6, [1, 0, 2, 0, 2, 0]],
 [3, [0, 1, 2, 0, 2, 0]],
 [2, [0, 0, 3, 0, 2, 0]],
 [3, [2, 0, 0, 1, 2, 0]],
 [6, [1, 1, 0, 1, 2, 0]],
 [3, [0, 2, 0, 1, 2, 0]],
 [7, [1, 0, 1, 1, 2, 0]],
 [5, [0, 1, 1, 1, 2, 0]],
 [4, [0, 0, 2, 1, 2, 0]],
 [1, [0, 0, 1, 2, 2, 0]],
 [-1, [0, 0, 0, 3, 2, 0]],
 [-2, [2, 0, 0, 0, 3, 0]],
 [2, [0, 2, 0, 0, 3, 0]],
 [1, [0, 1, 1, 0, 3, 0]],
 [2, [0, 0, 2, 0, 3, 0]],
 [-3, [1, 0, 0, 1, 3, 0]],
 [-1, [0, 1, 0, 1, 3, 0]],
 [-1, [0, 0, 0, 2, 3, 0]],
 [-3, [1, 0, 0, 0, 4, 0]],
 [-1, [0, 1, 0, 0, 4, 0]],
 [-1, [0, 0, 1, 0, 4, 0]],
 [-2, [0, 0, 0, 1, 4, 0]],
 [-1, [0, 0, 0, 0, 5, 0]]];


[guess1, guess2].forEach(guess =>  {
  guess.forEach(([coef, mon]) => {
	 // we do slice(1) because ignore the first variable, which is x.
	 console.log(coef, `[${sl.shape_of_mon(mon.slice(1))}]`);
  });
});

// from
// node poly51-guess.js | sort | uniq
// we get
// -1 [3-1 1]
// -1 [3-2]
// -1 [4 1]
// -1 [5]
// -2 [1-3-1]
// -2 [3]
// -2 [4-1]
// -3 [3-1]
// -3 [4]
// 1 [2-2-1]
// 1 [3 1-1]
// 1 []
// 14 [1-1-1]
// 15 [1-1 1]
// 16 [1 1 1]
// 19 [1-1-1-1]
// 2 [2 2 1]
// 2 [2]
// 2 [3 2]
// 20 [1-1-1 1]
// 3 [1]
// 3 [2-1 2]
// 3 [2-1]
// 4 [1-2-1 1]
// 4 [1-2-1-1]
// 4 [1-2-1]
// 4 [2-1-2]
// 5 [2-1-1 1]
// 5 [2-1-1-1]
// 6 [2 1-1-1]
// 6 [2 1]
// 6 [2 2]
// 6 [2-1 1]
// 7 [1-1]
// 7 [2-1-1]
// 8 [1 1]
// 8 [2 1 1]
// 9 [2 1-1]


// It turned out I made two errors doing this by hand:
// I wrote
// 6 [2-1-1-1]
// instead of
// 6 [2 1-1-1]
// and I omitted entirely 8 [2 1 1]!
