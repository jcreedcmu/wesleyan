const sl = require('../libshape');
const fs = require('fs');
const path = require('path');

/* I conjecture that

poly61(d=0) = poly31(x=poly3(a=e,b=f)) * poly4(x=poly3(a=e,b=f)) * poly21(x=poly4,a=e,b=f)
poly61e0 = poly5(x=x+f) * poly5(x=x-f) * poly41(x=x+f)
poly61(f=0) = poly6 * poly51

and dumps of those are in the associated json files.

*/

const guesses = ['d', 'e', 'f'].map(which => {
  return {
	 which,
	 coefs: JSON.parse(fs.readFileSync(path.join(__dirname, `poly61${which}0.json`), 'utf8'))
  };
});

guesses.forEach(({which, coefs}) =>  {
  console.log('### ' + which);
  coefs.forEach(([coef, mon]) => {
	 // we do slice(1) because ignore the first variable, which is x.
	 console.log(coef, `[${sl.shape_of_mon(mon.slice(1))}]`);
  });
});


// check consistency, should be all 1s:
// node poly61.js | grep -v '^#' | sort | uniq | perl -pe 's/.*\[/[/' | sort | uniq -c

// from
// node poly61.js | grep -v '^#' | sort | uniq
// we get

// -1 [4 1-1]
// -1 [6]
// -2 [2-3-1]
// -2 [3-1]
// -2 [3-2 1]
// -2 [3-3]
// -2 [4 1 1]
// -2 [5 1]
// -3 [4-1-1]
// -3 [4-2]
// -3 [5-1]
// -4 [1-3-1]
// -4 [3-2]
// -4 [4 1]
// -4 [4-1 1]
// -4 [5]
// -5 [4]
// -6 [1-4-1]
// -8 [4-1]
// 1 [1-3-1-1]
// 1 [4 2]
// 1 []
// 10 [1-2-2-1]
// 10 [2-2-1 1]
// 10 [2-2-1-1]
// 10 [3 1-1]
// 112 [1-1-1-1-1]
// 116 [1-1-1 1-1]
// 116 [1-1-1-1 1]
// 12 [2-1]
// 12 [2-2 1 1]
// 12 [2-2 1-1]
// 12 [2-2 1]
// 12 [2-2-1]
// 13 [1-1]
// 14 [1 1]
// 16 [2 1-2-1]
// 16 [2 1]
// 16 [2-1-1 2]
// 16 [2-1-1-2]
// 16 [2-1-2 1]
// 16 [2-1-2-1]
// 18 [2 2 1-1]
// 18 [2 2]
// 18 [2-1 2 1]
// 18 [2-1 2-1]
// 2 [3-1 1]
// 24 [1-2-1]
// 24 [2 2 1]
// 24 [2-1 2]
// 24 [2-1-2]
// 30 [2-1 1]
// 30 [2-1-1]
// 31 [1-1-2-1-1]
// 32 [1-2-1 1-1]
// 32 [1-2-1-1 1]
// 32 [1-2-1-1-1]
// 35 [2-1-1 1-1]
// 35 [2-1-1-1-1]
// 36 [1-1-1]
// 36 [2 1 1]
// 36 [2 1-1]
// 36 [2-1 1-1-1]
// 36 [2-1-1-1 1]
// 38 [1-1 1]
// 39 [2 1-1-1-1]
// 4 [1]
// 4 [3 1]
// 4 [3 2 1]
// 4 [3 3]
// 4 [3-1 1 1]
// 4 [3-1 2]
// 4 [3-1-1 1]
// 4 [3-1-1]
// 40 [1 1 1]
// 40 [1-2-1 1]
// 40 [1-2-1-1]
// 46 [2-1-1 1]
// 46 [2-1-1-1]
// 48 [2-1 1 1]
// 48 [2-1 1-1]
// 5 [2]
// 5 [3-1 1-1]
// 5 [3-1-1-1]
// 52 [2 1-1-1]
// 54 [2 1-1 1]
// 6 [2 2 2]
// 6 [2-2 2]
// 6 [2-2-2]
// 6 [2-2]
// 6 [3 2-1]
// 6 [3-1-2]
// 77 [1-1-1-1]
// 8 [3 1 1]
// 8 [3 1-1 1]
// 8 [3 1-1-1]
// 8 [3 2]
// 80 [1-1-1 1]
// 81 [1-1 1-1]
// 84 [1-1 1 1]

// to which I think I just need to add
// 83 [1-1-1-1-1-1]
