import math
import numpy
from numpy import linalg, dot, transpose, add, subtract
from permutation import Permutation

# In this file we are trying to find an eigenvector of eigenvalue
# equal to a root of
# x³ + 2x² - 5x - 4
# These are approximately
# -3.17740968
# -0.67836282
# 1.8557725

ROUND=10

# takes number 0..119, returns permutation
def decomp(x):
    return Permutation.from_lehmer(x, 5)

# inverse of decomp, takes permutation, returns number
def comp(x):
    return x.lehmer(5)

def σ0(x):
    return comp(decomp(x) * Permutation(2, 1, 3, 4, 5))

def σ1(x):
    return comp(decomp(x) * Permutation(1, 3, 2, 4, 5))

def σ2(x):
    return comp(decomp(x) * Permutation(1, 2, 4, 3, 5))

def σ3(x):
    return comp(decomp(x) * Permutation(1, 2, 3, 5, 4))

def entry(i, j):
    if i in [σ0(j), σ1(j), σ2(j), σ3(j)]:
        return 1
    else:
        return 0

nfac = 120

print (numpy.roots([1, 2, -5, -4]))
mat = [[entry(i,j) for i in range(nfac)] for j in range(nfac) ]

# for row in mat:
#     print (row)

(x,y) = (linalg.eigh(mat))

y = transpose(y)

vecs = []
for i in range(nfac):
    # finding eigenvectors of second-largest eigenvalue
    if (abs(x[i] - 1.8557725) < 0.001):
        vecs.append([t  for t in y[i]])



def reduce(vecs, k, s=1):
    return [
        [ s * (vecs[0][i] * vecs[j][k] - vecs[j][i] * vecs[0][k]) for i in range(len(vecs[0])) ]
        for j in range(1, len(vecs))
    ]

vecs = [
    vecs[1], vecs[2], vecs[3], vecs[4]
]

vecs = reduce(vecs, 3, s=1000)
vecs = reduce(vecs, 2)
vecs = reduce(vecs, 4)

# vecs = [[ i/vecs[0][t] for i in vecs[0] ] for t in range(len(vecs[0])) if abs(vecs[0][t]) > 0.01 ]
vecs = [[ i/vecs[0][6] for i in vecs[0] ]]

# round off
vecs = [[ round(x, ROUND) for x in vec ] for vec in vecs]

# for vec in vecs:
#     print(vec)
#     print("")

print(vecs[0])

s = set(vecs[0])

print(s)

SIZE = 40
for a in [1,2,3,4,5]:
    print(f"a={a}")
    for b in range(-SIZE,SIZE+1):
        for c in range(-SIZE,SIZE+1):
            for d in range(-SIZE,SIZE):
                roots = numpy.roots([a, b, c, d])
                for root in roots:
                    root = round(root, ROUND)
                    if isinstance(root, complex): continue
                    if root == 0: continue
                    if round(root, 0) == root: continue
                    if root in s:
                        print(f"{a}x^3 + {b}x^2 + {c}x + {d} <- {root}")
                        s.discard(root)
                        print(f"# {len(s)}")
print(s)




# The most promising result of this is
# [0.0, -1.227550356, 0.0, 0.0, 0.0, 1.227550356, 1.0, -0.278054202, 1.556108404, 1.299664103, -1.443891596, -2.133826708, -4.0, -4.78365876, 1.443891596, 4.989599215, -0.721945798, 3.072113747, 3.78365876, 4.278054202, -0.834162605, -4.37177785, -0.0, -2.855772507, 0.227550356, -2.0, 4.0, 3.556108404, -3.78365876, -2.0, -1.577718305, 1.072113747, -4.0, -2.855772507, 4.289263318, 3.072113747, 3.639431267, 4.599328206, -2.289263318, -4.37177785, 0.556108404, -2.133826708, -3.021609901, -4.711545013, 3.443891596, 4.989599215, -2.0, 1.299664103, 0.577718305, 1.15543661, -0.855772507, -2.0, 0.566509189, 0.556108404, -0.227550356, 1.278054202, -0.700335897, -0.0, 0.37177785, -0.721945798, -1.721945798, -4.711545013, 2.927886253, 4.278054202, -2.0, 1.227550356, 0.78365876, 4.599328206, -4.15543661, -4.78365876, 3.556108404, -0.0, -4.083322863, -4.15543661, 0.133826708, 3.443891596, 0.37177785, 4.289263318, 0.443891596, 0.78365876, 0.483994657, -0.834162605, 0.566509189, -1.443891596, -0.556108404, -3.021609901, 3.577718305, 3.78365876, -3.78365876, 0.0, 1.278054202, 1.072113747, 1.15543661, -0.278054202, -2.0, -1.227550356, 3.577718305, 2.927886253, 0.483994657, -2.289263318, -0.700335897, -4.0, -0.556108404, -1.721945798, 0.133826708, 1.443891596, -0.855772507, 1.556108404, 0.443891596, 3.639431267, -4.083322863, -4.0, 4.0, -0.0, -0.227550356, -1.577718305, 0.577718305, 1.0, 0.227550356, 0.0]


# {0.0, 1.2275503563, -0.2780542018, 1.0, 1.5561084036, 1.299664103, 1.4438915964, 4.9895992151, -0.7219457982, 3.0721137467, 3.78365876, 4.2780542018, 4.0, 4.2892633181, -1.7219457982, 0.78365876, 1.2780542018, 0.5561084036, 0.5665091885, -0.700335897, 1.0721137467, 0.5777183048, -4.3717778497, -4.1554366097, -4.083322863, 3.5561084036, 3.5777183048, -2.1338267084, 0.2275503563, -0.2275503563, 0.1338267084, 0.3717778497, -0.8557725066, -1.5777183048, 3.6394312666, -3.0216099012, 4.599328206, -2.2892633181, 1.1554366097, -0.8341626054, 0.4438915964, -0.5561084036, 2.9278862533, -4.0, -4.7115450133, 3.4438915964, 0.4839946569, -2.0, -1.2275503563, -4.78365876, -3.78365876, -2.8557725066, -1.4438915964}
# a=1
# 1x^3 + -8x^2 + -3x + 18 <- 1.4438915964
# 1x^3 + -5x^2 + -16x + 8 <- 0.4438915964
# 1x^3 + -5x^2 + 2x + 6 <- -0.8557725066
# 1x^3 + -2x^2 + -23x + -12 <- -0.5561084036
# 1x^3 + -1x^2 + -25x + 9 <- -4.7115450133
# 1x^3 + -1x^2 + -24x + 36 <- 1.5561084036
# 1x^3 + 0x^2 + -14x + 16 <- 1.299664103
# 1x^3 + 1x^2 + -16x + -12 <- -4.1554366097
# 1x^3 + 1x^2 + -6x + -2 <- -2.8557725066
# 1x^3 + 2x^2 + -23x + 12 <- 0.5561084036
# 1x^3 + 6x^2 + -2x + -4 <- -0.700335897
# 1x^3 + 8x^2 + -3x + -18 <- -1.4438915964
# 1x^3 + 8x^2 + 5x + -18 <- 1.1554366097
# a=2
# a=3
# a=4
# 4x^3 + -28x^2 + 11x + 4 <- -0.2275503563
# 4x^3 + -20x^2 + 17x + 12 <- 3.5777183048
# 4x^3 + -20x^2 + 27x + -8 <- 2.9278862533
# 4x^3 + -16x^2 + -33x + -9 <- -1.2275503563
# 4x^3 + -8x^2 + -19x + 29 <- 1.2780542018
# 4x^3 + -4x^2 + -23x + -6 <- -0.2780542018
# 4x^3 + -4x^2 + -15x + 2 <- -1.5777183048
# 4x^3 + 16x^2 + -33x + 9 <- 1.2275503563
# 4x^3 + 16x^2 + -3x + -9 <- -0.7219457982
# 4x^3 + 16x^2 + 5x + -9 <- 0.5777183048
# 4x^3 + 28x^2 + 11x + -4 <- 0.2275503563
# 4x^3 + 36x^2 + 25x + -4 <- 0.1338267084

# # 28
# unexplained eigenvals:
# {0.0, 1.0, 4.9895992151, 3.0721137467, 3.78365876, 4.2780542018, 4.0, 4.2892633181, -1.7219457982, 0.78365876, 0.5665091885, 1.0721137467, -4.3717778497, -4.083322863, 3.5561084036, -2.1338267084, 0.3717778497, 3.6394312666, -3.0216099012, 4.599328206, -2.2892633181, -0.8341626054, -4.0, 3.4438915964, 0.4839946569, -2.0, -4.78365876, -3.78365876}

# {round(abs(x) - int(abs(x)),10) for x in s }
# {0.0, 0.78365876, 0.2780542018, 0.9895992151, 0.0721137467, 0.2892633181, 0.5665091885, 0.5561084036, 0.6394312666, 0.599328206, 0.3717778497, 0.4438915964, 0.8341626054, 0.083322863, 0.4839946569, 0.1338267084, 0.0216099012, 0.7219457982}
# Only 17 really left...

# But some of those fparts I still see above.
# Genuinely unexplained:


# 0.78365876
# 0.9895992151
# 0.0721137467
# 0.2892633181
# 0.5665091885
# 0.6394312666
# 0.599328206
# 0.3717778497
# 0.8341626054
# 0.083322863
# 0.4839946569
# 0.0216099012

# on the other hand I see that 0.8341626054 is 3.0 * 0.2780542018
