\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}

\input{linear}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\div{\vskip 1em \hrule \vskip 1em}
\def\wat{\mathbin{@}}
\def\cn{{:}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}
\def\tt{{\mathsf t}}
\def\rr{{\mathsf r}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rset{\mathbf{Set}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}
\def\N{\mathbb{N}}
\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\o{\comp}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\tri{\triangleright}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\del{\partial}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\null{\emptyset}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}

\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\definecolor{block-gray}{gray}{0.85}
\definecolor{lgray}{gray}{0.7}
\newtcolorbox{myquote}{colback=block-gray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}


\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\title{Notes on the Logic of Convex Combination}
\begin{document}

\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
% got this from
% https://tex.stackexchange.com/questions/169512/tikz-style-arrow-tips-missing-when-using-tikz-cd-crossing-over
% ???

\section{Making Multiplicative and Additive Conjunction Coincide}
I want to go through the exercise of seeing how one can simulate/recreate
the additive conjunction $\&$ with a multiplicative $\tensor$ given
the appropriate postulates.

The postulates are, at the mode level
$$\tt : \rtype$$
$$\tensor : \tt \to \tt \to \tt \qquad 1 : \tt$$
$$\rho \tensor \rho \le \rho \qquad 1 \le \rho$$

Now `upstairs' what it means to be a type {\em over} $\tt$
is to be a type indexed by $\tt$:
$$
\erule
{\prov A : \tt \to \rtype}
{\prov A_\tt : \rtype}
$$
And admissibly we have
$$
\erule
{\prov A_\tt : \rtype \qquad \prov B_\tt : \rtype}
{\prov (A \tensor B)_\tt : \rtype}
$$
if we define
\[
(A \tensor B)_\tt = \lambda r \cn \tt . \exists \rho_1 \rho_2 .
(r \ge \rho_1 \tensor \rho_2) \times (A\ \rho_1)\x (B\ \rho_2)
\]
Now let's also try to define
\[
(A \& B)_\tt = \lambda r \cn \tt .  (A\ r)\x (B\ r)
\]
hoping that I can get away with sweeping the CPS business of the
polarity shift under the rug. Are these interprovable?

\[\exists \rho_1 \rho_2 .
(r \ge \rho_1 \tensor \rho_2) \times (A\ \rho_1)\x (B\ \rho_2)
\prov
  (A\ r)\x (B\ r)\]
\[
(r \ge \rho_1 \tensor \rho_2) \times (A\ \rho_1)\x (B\ \rho_2)
\prov
  (A\ r)\x (B\ r)\]
\[
(r \ge \rho_1 \tensor \rho_2) \times (A\ \rho_1)
\prov
  (A\ r)\]
\[
r \ge \rho_1 \tensor \rho_2
\prov
   r \ge \rho_1 \]
\[
\prov
   \rho_1 \tensor \rho_2 \ge \rho_1 \]
\[
\prov
   \rho_1 \tensor \rho_2 \ge \rho_1 \tensor 1 \]
\[\checkmark\]

and

\[
(A\ r)\x (B\ r)
\prov
\exists \rho_1 \rho_2 .
(r \ge \rho_1 \tensor \rho_2) \times (A\ \rho_1)\x (B\ \rho_2)  \]
\[
(A\ r)\x (B\ r)
\prov
(r \ge r \tensor r) \times (A\ r)\x (B\ r)  \]
\[\checkmark\]

\section{Making Dependent Multiplicative and Additive Conjunction Coincide}

\subsection{Attempt \#1}

How do I generalize this to the dependent case?

Suppose $A$ is a $\tt \to \rtype$. Suppose $B$ is a $\Pi r \cn \tt . (A\ r) \to \rtype$.
\[
(\Sigma x \cn A . B)_\tt = \lambda r \cn \tt .  \Sigma x \cn (A\ r) . (B\ r\ x)
\]
What's the multiplicative analogue?

$$[\dash] : \tt \to \rtype$$
$$\rjust : \Pi x \cn \tt . [x]$$
$$\sigma : \Pi x \cn \tt . ([x] \to \tt) \to \tt\qquad 1 : \tt$$
\[
\sigma\ r\ (\lambda \_ . r) \le r
\qquad
1 \le r\]
%
\[
\erule{r_1 \le r_1' \qquad \forall \zeta . (r_2\ \zeta) \le (r_2'\ \zeta)}
{\sigma\ r_1\ r_2 \le \sigma\ r_1'\ r_2'}
\]
%
\[
\sigma\ r\ (\lambda\_. 1) = r
\qquad
\color{gray}\sigma\ 1\ r = r\ (\rjust_1)
\]
%
\[
(\Sigma^- x\cn A . B)_\tt = \lambda r\cn\tt.\exists \rho_1 \cn \tt. \exists \rho_2 \cn [\rho_1] \to \tt .
\]
\[(\rho_1 \le \rho_2\ \rjust_{\rho_1}) \x {}\]
\[
 (r \ge \sigma\ \rho_1\ \rho_2) \x {}\]
\[
\Sigma x \cn (A\ \rho_1) . (B\ (\rho_2\ \rjust_{\rho_1})\ x)
\]

Are these interprovable?
Let's do the easy direction where $\exists$ is synchronous. I must show
\[
\Sigma x \cn (A\ r) . (B\ r\ x) \prov \exists \rho_1 \cn \tt. \exists \rho_2 \cn [\rho_1] \to \tt . \cdots
\]
I pick $\rho_1 = r$ and $\rho_2 = \lambda \_ . r$. I have to show $r \le r$
(reflexivity!) and $r \ge \sigma\ r\ (\lambda \_ . r)$
 (contraction!)
and $\Sigma x \cn (A\ r) . (B\ r\ x)$, which is my assumption.

Let's try the other direction. I need to show
\[
\rho_1:\tt, \rho_2:[\rho_1] \to \tt, \Gamma \prov \Sigma x \cn (A\ r) . (B\ r\ x)
\]
where
\[
\Gamma = (\rho_1 \le \rho_2\ \rjust_{\rho_1}), (r \ge \sigma\ \rho_1\ \rho_2),
z : (\Sigma x \cn (A\ \rho_1) . (B\ (\rho_2\ \rjust_{\rho_1})\ x)
\]
Ok, what do I give for the first component of the output pair?
It's $\bfst z$. This is ok by weakening:
$\rho_1 = \sigma\ \rho_1\ (\lambda \_ . 1) \le \sigma\ \rho_1\ \rho_2 \le r$.
Can I similarly reuse $\bsnd z$ as the second component of my output?
I would need $\rho_2\ \rjust_{\rho_1} \le r$. Can I demand
$\rho_2\ \rjust_{\rho_1} \le \sigma\ \rho_1\ \rho_2$?
Hmm, here this breaks down because of the gray axiom
$\sigma\ 1\ r = r\ (\rjust_1)$ not making enough sense.
\subsection{Attempt \#2}
Maybe $\rjust$ is nonsense, and I just want to feed $B$ the entire blob
$\sigma\ \rho_1\ \rho_2$. What does that look like?

$$[\dash] : \tt \to \rtype$$
$$\sigma : \Pi x \cn \tt . ([x] \to \tt) \to \tt\qquad 1 : \tt$$
\[
\sigma\ r\ (\lambda \_ . r) \le r
\qquad
1 \le r\]
%
\[
\erule{r_1 \le r_1' \qquad \forall \zeta . (r_2\ \zeta) \le (r_2'\ \zeta)}
{\sigma\ r_1\ r_2 \le \sigma\ r_1'\ r_2'}
\]
%
\[
\sigma\ r\ (\lambda\_. 1) = r
\]
%
\[
(\Sigma^- x\cn A . B)_\tt = \lambda r\cn\tt.\exists \rho_1 \cn \tt. \exists \rho_2 \cn [\rho_1] \to \tt .
\]
\[
 (r \ge \sigma\ \rho_1\ \rho_2) \x {}\]
\[
\Sigma x \cn (A\ \rho_1) . (B\ (\sigma\ \rho_1\ \rho_2)\ x)
\]
This requires $\rho_1 \le \sigma\ \rho_1\ \rho_2$, but this is true in this case:
$$\rho_1 = \sigma\ \rho_1\ (\lambda\_. 1) \le \sigma\ \rho_1\ \rho_2$$
Makes me wonder if I need to throw in an additional assumption $\rho_1
\le \sigma\ \rho_1\ \rho_2$ in the general case.

Oh, wait, this breaks down in the $\& \prov \tensor$ case: I no longer have
the phenomenon that substituting $\lambda \_ . r$ for $\rho_2$ causes
$\rho_2 (\rjust_{\rho_1})$ to turn in to plain old $r$, matching the
$B\ r\ x$ that appears in the $\&$-side type.

\subsection{Attempt \#3}

Maybe I don't want a global $\rjust$ but merely a local inhabitant of $[\rho_1]$?
Something more like
\[
(\Sigma^- x\cn A . B)_\tt = \lambda r\cn\tt.\exists \rho_1 \cn \tt. \exists \rho_2 \cn [\rho_1] \to \tt .\exists j \cn [\rho_1].
\]
\[(\rho_1 \le \rho_2\ j) \x
 (r \ge \sigma\ \rho_1\ \rho_2) \x
\Sigma x \cn (A\ \rho_1) . (B\ (\rho_2\ j)\ x)
\]
but this seems scarcely different from asking for $\rho_2 : \tt$, except
that we're passing the whole function $\rho_2$ to $\sigma\ \rho_1\ \rho_2$.
Could consider a forall instead:
\[
(\Sigma^- x\cn A . B)_\tt = \lambda r\cn\tt.\exists \rho_1 \cn \tt. \exists \rho_2 \cn [\rho_1] \to \tt .{\color{red}\forall} j \cn [\rho_1].
\]
\[(\rho_1 \le \rho_2\ j) \mathrel{\color{red} \imp}
 (r \ge \sigma\ \rho_1\ \rho_2) \x
\Sigma x \cn (A\ \rho_1) . (B\ (\rho_2\ j)\ x)
\]
But this is scary for being a polarity shift.
\subsection{Thinking About Inequalities Carefully}

When I write
$\sigma\ r (\lambda\_.r) \le r$, I have in mind the diagonal map
$\Delta : r \to r \x r$, or like $r \to \sigma\ r\ (\lambda\_.r)$
for the dependent case.

So I should definitely have projections
$$\bfst : \sigma\ r_1\ r_2 \ge r_1$$
$$\bsnd : (z : \sigma\ r_1\ r_2) \ge r_2\ (\bfst z)$$
Dependent inequality? Ugh.

Ok, so demanding $\rho_2\ \rjust_{\rho_1} \le \sigma\ \rho_1\ \rho_2$,
which would give me interprovability for my initial attempt, makes
some sense if I try to interpret it as second projection.

\subsection{Attempt \#4}

How about if I start with
$$[\dash] : \tt \to \rtype$$
$$1 : \tt \qquad * : [1]$$

Suppose $A$ is a $\tt \to \rtype$. Suppose $B$ is a
$\Pi r \cn \tt . (A\ r) \to  ([r] \to \tt) \to  \rtype$.
We say
\[
(\Sigma^a x \cn A . B)_\tt = \lambda r \cn \tt .  \Sigma x \cn (A\ r) . (B\ r\ x\ (\lambda\_. r))
\]
So that $B$ gets indexed by $x : A$, but also has its own functional
world-index.
The multiplicative version is
\[\sigma : \Pi x \cn \tt . ([x] \to \tt) \to \tt \]
\[
\sigma\ r\ (\lambda \_ . r) \le r
\qquad
1 \le r\]
%
\[
\erule{r_1 \le r_1' \qquad \forall \zeta . (r_2\ \zeta) \le (r_2'\ \zeta)}
{\sigma\ r_1\ r_2 \le \sigma\ r_1'\ r_2'}
\]
%
\[
\sigma\ r\ (\lambda\_. 1) = r
\qquad
\sigma\ 1\ r = r\ *
\]
%
\[
(\Sigma^m x\cn A . B)_\tt = \lambda r\cn\tt.\exists \rho_1 \cn \tt. \exists \rho_2 \cn [\rho_1] \to \tt .
\]
\[
 (r \ge \sigma\ \rho_1\ \rho_2) \x
\Sigma x \cn (A\ \rho_1) . (B\ \rho_1\ x\ \rho_2)
\]

\subsection{Attempt \#5}

I think I want to try to generalize the `$\wat$' operation to
dependent things. Agda-ing up a phony version of the dependent case
gives me something like the shape of the thing I want.

Whereas in the nondependent case I translate a type $A$ at a resource $\mu$,
I think now I want to translate a type-in-context $\Gamma \prov A : \rtype$
at a resource-in-context $\gamma \prov \mu : \alpha$ --- although the exact
relationship between $\Gamma$ and $\gamma$ is still sort of fuzzy in my
mind.

Suppose I have
$$
\erule
{\Gamma \prov A : \rtype \qquad \Gamma, x : A \prov B : \rtype}
{\Gamma \prov \Sigma^m x\cn A . B : \rtype}
$$
that I wish to translate. I have to cough up a representation
language proposition for
$$(\Gamma \prov \Sigma^m x\cn A . B) \wat (\gamma \prov r : \tt)$$
I do this by setting it to
\[ \exists \rho_1 \cn (\gamma \prov \tt) . \exists \rho_2 \cn (\gamma, x:[\rho_1] \prov \tt). \]
\[ (r \ge \sigma\ \rho_1\ \rho_2) \x  \Sigma x \cn (A \wat  \rho_1). (B \wat \rho_2)\]
Modulo a lot of squishy guesswork that remains to be done to make
this formally meaningful, this informally smells very right! No screws left
over after assembling the ikea furniture.

\section{Describing This Last Attempt in more Detail}
I still feel a constant buzz of uncertainty about how various syntactic classes
in the `lower theory' ought to line up with Licata/Shulman/Riley $\gamma$s and $\mu$s
and $\alpha$s. Maybe going through familiar examples will help.
\begin{myquote}
Let me articulate as an aside the confusion I {\em do} see at the moment:
On the one hand, modes seem to `go with' types, and mode terms
(e.g. $\top, \zeta$) seem to `go with' terms. This is LSR-style
`$A$ over $\alpha$' and `$M$ over $\mu$'. On the other hand, the
operators --- like $\tensor$ --- that operate on mode terms are
very much like {\em type} operators, and I keep seeming to need to say
$[x]$ for $x$ a mode term, as if mode terms have inhabitants. In this
other view, modes are like {\em kinds}, mode terms are like {\em
  types}, and mode term inhabitants exist, and are like {\em terms}.
Maybe this isn't so crazy: the fact that a type is inextricably
{\em bound to} a mode is like it {\em coloning} a kind.
\end{myquote}

In linear logic I have modes $\tt : \rmode$ (true) and $\rr : \rmode$
(linear resource). I have operations
like
$$\tensor : \rr \to \rr \to \rr \qquad \land : \tt \to \tt \to \tt
\qquad
\top : \tt
\qquad
{\mathsf F} : \tt \to \rr$$
and I know monoidal things like
$$\rho \land \rho \le \rho \qquad \top \le \rho$$
for any $\rho : \tt$.

What's the other dependent-signature data that forces this to make
some nontrivial amount of sense?
Could it be like $\zz$
such that
$$x : \tt, y : [x] \prov \zz(x, y) : \rmode$$
and maybe a constant
$$x : \tt, y : [x] \prov \zeta(x, y) : \zz(x, y) $$
\subsection{Restating assumptions}

In the nondependent case, we say $ \prov A : \rtype_\tt$ when $A : \tt \to \rtype$.

\noindent In the dependent case, do we say $\Gamma_\gamma \prov A_\alpha : \rtype$ when
$A : (\gamma \prov \alpha) \to \rtype$?

\div

In the lower theory we have
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Mode Contexts&$\gamma$&$\cdot \celse \gamma, x : \alpha$\\
Mode Kinds&$\kappa$&$\tt \celse \rr \celse \cdots$\\
Mode Types&$\alpha$&$1\celse \alpha \tensor \alpha \celse \cdots$\\
Mode Terms&$\mu$&$\chi\celse\cdots$\\
\end{tabular}
\]
In the upper theory we ostensibly have
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Contexts&$\Gamma$&$\cdot \celse \Gamma, x : A$\\
Kinds&&$\rtype_\kappa$\\
Types&$A$&$1\celse A \tensor A \celse \cdots$\\
Terms&$M$&$x \celse \cdots$\\
\end{tabular}
\]
In the metalanguage we have
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Contexts&$\Delta$&$\cdot \celse \Delta, x : P$\\
Kinds&&$\rtype$\\
Props&$P$&$\top \celse P \land P \celse
\exists y \cn s . P \celse \alpha \le \alpha $\\
Sorts&$s$&$ [\gamma \prov \kappa]$\\
Proofs&$R$&$ \cdots$\\
\end{tabular}
\]

The warmup is to define $\wat$ as a translation from
\begin{enumerate}
\item A closed upper language type $\prov A : \rtype_\kappa$
\item A closed lower language type $\prov \alpha : \kappa$
\end{enumerate}
to
\[\hbox{A closed metalanguage prop $A \wat \alpha$}\]
and we do this with clauses like
\[
(A_1 \tensor A_2) \wat \alpha = \exists y_1 \cn [{}\prov \rr].
\exists y_2 \cn [{}\prov \rr].
(A_1 \wat y_1) \land (A_2 \wat y_2) \land (\alpha \ge y_1 \tensor y_2)
\]
for $\tensor$ such that
$$
\erule
{\prov \alpha_1 : \rr \qquad \prov \alpha_2 : \rr}
{\prov \alpha_1 \tensor \alpha_2 : \rr}
$$

The advanced version is to define $\wat$ as a translation from
\begin{enumerate}
\item An upper language type $\Gamma \prov A : \rtype_{\theta\kappa}$
\item A lower language type $\gamma \prov \alpha : \kappa$
\item $\Gamma \prov \theta : \gamma$
\end{enumerate}
to
\[\hbox{A closed metalanguage prop $A \wat \alpha$}\]
with clauses like
\[
(\Sigma x \cn A_1 . A_2) \wat \alpha =
\exists y_1 \cn [\gamma \prov \rr].
\exists y_2 \cn [\gamma, x : y_1(\gamma) \prov \rr].\]
\[
(A_1 \wat y_1) \land (A_2 \wat y_2) \land ( \alpha(\gamma) \ge_\gamma \Sigma x \cn y_1(\gamma). y_2(\gamma, x))
\]
for $\alpha : [\gamma \prov \rr]$.

This means $\ge$ takes a subscript $\gamma$ which sort of binds all
the variables in $\gamma$ in the two expressions being compared.

\div

Ok, let's assume all lower kinds are closed. Making {\em them}
dependent seems a little too crazy for now.

I thought for a moment I saw the reason why I didn't need to explicitly mention
mode terms --- but now I think I might need to after all. If I have a context
consisting of $x : \alpha_1, y : \alpha_2(x) \prov \kappa$, then $x$ does
actually appear in $\alpha_2$.

\div

A mode theory consists of some declarations

\[
\sprov \kappa : \rkind \qquad \gamma \sprov \alpha : \kappa
\]
\[
\gamma \sprov \alpha \le \alpha : \kappa
\]

For example, linear logic looks like
$$
\sprov \tt : \rkind \qquad \sprov \rr : \rkind
$$
$$
 \sprov 1 : \rr
$$
$$
\phi : \rr, \psi : \rr \sprov \tensor(\phi, \psi) : \rr
$$
$$
\phi : \rr, \psi : \rr \sprov \tensor(\phi, \psi) \le \tensor(\psi, \phi) : \rr
$$

I might imagine adding a dependent kind
$$\sprov \zz : \rkind$$
and a mode constructor
$$\phi : \rr, m : \phi \sprov \star(\phi, m) : \zz $$
and a $\Sigma$-like type
$$\phi : \rr, \psi : \phi \to \zz \sprov \sigma(\phi, \psi) : \zz $$
The context well-formedness judgments aren't too surprising in shape:
$$
\erule
{\gamma \prov \alpha : \kappa}
{\prov (\gamma, x : \alpha) : \rctx}
\qquad
\erule
{ \prov \kappa : \rkind}
{\prov (\gamma, \phi : \kappa) : \rctx}
$$

Given this data, and a $\gamma$ and a $\kappa$,
the set of expressions $\alpha$ you can establish as well-formed in the frame
$$\gamma \prov \alpha : \kappa$$
is well-defined. This is the sort $[\gamma \prov \kappa]$ in the metalanguage.
And it's also sort of meaningful to {\em hypothesize} such things, and use
them under substitution. Which should make it meaningful for me to say

\[
(\Sigma x \cn A_1 . A_2) \wat \alpha =
\exists \phi \cn [\gamma \prov \rr].
\exists \psi \cn [\gamma, x : \phi(\gamma) \prov \zz].\]
\[
(\Sigma x \cn (A_1 \wat \phi) . (A_2 \wat \psi)) \land ( \alpha(\gamma) \ge_\gamma
\sigma(\phi(\gamma), x.\psi(\gamma,x))
\]
for $\alpha : [\gamma \prov \zz]$.

\div

Maybe I should just bite the bullet and allow $\Pi$ kinds in the lower theory.
Well --- contextual ones, anyway.
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Mode Contexts&$\gamma$&$\cdot \celse \gamma, x : \alpha \celse \gamma, \phi : \kappa$\\
Mode Kinds&$\kappa$&$ (\gamma \prov \base)$\\
Base Mode Kinds&$\base$&$\tt \celse \rr \celse \cdots$\\
Mode Types&$\alpha$&$\phi[\theta]$\\
Mode Terms&$\mu$&$\chi\celse\cdots$\\
\end{tabular}
\]

\[
\erule{\prov \gamma, \gamma' : \rctx \qquad \base \in \signat}
{\gamma \prov (\gamma' \prov \base) : \rkind}
 \]
\[
\erule{ \prov  \gamma : \rctx \qquad
\gamma \prov  \kappa : \rkind}
{ \prov (\gamma, \phi : \kappa) : \rctx}
\qquad
\erule{ \prov  \gamma : \rctx \qquad
\gamma \prov  \alpha : \kappa}
{ \prov (\gamma, x : \alpha) : \rctx}
\]

\[
\erule{\gamma \prov \theta : \gamma'\qquad
\gamma \prov \alpha : \kappa}
{\gamma \prov (\theta, \alpha/\phi) : (\gamma', \phi : \kappa)}
\qquad
\erule{\gamma \prov \theta : \gamma'\qquad
\gamma \prov \mu : \alpha[\theta]}
{\gamma \prov (\theta, \mu/x) : (\gamma', x : \alpha)}
\]
\[
\erule
{\phi : (\gamma' \prov \base) \in\gamma \cup \signat\qquad
 \gamma \prov \theta : \gamma'}
{\gamma \prov \phi[\theta] : \base}
\qquad
\erule
{\gamma', \gamma \prov \alpha : \base}
{\gamma' \prov \lambda \gamma . \alpha : (\gamma \prov \base)}
\]

Suppose $\sigma : (\phi : (\prov \rr), \psi : (x : \phi[] \prov \rr) \prov \rr)$
is in the signature $\signat$.

Then for any expression $\alpha : (\gamma \prov \rr)$, we define
\[
(\Sigma x \cn A_1 . A_2) \wat \alpha =
\exists \phi \cn (\gamma \prov \rr).
\exists \psi \cn (\gamma, x : \phi[\rid_\gamma] \prov \rr).\]
\[
(\Sigma x \cn (A_1 \wat \phi) . (A_2 \wat \psi)) \land ( \alpha \ge
\lambda \gamma . \sigma[\phi[\rid_\gamma]/\phi, \lambda x.\psi[\rid_\gamma,x/x]/\psi]
\]

\div

What's the $F$-generalization of this look like?
\[
F(\Gamma) \wat \alpha =
\exists \theta \cn f . (\Gamma \wat \theta) \land ( \alpha \ge F(\theta))
\]
where $f$ is the kinding of $F$?

{\color{lgray}
Example:
\[
\signat \supseteq \{ \tensor : (\phi : \rr, \psi : \rr \prov \rr), 1 : (\prov \rr), \ldots \}
\]}



{\color{lgray}
Derivable:
\[
\erule{\prov \alpha_1 : (\gamma \prov \rr)\qquad \prov\alpha_2 : (\gamma\prov \rr)}
{\prov \lambda \gamma . {\tensor}[\alpha_1[\rid_\gamma]/\phi, \alpha_2[\rid_\gamma]/\psi] : (\gamma \prov \rr)}
\]
}
\end{document}
