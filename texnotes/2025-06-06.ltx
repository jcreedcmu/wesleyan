\documentclass{article}
\usepackage[tmargin=0.15in, bmargin=0.15in]{geometry}
\input{theorem}
\input{prooftree}
\usepackage{relsize}
\usepackage{latexsym}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\usepackage{stackengine}
\newcommand\oast{\stackMath\mathbin{\stackinset{c}{0ex}{c}{0ex}{\ast}{\bigcirc}}}

\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\sssection#1{\vskip1em \hrule\vskip 0.5em \noindent $\triangleright$ {\bf #1} \vskip0.5em \hrule\vskip 1em }
\def\I{\mathbb{I}}

\def\breturn#1{[ #1 ]}
\def\bthunk#1{\langle #1 \rangle}
\def\brun{{!}}
\def\gets{\leftarrow}

\def\bget{\mathop{\mathbf{get}}\nolimits}
\def\bGel{\mathop{\mathbf{Gel}}\nolimits}
\def\bgel{\mathop{\mathbf{gel}}\nolimits}
\def\bgbound{\mathop{\mathbf{gbound}}\nolimits}
\def\bgpath{\mathop{\mathbf{gpath}}\nolimits}
\def\bungel{\mathop{\mathbf{ungel}}\nolimits}
\def\bGet{\mathop\mathbf{Get}}
\def\dapt#1#2{#1[\![#2]\!]}
\def\dap#1#2{#1\{#2\}}
\def\ll{\langle\!\langle}
\def\rr{\rangle\!\rangle}
\def\rshape{\ {\mathsf{shape}}}
\def\rrefl{{\mathsf{refl}}}
\def\bd{\mathsf{Bd}}
\def\bdd{\mathsf{Bdd}}
\def\rset{\mathbf{Set}}
\def\rid{\mathsf{id}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\prequiv{\dashv\vdash}
\def\sq{\square}

\definecolor{blu}{rgb}{0.1,0.5,1}
\definecolor{orng}{rgb}{1,0.5,0.3}

\def\nameof#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}



\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{lorange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.8}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=lorange,colback=lorange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\J{\mathbb{J}}
\def\R{\mathcal{R}}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\N{{\mathbb N}}
\def\Z{{\mathbb Z}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\tw{\mathsf{Tw}}
\def\sw#1{^{#1}_{#1}}
\def\TP{\mathbf{TPre}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{\textsf{\textbf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
%\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\A{\mathbf{A}}
\def\B{\mathbf{B}}
\def\C{\mathbb{C}}
\def\S{\mathbf{S}}
\def\G{\mathbf{G}}
\def\D{\mathbf{D}}
\def\DD{\mathbb{D}}
\def\E{\mathcal{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\tri{\rhd}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}

% https://tex.stackexchange.com/questions/716631/curved-arrows-from-tikz-cd-do-not-work
\tikzset{
  curve/.style={
    settings={#1},
    to path={
      (\tikztostart)
      .. controls ($(\tikztostart)!\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      and ($(\tikztostart)!1-\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      .. (\tikztotarget)\tikztonodes
    },
  },
  settings/.code={%
    \tikzset{quiver/.cd,#1}%
    \def\pv##1{\pgfkeysvalueof{/tikz/quiver/##1}}%
  },
  quiver/.cd,
  pos/.initial=0.35,
  height/.initial=0,
}

\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\tikzset{shorten <>/.style={shorten >=#1,shorten <=#1}}


\section{Parametricity Via Modality}


Here's the story that I think I dimly perceive.

I can first describe a process that transforms types to types and terms to terms.
Given any unpolarized/unfocused term, it ``secretly'' has a bunch of shift operators in its type.
We put them back in. One thing we can soundly replace downshifts with is a box-like modality.
This is the source of the box in the G\"odelâ€“McKinsey-Tarski translation.
One thing we can soundly replace the box with is a more concrete ``for all future worlds'' quantifier.
Let's look at an example.

If we have a (closed) proof, for every $A \in \rset$, of
\[((A \to A) \to A) \to (A \to A \to A) \to A \]
it's serectly
\[\dns(\dns (A \to A) \to A) \to \dns(A \to A \to A) \to A \]
and so we also have a proof of
\[\sq(\sq (A \to A) \to A) \to \sq(A \to A \to A) \to A \]
which means we also have a proof, for any poset (or, really, category) $W$ of worlds,
and any world $p \in W$, and any poset-indexed proposition $A : W \to \rset$, of
\[(\forall (q \ge p) .  (\forall (r \ge q). A\ r \to A\ r) \to A\ q) \to (\forall (q \ge p). A\ q \to A\ q \to A\ q) \to A\ p \]

All of this is an `external' theorem, and we could imagine internalizing it the same way internal parametricity
internalizes the external parametricity theorem.
I believe $n$-ary parametricity is in fact a special case of this: we
recover it by substituting the $n$-wide span category for $W$.

What I'd really like to have is a general theory of ``what can we substitute for shift operators''.

\subsection{A Clear Picture of the Term Language}

Remember: $\ups$ is $F$ and $\dns$ is $U$.
\[\begin{tabular}{rcl}
  Negatives $N$&$::=$&$F P \celse P \to N$\\
  Positives $P$&$::=$&$U N \celse P \x P \celse P + P$\\
\end{tabular}\]
\[\begin{prooftree}
\Gamma, x : P \prov  M : N
  \justifies
\Gamma\prov \lambda x . M : P \to N
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \prov  M_1 : P \to N \qquad \Gamma \prov M_2 : P
  \justifies
\Gamma\prov M_1\ M_2 : N
\end{prooftree}\]

\[\begin{prooftree}
\Gamma \prov v : P
  \justifies
\Gamma\prov \breturn v : F P
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \prov t : F P \qquad \Gamma, x : P \prov e : N
  \justifies
\Gamma\prov  x \gets t; e : N
\end{prooftree}\]

\[\begin{prooftree}
\Gamma \prov e : N
  \justifies
\Gamma\prov \bthunk e : U N
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \prov v : U N
  \justifies
\Gamma\prov \brun v : N
\end{prooftree}\]

Let's try something like kleisli lift as an example.
 $U(P_1 \to FP_2) \to  (UFP_2 \to FP_2)$.
\[
\begin{prooftree}
\[
\[
\justifies
x : UFP_1 \prov  \brun x : FP_1
\]
\[
  \[
  \justifies
  e : U(P_1 \to FP_2) \prov   \brun e : P_1 \to FP_2
  \]
  \[
  \justifies
   x' : P_1 \prov     x' : P_1
  \]
\justifies
e : U(P_1 \to FP_2), x' : P_1 \prov   \brun e\ x' : FP_2
\]
\justifies
e : U(P_1 \to FP_2), x : UFP_1 \prov  x' \gets \brun x ; \brun e\ x' : FP_2
\]
\justifies
\lambda e x .  x' \gets \brun x ; \brun e\ x'  : U(P_1 \to FP_2) \to  (UFP_1 \to FP_2)
\end{prooftree}
\]
Sure, no problem. So if I have the data of an adjunction
\[U, F : \rset \to \rset\]
\[\eta : (A : \rset) \to A \to UFA \]
\[\epsilon : (A : \rset) \to FUA \to A \]
can I substitute this? We transform
$\Gamma \prov N$ to $\Gamma \prov U N$
and leave $\Gamma \prov P$ alone.
We notice that we can do adjoint conjugation as expected:
\begin{itemize}
\item
  given $F\Gamma \prov N$ we can get to the conjugate $\Gamma \prov UN$
  by using functoriality of $U$ and $\eta$.
\item
  given $\Gamma \prov UN$ we can get to the conjugate $F\Gamma \prov N$
  by using functoriality of $F$ and $\epsilon$.
\end{itemize}

\begin{enumerate}
\item  We can erase $\langle \rangle$ and $!$.
\item  $[ ] $ becomes $\eta$
\item the let-binder becomes a bit of a conjugation mess
\end{enumerate}

or else we can  transform
$\Gamma \prov N$ to $F \Gamma \prov  N$
in which case
\begin{enumerate}
\item   $\langle \rangle$ becomes one conjugation, using $\eta$
\item  $!$ becomes one conjugation, using $\epsilon$
\item  $[ ] $ is functoriality of $F$
\item the let-binder becomes substitution
\end{enumerate}
Maybe this spreads the annoyances around more evenly.
\end{document}
