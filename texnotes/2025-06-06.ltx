\documentclass{article}
\usepackage[tmargin=0.15in, bmargin=0.15in]{geometry}
\input{theorem}
\input{prooftree}
\usepackage{hyperref}
% https://tex.stackexchange.com/a/847
\hypersetup{
    colorlinks,
    urlcolor={blue},
}
\usepackage{makecell}
\usepackage{relsize}
\usepackage{latexsym}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\usepackage{stackengine}
\newcommand\oast{\stackMath\mathbin{\stackinset{c}{0ex}{c}{0ex}{\ast}{\bigcirc}}}

\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\sssection#1{\vskip1em \hrule\vskip 0.5em \noindent $\triangleright$ {\bf #1} \vskip0.5em \hrule\vskip 1em }
\def\I{\mathbb{I}}

\def\breturn#1{[ #1 ]}
\def\bthunk#1{\langle #1 \rangle}
\def\brun{{!}}
\def\gets{\leftarrow}
\def\all{\forall}

\def\bget{\mathop{\mathbf{get}}\nolimits}
\def\bGel{\mathop{\mathbf{Gel}}\nolimits}
\def\bgel{\mathop{\mathbf{gel}}\nolimits}
\def\bgbound{\mathop{\mathbf{gbound}}\nolimits}
\def\bgpath{\mathop{\mathbf{gpath}}\nolimits}
\def\bungel{\mathop{\mathbf{ungel}}\nolimits}
\def\bGet{\mathop\mathbf{Get}}
\def\dapt#1#2{#1[\![#2]\!]}
\def\dap#1#2{#1\{#2\}}
\def\ll{\langle\!\langle}
\def\rr{\rangle\!\rangle}
\def\rshape{\ {\mathsf{shape}}}
\def\rrefl{{\mathsf{refl}}}
\def\bd{\mathsf{Bd}}
\def\bdd{\mathsf{Bdd}}
\def\rset{\mathbf{Set}}
\def\rid{\mathsf{id}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\prequiv{\dashv\vdash}
\def\sq{\square}

\definecolor{blu}{rgb}{0.1,0.5,1}
\definecolor{orng}{rgb}{1,0.5,0.3}

\def\nameof#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}



\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{lorange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.8}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=lorange,colback=lorange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\bu{\bullet}
\def\J{\mathbb{J}}
\def\R{\mathcal{R}}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\N{{\mathbb N}}
\def\Z{{\mathbb Z}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\tw{\mathop\triangleleft}
\def\tb{\mathop\blacktriangleleft}
\def\sw#1{^{#1}_{#1}}
\def\TP{\mathbf{TPre}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{\textsf{\textbf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
%\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\A{\mathbf{A}}
\def\B{\mathbf{B}}
\def\C{\mathbb{C}}
\def\S{\mathbf{S}}
\def\G{\mathbf{G}}
\def\D{\mathbb{D}}
\def\E{\mathbb{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\tri{\rhd}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}

% https://tex.stackexchange.com/questions/716631/curved-arrows-from-tikz-cd-do-not-work
\tikzset{
  curve/.style={
    settings={#1},
    to path={
      (\tikztostart)
      .. controls ($(\tikztostart)!\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      and ($(\tikztostart)!1-\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      .. (\tikztotarget)\tikztonodes
    },
  },
  settings/.code={%
    \tikzset{quiver/.cd,#1}%
    \def\pv##1{\pgfkeysvalueof{/tikz/quiver/##1}}%
  },
  quiver/.cd,
  pos/.initial=0.35,
  height/.initial=0,
}

\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\tikzset{shorten <>/.style={shorten >=#1,shorten <=#1}}


\section{Parametricity Via Modality}


Here's the story that I think I dimly perceive.

I can first describe a process that transforms types to types and terms to terms.
Given any unpolarized/unfocused term, it ``secretly'' has a bunch of shift operators in its type.
We put them back in. One thing we can soundly replace downshifts with is a box-like modality.
This is the source of the box in the G\"odelâ€“McKinsey-Tarski translation.
One thing we can soundly replace the box with is a more concrete ``for all future worlds'' quantifier.
Let's look at an example.

If we have a (closed) proof, for every $A \in \rset$, of
\[((A \to A) \to A) \to (A \to A \to A) \to A \]
it's serectly
\[\dns(\dns (A \to A) \to A) \to \dns(A \to A \to A) \to A \]
and so we also have a proof of
\[\sq(\sq (A \to A) \to A) \to \sq(A \to A \to A) \to A \]
which means we also have a proof, for any poset (or, really, category) $W$ of worlds,
and any world $p \in W$, and any poset-indexed proposition $A : W \to \rset$, of
\[(\all (q \ge p) .  (\all (r \ge q). A\ r \to A\ r) \to A\ q) \to (\all (q \ge p). A\ q \to A\ q \to A\ q) \to A\ p \]

All of this is an `external' theorem, and we could imagine internalizing it the same way internal parametricity
internalizes the external parametricity theorem.
I believe $n$-ary parametricity is in fact a special case of this: we
recover it by substituting the $n$-wide span category for $W$.

What I'd really like to have is a general theory of ``what can we substitute for shift operators''.

\subsection{A Clear Picture of the Term Language}

Remember: $\ups$ is $F$ and $\dns$ is $U$.
\[\begin{tabular}{rcl}
  Negatives $N$&$::=$&$F P \celse P \to N$\\
  Positives $P$&$::=$&$U N \celse P \x P \celse P + P$\\
\end{tabular}\]
\[\begin{prooftree}
\Gamma, x : P \prov  M : N
  \justifies
\Gamma\prov \lambda x . M : P \to N
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \prov  M_1 : P \to N \qquad \Gamma \prov M_2 : P
  \justifies
\Gamma\prov M_1\ M_2 : N
\end{prooftree}\]

\[\begin{prooftree}
\Gamma \prov v : P
  \justifies
\Gamma\prov \breturn v : F P
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \prov t : F P \qquad \Gamma, x : P \prov e : N
  \justifies
\Gamma\prov  x \gets t; e : N
\end{prooftree}\]

\[\begin{prooftree}
\Gamma \prov e : N
  \justifies
\Gamma\prov \bthunk e : U N
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \prov v : U N
  \justifies
\Gamma\prov \brun v : N
\end{prooftree}\]

Let's try something like kleisli lift as an example.
 $U(P_1 \to FP_2) \to  (UFP_2 \to FP_2)$.
\[
\begin{prooftree}
\[
\[
\justifies
x : UFP_1 \prov  \brun x : FP_1
\]
\[
  \[
  \justifies
  e : U(P_1 \to FP_2) \prov   \brun e : P_1 \to FP_2
  \]
  \[
  \justifies
   x' : P_1 \prov     x' : P_1
  \]
\justifies
e : U(P_1 \to FP_2), x' : P_1 \prov   \brun e\ x' : FP_2
\]
\justifies
e : U(P_1 \to FP_2), x : UFP_1 \prov  x' \gets \brun x ; \brun e\ x' : FP_2
\]
\justifies
\lambda e x .  x' \gets \brun x ; \brun e\ x'  : U(P_1 \to FP_2) \to  (UFP_1 \to FP_2)
\end{prooftree}
\]
Sure, no problem. So if I have the data of an adjunction
\[U, F : \rset \to \rset\]
\[\eta : (A : \rset) \to A \to UFA \]
\[\epsilon : (A : \rset) \to FUA \to A \]
can I substitute this? We transform
$\Gamma \prov N$ to $\Gamma \prov U N$
and leave $\Gamma \prov P$ alone.
We notice that we can do adjoint conjugation as expected:
\begin{itemize}
\item
  given $F\Gamma \prov N$ we can get to the conjugate $\Gamma \prov UN$
  by using functoriality of $U$ and $\eta$.
\item
  given $\Gamma \prov UN$ we can get to the conjugate $F\Gamma \prov N$
  by using functoriality of $F$ and $\epsilon$.
\end{itemize}

\begin{enumerate}
\item  We can erase $\langle \rangle$ and $!$.
\item  $[ ] $ becomes $\eta$
\item the let-binder becomes a bit of a conjugation mess
\end{enumerate}

or else we can  transform
$\Gamma \prov N$ to $F \Gamma \prov  N$
in which case
\begin{enumerate}
\item   $\langle \rangle$ becomes one conjugation, using $\eta$
\item  $!$ becomes one conjugation, using $\epsilon$
\item  $[ ] $ is functoriality of $F$
\item the let-binder becomes substitution
\end{enumerate}
Maybe this spreads the annoyances around more evenly.

\section{Modality}

I want to return to the question of: given the sort of translation like
\[\begin{tabular}{lcl}
  $p \wat \alpha$&=&$p(\alpha)$\\
  $\dns N \wat \alpha$&=&$\all \phi. N \wat \phi \to \alpha \tw \phi$\\
  $ (P_1 \oplus P_2) \wat \alpha$&=&$(P_1 \wat \alpha) \lor (P_2 \wat \alpha)$\\
  $ (P_1 \otimes P_2) \wat \alpha$&=&$\exists \alpha_1\alpha_2. (\alpha \le \alpha_1 \otimes \alpha_2) \land (P_1 \wat \alpha_1) \land (P_2 \wat \alpha_2)$\\
  $n \wat\phi$&=&$n(\phi)$\\
  $\ups P \wat \phi$&=&$\all \alpha. P \wat \alpha \to \alpha \tw \phi$\\
  $ (N_1 \amp N_2) \wat \phi$&=&$(N_1 \wat \phi) \lor (N_2 \wat \phi)$\\
  $ (P \to N) \wat \phi$&=&$\exists \alpha\phi'. (\alpha \lol \phi' \le \phi) \land (P \wat \alpha) \land (N \wat \phi')$\\
\end{tabular}\]
Is it possible to get a Kripke-ish modal logic out of this by suitable subsitutions for the type of $\alpha$ and $\phi$ and $\le$ and $\tw$?
Possibly by generalizing to a modal setup with different syntactic classes of propositions, and including like
\[\begin{tabular}{lcl}
  $U N \wat \bar \phi$&=&$\exists \phi. (U  \phi \le \bar \phi ) \land  (N \wat  \phi)$\\
  $F \bar P \wat \alpha $&=&$\exists \bar \alpha. ( \alpha \le F  \bar \alpha) \land  (\bar P \wat \bar  \alpha)$\\
\end{tabular}\]
where barred things are at a ``higher'' modal level. The first thing I want to sort out is what interactions are required between $\le$ and $\tw$ and $F$ and $U$ for things to make sense.
Let's assume that I want Kripke ``reflexivity'' and ``transitivity'', meaning I think the following sequents in the source language should be provable:
\[\prov \square n \to n  \qquad = \qquad \prov F \dns U  n \to n \]
\[\prov \square n \to \ups \square \ups \square n \qquad = \qquad \prov F \dns U  n \to \ups F \dns U \ups F \dns U n  \]
\subsection{Reflexivity}
Let's tackle reflexivity first. I start with the goal
\[  (F \dns U n \to n) \wat \phi \prov 1 \tw \phi \]
and I'd like to transform it to
\[  (F \dns U n) \wat \alpha,  n @ \phi \prov 1 \tw (\alpha \lol \phi) \eqno(*)\]
but wait! what I really got was is
\[ \alpha \lol \phi' \le \phi ,  (F \dns U n) \wat \alpha,  n @ \phi' \prov 1 \tw \phi \]
and I'm assuming monotonicity of $\tw$ with respect to $\le$, in the sense that I assume I can manage
\[
\begin{prooftree}
    (F \dns U n) \wat \alpha,  n @ \phi' \prov 1 \tw (\alpha \lol \phi')
\justifies
\alpha \lol \phi' \le  \phi,  (F \dns U n) \wat \alpha,  n @ \phi' \prov 1 \tw \phi
\end{prooftree}
\]
and what would suffice for that would be
\[
 \alpha \tw \phi_0 \to \phi_0 \le \phi  \to \alpha \tw \phi
\]
Similarly, I expect $\tensor$ on the left to be able to asynchronously rewrite the context.
That would mean I expect to be able to do
\[
\begin{prooftree}
\[
P_1 \wat \alpha_1, P_2 \wat \alpha_2 \prov \alpha_1 \otimes \alpha_2 \tw \phi
\justifies
P_1 \wat \alpha_1, P_2 \wat \alpha_2, \alpha \le \alpha_1 \otimes \alpha_2 \prov \alpha \tw \phi
\]
\justifies
(P_1 \otimes P_2) \wat \alpha \prov \alpha \tw \phi
\end{prooftree}
\]
so I expect monotonicity
\[ \alpha \le \alpha' \to \alpha' \tw \phi \to \alpha \tw \phi \]
Ok, so I've documented for myself that I expect $\tw$ and $\le$ to be compatible. What else do I need for
reflexivity? Transforming $(*)$, I also expect to be able to move $\alpha$ to the left of $\tw$.
This is part of my basic expectations of $\lol$ and $1$.
\[  (F \dns U n) \wat \alpha,  n \wat \phi \prov \alpha \tw \phi\]
Let's expand out $F$.
\[  \exists  \bar \alpha . (\alpha \le F \bar \alpha) \land ( \dns U n \wat \bar \alpha),  n \wat \phi \prov \alpha \tw \phi\]
\[  \alpha \le F \bar \alpha,  \dns U n \wat \bar \alpha,  n \wat \phi \prov \alpha \tw \phi\]
\[   ( \dns U n) \wat \bar \alpha,  n \wat \phi \prov F\bar\alpha \tw \phi\]
Now it's time to expand the $\dns$. Maybe I should have written it as $\bar \dns$, since it's
at the higher modal level.
\[    \all \bar \phi . (U n) \wat \bar \phi \to \bar\alpha\tw\bar\phi,  n \wat \phi \prov F\bar\alpha \tw \phi\]
I'm thought I unconditionally expected this to be the same as
\[    \all \bar \phi . (U n) \wat \bar \phi \to \bar\alpha\tw\bar\phi,  n \wat \phi \prov \bar\alpha \tw U\phi\]
which means I can substitute $U\phi$ for $\bar \phi$ to get
\[    n \wat \phi \prov    (U n) \wat U \phi \]
which is
\[   n \wat \phi  \prov \exists \phi'. (U  \phi' \le U \phi ) \land  (n \wat  \phi')\]
Ok! I see this depends on reflexivity of $\le$ between $\bar\phi$. Maybe that's something I could conceivably
withhold? Seems somewhat promising.


\subsection{Transitivity}
We aim to show
\[ ( F \dns U  n) \wat \alpha, (\ups F \dns U \ups F \dns U n)\wat\phi \prov \alpha \tw \phi  \]
and unpacking the left gives us
\[ ( \dns U  n) \wat \bar\alpha, (\ups F \dns U \ups F \dns U n)\wat\phi \prov \bar F\alpha \tw  \phi  \]
much like before. Thinking of how the modal proof goes: we leave the lhs alone for a bit, and unpack the
two boxes on the right first. So we don't want to work on the $(\dns U n) \wat\bar\alpha$ yet, but rather
the other big mess at $\phi$. Expand the $\ups$:

\[( \dns U  n) \wat \bar\alpha, \all \alpha'. (F \dns U \ups F \dns U n) \wat \alpha' \to \alpha' \tw \phi
\prov F \bar \alpha \tw  \phi
\]
It seems like we're still working `at' our current $\phi$ here, so we set $\alpha' = F \bar \alpha$ and go to
\[( \dns U  n) \wat \bar\alpha\prov (F \dns U \ups F \dns U n) \wat F\bar \alpha\]

which expands to
\[( \dns U  n) \wat \bar\alpha \prov \exists \bar \alpha'. ( F \bar \alpha \le F  \bar \alpha') \land  ( \dns U \ups F \dns U n \wat \bar  \alpha')\]
so we can assert reflexivity at $\alpha$ perhaps, and pick $\bar\alpha$ for $\bar\alpha'$, and go to
\[( \dns U  n) \wat \bar\alpha \prov  (\dns U \ups F \dns U n) \wat \bar \alpha\]
Now I hope there's interesting Kripke-relevant content in this $\dns$ and the forthcoming two $\dns$'s,
one on the right and then one on the left. Our current concern expands to
\[( \dns U  n) \wat \bar\alpha \prov \all \bar\phi. (U \ups F \dns U n) \wat \bar\phi \to \bar\alpha \tw \bar\phi\]
and thence to
\[( \dns U  n) \wat \bar\alpha, (U \ups F \dns U n) \wat \bar\phi \prov \bar\alpha \tw \bar\phi\]
\[( \dns U  n) \wat \bar\alpha, ( \ups F \dns U n) \wat \phi \prov \bar\alpha \tw U\phi\]
\[( \dns U  n) \wat \bar\alpha, ( \ups F \dns U n) \wat \phi \prov F\bar\alpha \tw \phi\]
\[( \dns U  n) \wat \bar\alpha  \prov(F \dns U n) \wat F\bar\alpha\]
\[( \dns U  n) \wat \bar\alpha  \prov( \dns U n) \wat \bar\alpha\]
Hmm. That didn't require any sort of transitivity-ish properties that I expected.
Maybe I have to disrupt the adjunction of $F$ and $U$, but I'm afraid to do that. I thought that
was required for focusing to work right.

\section{Back to Earlier Token-Passing Translations}
In \href{http://jcreed.org/papers/linear-modal.pdf}{this paper} I had the following sort of translation:
\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $X \wat q$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(q)$\\
  $\dns N $ & $!(h(q) \lol N \wat q)$\\
  $\sq N $ & $!(\all q' \ge q . h(q') \lol N \wat q')$\\
  $ (P_1 \oplus P_2) $ & $(P_1 \wat q ) \oplus (P_2 \wat q )$\\
  $ (P_1 \otimes P_2) $ & $(P_1 \wat q) \otimes (P_2 \wat q)$\\
  $n$ & $n(q)$\\
  $\ups P $ & $\ups (h(q) \otimes P \wat q)$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat q ) \amp (N_2 \wat q )$\\
  $ (P \lol N) $ & $(P \wat q) \lol (N \wat q)$\\
\end{tabular}\]

This translation takes positives to positives and negatives to
negatives. The source language is assumed to be substructural. How do
things look if I assume the source language is largely intuitionistic,
i.e. not substructural? In the target language, I'd have a $U$ that
dips down into linear to account for the linear token, and conversely
an $F$ to come back up to unrestricted.

\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $X \wat q$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(q)$\\
  $\dns N $ & $\dns U(h(q) \lol N \wat q)$\\
  $\sq N $ & $\dns U(\all q' \ge q . h(q') \lol N \wat q')$\\
  $ (P_1 \lor P_2) $ & $(P_1 \wat q ) \lor (P_2 \wat q )$\\
  $ (P_1 \x P_2) $ & $(P_1 \wat q) \x (P_2 \wat q)$\\
  $n $ & $n(q)$\\
  $\ups P $ & $\ups (h(q) \otimes F(P \wat q))$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat q ) \amp (N_2 \wat q )$\\
  $ (P \lol N) $ & $F(P \wat q) \lol (N \wat q)$\\
\end{tabular}\]
Here negatives translate to negative linear and positives translate to positive unrestricted.

\vfil\eject
Now let's try to pump the rhs of this translation through the familiar cps-y resource-semantics translation.

\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat (q,\bar\alpha) / N \wat (q,\phi)$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(q,\bar\alpha)$\\
  $\dns N $ & $\forall   \phi \beta .  h(q,  \beta) \to ( N \wat (q,  \phi)) \to F\bar\alpha * \beta \tw  \phi$\\
  $\sq N $ & $\forall   \phi \beta .\all q'\ge q .  h(q',  \beta) \to ( N \wat (q',  \phi)) \to F\bar\alpha * \beta \tw  \phi$\\
  $ (P_1 \lor P_2) $ & $(P_1 \wat (q,\bar \alpha) ) \oplus (P_2 \wat (q,\bar \alpha))$\\
  $ (P_1 \x P_2) $ & $\exists \bar\alpha_1,\bar\alpha_2. (\bar\alpha = \bar\alpha_1\bar\alpha_2) \land (P_1 \wat (q,\bar\alpha_1)) \land (P_2 \wat (q,\bar\alpha_2))$\\
  $n $ & $n(q, \phi)$\\
  $\ups P $ & $\all\bar\alpha\beta  . (h(q, \beta)) \to (P \wat (q, \bar\alpha))  \to F\bar\alpha * \beta   \tw \phi$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat (q,\phi) ) \oplus (N_2 \wat (q,\phi) )$\\
  $ (P \lol N) $ & $\exists \bar\alpha,\phi'. (\phi = F\bar\alpha \lol \phi') \land (P \wat (q,\bar\alpha)) \land (N \wat (q,\phi'))$\\
\end{tabular}\]
%% $\ups P$ becomes $\ups (h(q) \otimes F(P \wat q))$ which becomes

%% \[(\ups P) @ (q, \phi) = \all\alpha . (h(q) \otimes F(P \wat q)) \wat \alpha \to \alpha \tw \phi\]
%% \[ = \all\beta \alpha . (h(q) \wat\beta) \to F(P \wat q) \wat \alpha \to \beta \alpha \tw \phi\]
%% \[ = \all\beta \bar\alpha . (h(q) \wat\beta) \to (P \wat q) \wat \bar\alpha \to \beta * F\bar\alpha \tw \phi\]
%% \[ = \all\bar\alpha\beta  . (h(q, \beta)) \to (P \wat (q, \bar\alpha))  \to F\bar\alpha * \beta   \tw \phi\]

%% $\dns N$ becomes $\dns U(h(q) \lol N \wat q)$ which becomes
%% \[(\dns N) \wat (q,\bar \alpha) = \forall \bar \phi . (U(h(q) \lol N \wat q)) \wat \bar \phi \to \bar \alpha \tw \bar \phi \]
%% \[= \forall \bar \phi . (\exists  \phi . U \phi = \bar \phi \land (h(q) \lol N \wat q) \wat \phi) \to \bar\alpha \tw \phi \]
%% \[= \forall   \phi . ( (h(q) \lol N \wat q) \wat \phi) \to  \bar\alpha \tw U \phi \]
%% \[= \forall   \phi \beta .  (h(q,  \beta)) \to ( N \wat (q,  \phi)) \to \bar\alpha \tw U (\beta \lol \phi) \]
%% \[(\dns N) \wat (q,\bar \alpha) = \forall   \phi \beta .  h(q,  \beta) \to ( N \wat (q,  \phi)) \to F\bar\alpha * \beta \tw  \phi \]

Now I want to make some substitutions to simplify this:
\[ \alpha' := (q,\bar \alpha) \]
\[ \phi' := (q, \phi) \]
\[ (q,\bar\alpha')  \tb_\sq (q',\phi') := \all \beta \to q' \ge q\to   h(q_2,\beta) \to F\bar \alpha * \beta \tw \phi \]
\[ (q,\bar\alpha')  \tb (q',\phi') := \all \beta \to q' = q\to   h(q_2,\beta) \to F\bar \alpha * \beta \tw \phi \]
I claim this translation is equivalent to
\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat \bar\alpha' / N \wat \phi'$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(\bar\alpha')$\\
  $\dns N $ & $\forall   \phi' .   ( N \wat \phi') \to \bar\alpha' \tb  \phi$\\
  $\sq N $ & $\forall   \phi' . ( N \wat \phi') \to \bar\alpha' \tb_\sq \phi$\\
  $ (P_1 \lor P_2) $ & $(P_1 \wat \bar \alpha' ) \oplus (P_2 \wat \bar \alpha')$\\
  $ (P_1 \x P_2) $ & $\exists \bar\alpha_1',\bar\alpha_2'. (\bar\alpha' = \bar\alpha_1'\bar\alpha_2') \land (P_1 \wat \bar\alpha_1') \land (P_2 \wat \bar\alpha_2')$\\
  $n $ & $n(\phi')$\\
  $\ups P $ & $\all\bar\alpha' .   (P \wat \bar\alpha')  \to \bar\alpha'   \tb \phi'$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat \phi' ) \oplus (N_2 \wat \phi' )$\\
  $ (P \lol N) $ & $\exists \bar\alpha',\phi_0'. (\phi' = F\bar\alpha' \lol \phi_0') \land (P \wat \bar\alpha') \land (N \wat \phi_0')$\\
\end{tabular}\]
Now just get rid of all the primes:
\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat \bar\alpha / N \wat \phi$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(\bar\alpha)$\\
  $\dns N $ & $\forall   \phi .   ( N \wat \phi) \to \bar\alpha \tb  \phi$\\
  $\sq N $ & $\forall   \phi . ( N \wat \phi) \to \bar\alpha \tb_\sq \phi$\\
  $ (P_1 \lor P_2) $ & $(P_1 \wat \bar \alpha ) \oplus (P_2 \wat \bar \alpha)$\\
  $ (P_1 \x P_2) $ & $\exists \bar\alpha_1,\bar\alpha_2. (\bar\alpha = \bar\alpha_1\bar\alpha_2) \land (P_1 \wat \bar\alpha_1) \land (P_2 \wat \bar\alpha_2)$\\
  $n $ & $n(\phi)$\\
  $\ups P $ & $\all\bar\alpha .   (P \wat \bar\alpha)  \to \bar\alpha   \tb \phi$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat \phi ) \oplus (N_2 \wat \phi )$\\
  $ (P \lol N) $ & $\exists \bar\alpha,\phi_0. (\phi = F\bar\alpha \lol \phi_0) \land (P \wat \bar\alpha) \land (N \wat \phi_0)$\\
\end{tabular}\]

Now I can perhaps do some reasoning that if my source language is nonsubstructural, resources $\alpha$
don't have any interesting content {\em besides} the kripke world. This means the relation
$\bar \alpha = \bar\alpha_1\bar\alpha_2$ holds if and only if all three are equal on the nose.
Also $\phi = F\bar \alpha \lol \phi_0$ should be try if $\phi = \phi_0$ and $\alpha$'s $q$ field matches the other two. Hm. Maybe it is more appropriate to split off the other relation.

So I think I'm imagining a situation somewhat like the following:
\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat \alpha / N \wat \phi$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(\alpha)$\\
  $\dns N $ & $\forall   \phi .   ( N \wat \phi) \to  \alpha \sim \phi \to \alpha \tw  \phi$\\
  $\sq N $ & $\forall   \phi . ( N \wat \phi) \to \alpha \le \phi \to \alpha \tw \phi$\\
  $ (P_1 \lor P_2) $ & $(P_1 \wat  \alpha ) \oplus (P_2 \wat  \alpha)$\\
  $ (P_1 \x P_2) $ & $ (P_1 \wat \alpha) \land (P_2 \wat \alpha)$\\
  $n $ & $n(\phi)$\\
  $\ups P $ & $\all\alpha .   (P \wat \alpha)  \to  \alpha \sim \phi \to\alpha   \tw \phi$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat \phi ) \oplus (N_2 \wat \phi )$\\
  $ (P \lol N) $ & $\exists\alpha . ( \alpha \sim \phi) \land (P \wat \alpha) \land (N \wat \phi)$\\
\end{tabular}\]
And I wonder even if $\tw$ could be demoted to $\#(\phi)$.
\subsection{Checking This Is Ok}
Axioms:
\begin{enumerate}
\item If $\alpha \sim \phi$ and $\alpha' \sim \phi$ and $\alpha' \tw \phi$, then $\alpha \tw \phi$.
\end{enumerate}
\begin{theorem}
\[\Delta;\Gamma; \Omega \qquad \mapsto\qquad \sq\Delta\wat\alpha,\dns\Gamma \wat \alpha, \Omega\wat\alpha\]
\[ \prov N \qquad\iff\qquad  N\wat \phi, \alpha\sim\phi \prov  \alpha\tw\phi\]
\[ [N] \prov P \qquad\iff\qquad  P \wat\alpha, \alpha\sim\phi \prov  N\wat \phi\]
\[  \prov [P] \qquad\iff\qquad \prov P \wat\alpha \]
\end{theorem}

\begin{proof}
Consider $\lol R$.

\[
\begin{prooftree}
\[
\alpha' \sim \phi, P\wat\alpha',  N\wat \phi \prov  \alpha'\tw\phi
\justifies
\alpha' \sim \phi, P\wat\alpha',  N\wat \phi, \alpha\sim\phi \prov  \alpha\tw\phi
\]
\justifies
(P \lol N)\wat \phi, \alpha\sim\phi \prov  \alpha\tw\phi
\end{prooftree}
\]
Consider $\lol L$.
\[
\begin{prooftree}
\[
\hbox{\color{gray}note: connection to $P'$ through $\phi$ lost here}
\justifies
P' \wat\alpha, \alpha\sim\phi \prov P \wat \alpha
\]
\[
\justifies
P' \wat\alpha, \alpha\sim\phi \prov  N\wat \phi
\]
\justifies
P' \wat\alpha, \alpha\sim\phi \prov  (P \lol N)\wat \phi
\end{prooftree}
\]
Consider $\sq R$.
\[\begin{prooftree}
N\wat \phi, \alpha \le \phi   \prov \alpha \tw \phi
\justifies
  \prov (\sq N) \wat \alpha
\end{prooftree}\]
\cqed
\end{proof}


Try to prove $\sq N \to N$
\[
\begin{prooftree}
\alpha\sim\phi \prov \alpha \le \phi
\justifies
\sq N \wat \alpha, N \wat \phi, \alpha \sim \phi \prov \alpha \tw \phi
\end{prooftree}
\]
Try to prove $\sq N \to \sq\sq N$... ah here I seem to want to know the other side
of the fact that $\alpha \sim \phi$ is a functional relation. Not only do I need single-valuedness,
as I relied on in $\lol R$, I need totality as well. Because in
\[
\begin{prooftree}
\[
\[
\justifies
\sq N \wat \alpha, \ups \sq N \wat \phi', \alpha \le \phi' \prov  \alpha\tw\phi'
\]
\justifies
\sq N \wat \alpha \prov \sq \ups \sq N \wat \alpha
\]
\justifies
\sq N \wat \alpha, \ups \sq \ups \sq N \wat \phi, \alpha \sim \phi \prov \alpha \tw \phi
\end{prooftree}
\]
I want to construct a new $\alpha'$ from $\phi'$ to instantiate the $\ups$'s quantifier with.

\subsection{Functional Alphas}

Let $\bar\phi$ be the function that extracts an $\alpha$ out of a $\phi$.

\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat \alpha / N \wat \phi$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(\alpha)$\\
  $\dns N $ & $\forall   \phi .   ( N \wat \phi) \to \alpha = \bar\phi \to \# (\phi)$\\
  $\sq N $ & $\forall   \phi . ( N \wat \phi) \to \alpha \le \phi \to \#( \phi)$\\
  $ (P_1 \lor P_2) $ & $(P_1 \wat  \alpha ) \oplus (P_2 \wat  \alpha)$\\
  $ (P_1 \x P_2) $ & $ (P_1 \wat \alpha) \land (P_2 \wat \alpha)$\\
  $n $ & $n(\phi)$\\
  $\ups P $ & $   P \wat \bar\phi  \to \#(\phi)$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat \phi ) \oplus (N_2 \wat \phi )$\\
  $ (P \lol N) $ & $ (P \wat \bar\phi) \land (N \wat \phi)$\\
\end{tabular}\]
Try to prove $\sq N \to N$
\[
\begin{prooftree}
 \prov \bar\phi \le \phi
\justifies
\sq N \wat \bar \phi, N \wat \phi \prov \alpha \tw \phi
\end{prooftree}
\]
Ok, $\bar\phi \le \phi$ is `reflexivity'.

Try to prove $\sq N \to \sq\sq N$.
\[
\begin{prooftree}
\[
\[
\[
\[
\bar\phi \le \phi', \bar\phi' \le \phi'' \prov \bar\phi \le \phi''
\justifies
\sq N \wat \bar\phi,  \bar\phi \le \phi', \bar\phi' \le \phi'',  N\wat\phi'' \prov \#(\phi'')
\]
\justifies
\sq N \wat \bar\phi,  \bar\phi \le \phi' \prov  \sq N \wat \bar{\phi'}
\]
\justifies
\sq N \wat \bar\phi, \ups \sq N \wat \phi', \bar\phi \le \phi' \prov  \#(\phi')
\]
\justifies
\sq N \wat \bar\phi \prov \sq \ups \sq N \wat \bar\phi
\]
\justifies
\sq N \wat \bar\phi, \ups \sq \ups \sq N \wat \phi \prov \#(\phi)
\end{prooftree}
\]
Ok, $\alpha \le \phi, \bar\phi \le \phi' \prov \alpha \le \phi'$ is `transitivity'.
I guess I can see this as a zigzag
\[\alpha \le \phi, \phi \sim \alpha', \alpha' \le \phi' \prov \alpha \le \phi'\]
where $\phi \sim \alpha'$ means $\alpha' = \bar\phi$, but it does seem essential for
the proof of $\sq N \to \sq \sq  N$ that I know $\sim$ is a total relation.

\section{Internal Modal Replacement}

I believe the the following {\bf external} theorem is true, and I'd like to internalize it:
\begin{theorem}
Suppose we have a polarized type $N$ over some free type variables
$n_1, \ldots, n_n$. Suppose we have a polymorphic term $M$ at the
 type  $\all n_1,\ldots,n_n . N$. Then there is a term at the modalized
type where we've replaced all $\dns$ in $N$ with ``for all future worlds''.
\end{theorem}

First let's more clearly state and prove this theorem.
Here's a toy source language with just implication:
\[\begin{tabular}{rcl}
  Negatives $N$&$::=$&$ P \to N \celse n$\\
  Positives $P$&$::=$&$\dns N $\\
\end{tabular}\]
The modal translation is parameterized over a type $W$ of worlds and a reflexive, transitive relation
$\_\le\_ : W \to W \to \rset$ and a world $w$.
We should write $\wat_{W, \le}$ but we'll write bare $\wat$ with the subscripts implicit.
\[   ( P \to N)\wat w = P\wat w \to N \wat w \qquad n \wat w = n(w)\]
\[ (\dns N)\wat w = ( v:W) \to (v \ge w) \to  N\wat v  \]

%% We assume the $n : W \to \rset$ that we map atoms to are monotone, i.e. $u \le v$ implies
%% a function $n(u) \to n(v)$.

Now we try to prove:
\begin{lemma}
For any $\vec u$,
  \begin{itemize}
  \item
    If $\Gamma;\Omega \prov N$, then $(\dns\Gamma)\wat \vec u, \vec u \le w, \Omega \wat w \prov N \wat w$.
  \item
    If $\Gamma;\Omega \prov Q$, then $(\dns\Gamma)\wat \vec u, \vec u \le w , \Omega \wat w \prov Q \wat w$.
  \item
    If $\Gamma \prov [P]$, then $(\dns\Gamma)\wat \vec u, \vec u \le w \prov P \wat w$.
  \item
    If $\Gamma[N] \prov Q$, then $(\dns\Gamma)\wat \vec u, \vec u \le w, N \wat w \prov Q \wat w$.
  \end{itemize}

\end{lemma}

\begin{proof}
By induction on the term derivation.

\begin{itemize}
\item[Case:] {$\dns$L}
 \[ \begin{prooftree}
    \Gamma, N;\Omega \prov  Q
\justifies
    \Gamma;\Omega, \dns N \prov  Q
  \end{prooftree}\]
We reason by cutting in reflexivity of $\le$:
\[
\begin{prooftree}
\[\justifies w\le w\]
\[
i.h.
\justifies
(\dns\Gamma, \dns N)\wat \vec u, \vec u \le w, \Omega \wat w \prov Q \wat w
\]
\justifies
(\dns\Gamma)\wat \vec u, \vec u \le w, \Omega \wat w, \dns N \wat w \prov Q \wat w
\end{prooftree}
\]


\item[Case:] {$\dns$R}
\[ \begin{prooftree}
    \Gamma;\cdot \prov  N
\justifies
    \Gamma\prov[ \dns N ]
  \end{prooftree}\]
By the induction hypothesis, we get
\[\dns\Gamma\wat \vec u, \vec u \le v \prov N \wat v\]
On the other hand the goal requires
\[
\begin{prooftree}
  \dns\Gamma\wat \vec u, \vec u \le w, w \le v \prov  N \wat v
\justifies
  \dns\Gamma\wat \vec u, \vec u \le w \prov (\dns N) \wat w
\end{prooftree}
\]
So we finish the case by cutting in transitivity of $\le$.

\item[Case:] {focus}
\[
\begin{prooftree}
  \Gamma[N] \prov Q
\justifies
 \Gamma,N \prov Q
\end{prooftree}
\]
From our goal we work backwards:
\[
\begin{prooftree}
\[
i.h.
\justifies
  (\dns\Gamma)\wat \vec u, \vec u \le w,  N \wat w \prov Q \wat w
\]
\justifies
  (\dns\Gamma, \dns N)\wat (\vec u, v), \vec u \le w, v \le w\prov Q \wat w
\end{prooftree}
\]

\item[Case:] {$n$L}
\[
\begin{prooftree}
\justifies
\Gamma[n] \prov n
\end{prooftree}
\]
We need to show $(\dns\Gamma)\wat \vec u, \vec u \le w, n(w) \prov n(w)$.
This follows from the identity rule.
\item[Case:] {$\to$L}
We have
\[
\begin{prooftree}
\Gamma \prov [P] \qquad \Gamma[N] \prov Q
\justifies
\Gamma[P\to N] \prov Q
\end{prooftree}
\]
From our goal we work backwards:
\[
\begin{prooftree}
\[
i.h.
\justifies
  (\dns\Gamma)\wat \vec u, \vec u \le w \prov P \wat w
\]
\[
i.h.
\justifies
  (\dns\Gamma)\wat \vec u, \vec u \le w,  N \wat w \prov Q \wat w
\]
\justifies
  (\dns\Gamma)\wat \vec u, \vec u \le w,  (P \to N) \wat w \prov Q \wat w
\end{prooftree}
\]


\item[Case:] {$\to$R}
We have
\[
\begin{prooftree}
\Gamma; \Omega,P\prov N
\justifies
\Gamma; \Omega \prov P \to N
\end{prooftree}
\]
From our goal we work backwards:
\[
\begin{prooftree}
\[
i.h.
\justifies
(\dns\Gamma)\wat \vec u, \vec u \le w, \Omega\wat w, P \wat w \prov  N \wat w
\]
\justifies
(\dns\Gamma)\wat \vec u, \vec u \le w, \Omega\wat w \prov (P \to N) \wat w
\end{prooftree}
\]


\end{itemize}
\cqed
\end{proof}
\section{Stepping Back}

Let me try to state plainly what I hope to be the case: that there is some way
to design a language which allows the programmer to take a expression that is at a type,
and lift it to a type that functions `as if' it was in a presheaf category $\rset^\C$ all along,
for any category $\C$ of their choosing.

I have an instinct to try studying what happens if $\dns$ is translated to a notion
of ``for all future worlds'' modality that explicitly refers to this idea of ``the current category''.

So imagine that propositional atoms are taken to objects that are some suitably coherent notion of
\[(\C : \rcat) (C : \C) \to \rset\]

Following the idea of $\dns$ being translated to a $h(q) \lol$-esque operation, I would translate

\[ (\dns N) \wat (\C, C) = \dns((\D : \rcat)(D : \D)( f : C \to C') \to \]
\[  h(\C \x \D, \langle C', D\rangle)\lol N \wat (\C \x \D, \langle C', D\rangle))\]

So maybe this is really ``all future worlds'' in the category (let's call it:) $\C^\x$ where
\begin{enumerate}
\item an object is a pointed category
\item whenever we have $f : C \to C' \in \C$ and  $D \in \D$, that counts as a morphism
$(f,D) : (\C, C) \to (\C\x\D, (C', D))$.
\end{enumerate}
Composition would presuppose data
\[(f,D) : (\C, C) \to (\C\x\D, (C', D))\]
\[((g \x h),E) : (\C \x \D, (C', D)) \to (\C\x\D\x\E, (C'', D', E))\]
where $g : C' \to C''$ and $h : D \to D'$,
and the composite would be
\[(g \o f,E) : (\C, C) \to (\C\x\D\x\E, (C'', D', E))\]

That thought makes me think that this should be reasonably extrapolatable from a system that fixes
merely a category $\C$ ahead of time, does a simpler object-indexing and modal replacement more like
\[ (\dns N) \wat  C =  \dns (( f : C \to C') \to h(C')\lol N \wat C')\]
and --- here is the crucial thing I don't have an idea yet of how to do --- allows the programmer
more fine-grained control over which object $C$ they're evaluating at.

The simplest nontrivial example I can think of is the arrow category $\btwo = \bu \to \bu$.
Are there any examples I can think of of the following form?
\begin{itemize}
\item A source-language type $A$.
\item A target-language term $M : (C : \btwo) \to (A\wat C)$, where $A \wat C$ means replacing all of the
$\dns$ in $A$ with ``for all future worlds in $\btwo$''.
\item $\ldots$ such that $M$ is {\em not} in the image of the evident translation of  source-language $M_0 : A$.
\item $\ldots$ such that there's some plausible additional source-language programming primitive that, if I had it,
would make $M$ in the image of some source-language term after all
\end{itemize}
I think with some weird irony asking for terms not in the image of this translation feels like asking specifically for `non-parametric' terms. Is this `Parametricity via non-parametricity'?

I specifically want to think in terms of the programmer deliberately choosing, given a function,
to use that function at a more future world on purpose. This seems to mean that they want there to be a uniform
way of selecting a future world that works regardless of what the current world is. This is a piece
of good fortune that {\em does} obtain in the category $\C^\x$ above.

\subsection{Transitivity}

I think there's a relationship between the fact that $\dns\ups\dns = \dns$ and $\all y \ge x. \all z \ge y = \all y \ge x$, and the ability to ``peel off'' a quantifier and choose its instantiation.

But how equivalent are two quantifiers to one in the presence of proof-relevance? Not clear.
\section{Focused Topological Semantics}
\subsection{The Syntax}
Take focused intuitionistic propositional logic.
\subsection{The Semantics}
Suppose $X^+$ and $X^-$ are topological spaces, and some relations on them
\[\tw : X^+ \to X^- \to \rset\]
\[\_ \otimes\_ = \_ : X^+ \to X^+ \to X^+   \to \rset\]
\[\_ \lol\_ = \_ : X^+ \to X^- \to X^-   \to \rset\]
Suppose we have valuations $\eta^+$ and $\eta^-$ that take positive and negative atoms to open
subsets of $X^+$ and $X^-$. Then we can interpret the reset of polarized propositional logic like so.
We take positive props to open subsets of $X^+$.
We take negative props to open subsets of $X^-$.
\[ \sem {P \otimes P} \ni \alpha = \exists \alpha_1,\alpha_2 . (\alpha_1 \otimes \alpha_2 = \alpha) \land \sem P \ni \alpha_1 \land \sem P\ni \alpha_2\]
\[\sem {P \lol N} \ni \phi =  \exists \alpha_1,\phi_2 .(\alpha_1 \lol \phi_2 = \phi) \land \sem P \ni \alpha_1 \land \sem N\ni \phi_2\]
Now why do these result in open sets? I suppose I need to postulate that $\otimes$ is like
a `continuous multivalued function $X^+ \to X^+ \x X^+$' in the sense that taking the image
of an open subset of $X^+ \x X^+$ yields an open subset of $X^+$.
Similarly for $\lol$.

Additives are easy:
\[ \sem {P \oplus P} \ni \alpha = \sem P \ni \alpha \lor \sem P \ni \alpha\]
\[ \sem {N \amp N} \ni \alpha = \sem N \ni \alpha \lor \sem N \ni \alpha\]
The arbitrary union of open  sets is open. Now for shifts.
\[\sem {\ups P} \ni \phi = \all \alpha. \sem P \ni \alpha \to \alpha \tw \phi\]
\[\sem {\dns N} \ni \alpha = \all \phi. \sem N \ni \phi \to \alpha \tw \phi\]
Huh, so maybe here I can say it's a special property of $\tw$ that these always yield open sets.

\subsection{The Syntactic Model}
\begin{itemize}
\item the points of $X^+$ are stable substructural contexts $\Gamma$.
\item the points of $X^-$ are stable substructural frames $\Gamma'\prov Q$.
\item the relation $\tw$ is given by provability after concatenation
\item the relation $\otimes$ is given by equality after concatenation
\item the relation $\lol$ is given by equality after concatenation
\item the basic opens of $X^+$ are given by positive props: $U_P = \{ \Gamma \st \Gamma\prov[P]\}$
\item the basic opens of $X^-$ are given by positive props: $U_N = \{ \Gamma,Q \st \Gamma[N]\prov Q\}$
\item we provide the valuation $\sem p = U_p = \{ \Gamma \st p \in \Gamma \}$
\item we provide the valuation $\sem n = U_n = \{ \Gamma,Q \st Q = n \}$
\end{itemize}

We now aim to show $\sem P = U_P$ and $\sem N = U_N$ generally.
\begin{itemize}
\item[Case:]
\[\sem {\dns N} \ni \alpha = \all \phi. \sem N \ni \phi \to \alpha \tw \phi\]
yields the goal
\[\Gamma \prov [\dns N] \ \iff\  \all (\Gamma', Q). (\Gamma' [N] \prov Q) \to \Gamma,\Gamma' \prov Q\]
or equivalently
\[\Gamma \prov  N \ \iff\  \all (\Gamma', Q). (\Gamma' [N] \prov Q) \to \Gamma,\Gamma' \prov Q\]
and I think this is essentially the cut and identity principles. The identity version is a bit trickier.
To get from right to left we instantiate $\Gamma', Q$ to that which $N$ asynchronously expands to.
In that case, $\Gamma'[N] \prov Q$ by essentially the identity theorem.
Therefore we obtain $\Gamma, \Gamma' \prov Q$, and we reconstruct $\Gamma \prov N$ by asynchronous rules.
\item[Case:]
\[\sem {\ups P} \ni \phi = \all \alpha. \sem P \ni \alpha \to \alpha \tw \phi\]
yields the goal
\[ \Gamma[\ups P] \prov Q\ \iff\ \all \Gamma'. (\Gamma' \prov [P]) \to \Gamma, \Gamma' \prov Q\]
or equivalently
\[ \Gamma; P \prov Q\ \iff\ \all \Gamma'. (\Gamma' \prov [P]) \to \Gamma, \Gamma' \prov Q\]
Similarly this is cut and identity.
\item[Case:]
\[ \sem {P \oplus P} \ni \alpha = \sem P \ni \alpha \lor \sem P \ni \alpha\]
yields the goal
\[ U_{P \oplus P}  = U_P \cup U_P\]
which holds by inspection of the focused $\oplus R$ rule.
\item[Case:]
\[ \sem {P \otimes P} \ni \alpha = \exists \alpha_1,\alpha_2 . (\alpha_1 \otimes \alpha_2 = \alpha) \land \sem P \ni \alpha_1 \land \sem P\ni \alpha_2\]
yields the goal
\[ \Gamma \prov [P \otimes P] \ \iff\  \exists \Gamma_1,\Gamma_2 . (\Gamma_1,\Gamma_2 = \Gamma) \land \Gamma_1 \prov [P] \land  \Gamma_2 \prov [P]\]
which holds by inspection of the focused $\otimes R$ rule.
\item[Case:]
\[\sem {P \lol N} \ni \phi =  \exists \alpha_1,\phi_2 .(\alpha_1 \lol \phi_2 = \phi) \land \sem P \ni \alpha_1 \land \sem N\ni \phi_2\]
yields the goal
\[\Gamma[P \lol N] \prov Q \ \iff\   \exists \Gamma_1,\Gamma_2 .(\Gamma_1,\Gamma_2 = \Gamma) \land \Gamma_1\prov[ P] \land \Gamma_2[N] \prov Q\]
which holds by inspection of the focused $\lol L$ rule.

\end{itemize}
\end{document}
