\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{stmaryrd}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\tcbuselibrary{breakable}

\def\pbind#1{\langle \! \langle #1 \rangle \! \rangle}
\def\embu{\mathsf{embu}}
\def\coglue{\mathsf{coglue}}
\def\el#1{\textcolor{bluegray}{\texttt{[}}{#1}\textcolor{bluegray}{\texttt{]}}}
\def\quote#1{{\ulcorner {#1} \urcorner}}
\def\U{\mathsf{U}}
\def\fA{\mathsf{A}}
\def\fC{\mathsf{C}}
\def\ff{\mathsf{f}}
\def\B{\mathsf{B}}
\def\uni{\U}
\def\mor#1#2{#1 \to \underline{#2}}

\def\ridp{\mathsf{idp}}
\def\ssem#1{\langle\!\langle{#1}\rangle\!\rangle}

\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{orange}{rgb}{0.95,0.90,0.80}
\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{bluegray}{rgb}{0.4,0.4,0.8}
\definecolor{lgray}{gray}{0.9}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=orange,colback=orange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}

\def\wat{\mathbin{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\N{{\mathbb N}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\rr{{\mathsf r}}
\def\ii{{\mathbb I}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{{\mathsf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\S{\mathbf{S}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\tri{\triangleright}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\null{\emptyset}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}

\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}

\def\tensor{\otimes}
\def\lol{\multimap}

\def\wtf{{\color{red}???}}

\def\zero{\texttt{0}}

\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
% got this from
% https://tex.stackexchange.com/questions/169512/tikz-style-arrow-tips-missing-when-using-tikz-cd-crossing-over
% ???

\section{Return to Syntax}

\subsection{Setting up the Problem}
An {\em $n$-span} is a record with
\def\rspan{\mathsf{Span}}
\begin{tabbing}
\hspace*{2em}\=\hspace*{2em}\= \kill
\> $\fC : \rset$\\
\> $\fA : n \to \rset$\\
\> $\ff : (k : n) \to \fC \to \fA\ k$
\end{tabbing}

We want the canonical map taking a path in the universe to a span
\begin{tabbing}
\hspace*{2em}\=$\ \ff\ k\ c $ \= \kill
$\embu : (p : \sharp n \to \rset) \to \rspan_n $  \\
$\embu\ p = $  \\
\> $\langle \fC $\>$ = ( i : \sharp n) \to  p\ i$\\
\> $\ \fA\ k $\>$ = p\ \underline k$\\
\> $\ \ff\ k\ c $\>$ = c\ \underline k\rangle$
\end{tabbing}
to have an inverse.
So there should be some type
\[
\erule
{S : \rspan_n \qquad i : \sharp n}
{S\star i}
\]
Such that $S : \rspan_n \prov S \equiv \embu(\lambda i . S \star i)$ i.e.
\begin{tabbing}
\hspace*{2em}\=$\ f\ k\ c $ \= \kill
$S : \rspan_n \prov \textcolor{red}{R_1} : S \equiv$\\
\> $\langle \fC $\>$ = ( i : \sharp n) \to  S\star i$\\
\> $\ \fA\ k $\>$ = S\star \underline k$\\
\> $\ \ff\ k\ c $\>$ = c\ \underline k\rangle$
\end{tabbing}
and $p : \sharp n \to \rset \prov p \equiv \lambda i . (\embu\ p)\star i$, i.e.
\begin{tabbing}
\hspace*{2em}\=$\ f\ k\ c $ \= \kill
$p : \sharp n \to \rset, i  :\sharp n \prov \textcolor{red}{R_2} : p\ i \equiv $\\
\> $\langle \fC $\>$ = ( i : \sharp n) \to  p\ i$\\
\> $\ \fA\ k $\>$ = p\ \underline k$\\
\> $\ \ff\ k\ c $\>$ = c\ \underline k\rangle \star i$
\end{tabbing}

\subsection{Naive Attempt \#1}
What happens if we set
\[\langle \fC, \fA, \ff\rangle \star i := (p : \sharp n \to \rset)(\theta : p\ i)(g : ((j : \sharp n) \to p\ j) \to \fC) \x \]
\[(e : (k : n) \to p\ \underline k \to \fA_k) \x (\pi : (k : n) \to \ff_k g \equiv e_k (\lambda t . t\ \underline k))\]
\[
\begin{tikzcd}
  \forall j . p\ j \ar[r, "g"]\ar[d, "\lambda t.t\ \underline k"'] & \fC\ar[d, "\ff_k"]\\
p\ \underline k \ar[r, "e_k"']& \fA_k
\end{tikzcd}
\]

Then we can build a function
\begin{tabbing}
\hspace*{2em}\=$\ f\ k\ c $ \= \kill
$q : \sharp n \to \rset, i  :\sharp n \prov q\ i \to $\\
\> $\langle \fC $\>$ = ( i : \sharp n) \to  q\ i$\\
\> $\ \fA\ k $\>$ = q\ \underline k$\\
\> $\ \ff\ k\ c $\>$ = c\ \underline k\rangle \star i$
\end{tabbing}
because in that case the codomain type is
\[ T := (p : \sharp n \to \rset)(\theta : p\ i)(g : \forall p \to \forall q) \x \]
\[(e : (k : n) \to p\ \underline k \to q\ \underline k) \x (\pi : (k : n) \to (\lambda t . t\ \underline k) g \equiv e_k (\lambda t . t\ \underline k))\]
\[
\begin{tikzcd}
  \forall   p \ar[r, "g"]\ar[d, "\lambda t.t\ \underline k"'] & \forall   q\ar[d, "\lambda t.t\ \underline k"]\\
p\ \underline k \ar[r, "e_k"']& q\ \underline k
\end{tikzcd}
\]

and we can implement that as
\[\mathsf{into} : \{q : \sharp n \to \rset\} \{i : \sharp n\} \to q\ i \to T\]
\[\mathsf{into}\ \theta = \langle p = q, \theta = \theta, g = \rid, e = \lambda k . \rid, \pi = \lambda k . \ridp\rangle \]

Can I get out of it, though? Seems like maybe not. I write down
\[\mathsf{out} : \{q : \sharp n \to \rset\} \{i : \sharp n\} \to T \to q\ i \]
\[\mathsf{out}\ \langle p, \theta, g, e, \pi\rangle = {?}\]
and what I want to do is call $e_i(\theta)$, but that's no good; $i$
isn't necessarily an endpoint. I really would like to write something like
\[\mathsf{out}\ \langle p, \theta, g, e, \pi\rangle = \blet \underline k = i
\bin e_k(\theta)\]
Checking $\mathsf{out} \o \mathsf{into} = \rid$ seems fairly straightforward, since
$e_k$ ends up being $\rid$ and we just need an extremely reasonable
 $\eta$-like principle to say that $(\blet \underline k = i \bin \theta) \equiv \theta$ when $k$ doesn't occur in $\theta$. What about checking that

\[\langle p = q, \theta = \blet \underline k = i \bin e_k(\theta), g = \rid, e = \lambda k . \rid, \pi = \lambda k . \ridp\rangle \equiv \]
\[\langle p = p, \theta = \theta, g = g, e = e, \pi = \pi . \ridp\rangle  \]
In other words $\mathsf{into} \o \mathsf{out} = \rid$? I don't even know how to get
started showing that $p \equiv q$, because although I have $g : \forall p \to \forall q$, I
 really need $\forall i . p\ i \equiv q\ i$ which is stronger both in the
sense of promoting function to equivalence, and also in the larger
scope of the $\forall i$!

\subsection{Note}

If I know $R_2$, and I have that
\[
\erule
{i : \sharp n \prov S_1 \star i \equiv S_2 \star i}
{ \prov S_1 \equiv S_2 }
\]
then I can derive $R_1$ by substituting $p = \lambda i . S \star i$
and applying the above principle. So I probably expect something like
\[
\erule
{i : \sharp n \prov S_1 \star i \to S_2 \star i}
{ \prov S_1 \to S_2 }
\]
to hold as well? For a suitable notion of morphisms between $n$-spans of course.
This is a sort of converse to the principle that I put in $\texttt{sketch}$
\end{document}
