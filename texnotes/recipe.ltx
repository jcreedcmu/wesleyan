\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}

\input{linear}
\def\rM{{\mathsf M}}
\def\ups{{\uparrow}}
\def\dns{{\downarrow}}
\def\rseq{\mathsf{seq}}
\def\sprov{\Vdash}
\def\uprov{\mathrel{\color{opfib}\vdash}}
\def\uprovc{\mathrel{\color{opfib}\vdash_c}}
\def\signat{{
\color{red}
\Sigma}}
\def\div{\vskip 1em \hrule \vskip 1em}
\def\wat{\mathbin{@}}
\def\cn{{:}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}
\def\tt{{\mathsf t}}
\def\rr{{\mathsf r}}
\def\ff{{\mathsf f}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rset{\mathbf{Set}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rok{\mathrel\mathsf{ok}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}
\def\N{\mathbb{N}}
\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\o{\comp}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\tri{\triangleright}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\del{\partial}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\null{\emptyset}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{purple}{HTML}{af3faf}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}

\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\definecolor{block-gray}{gray}{0.85}
\definecolor{lgray}{gray}{0.7}
\newtcolorbox{myquote}{colback=block-gray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}


\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\title{Notes on the Logic of Convex Combination}
\begin{document}

\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
% got this from
% https://tex.stackexchange.com/questions/169512/tikz-style-arrow-tips-missing-when-using-tikz-cd-crossing-over
% ???

\bibliographystyle{alpha}
\section{Introduction}
I want to reconcile the ideas in \cite{fibsub} with the idea of merely
{\em compiling away} substructurality/modality into a plain vanilla type theory.
My hope is that if I do this the right way, it will have the following advantages:
\begin{enumerate}
\item The logical connectives $F$ and $U$ will appear as aspects of a single multiplicative connective.
\item The dependent generalization of it will be more naturally evident.
\end{enumerate}

\section{The Lower Theory}
We assume that we're handed a type theory that looks something like the following:
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Contexts&$\Gamma$&$\cdot  \mathrel{\color{lgray} \celse} {\color{lgray}\Gamma, x : A}
\celse \Gamma, \alpha : K$\\
Substitutions&$\theta$&$\cdot \mathrel{\color{lgray} \celse} {\color{lgray} \theta[M/x]}\celse \theta[A/\alpha]$\\
Base Kinds&$\kappa$&$ \cdots$\\
Kinds&$K$&$  \Gamma \to \kappa$\\
Types&$A$&$\alpha[\theta]$\\
\color{lgray}Terms&\color{lgray}$M$&\color{lgray}$x$\\
Conjugations&&$c$\\
\end{tabular}
\]

Our freedom in customizing the lower theory comes in four parts.
\begin{enumerate}
\item We can declare kinds like
$$(\sprov \kappa : \rkind) \in \signat$$
and declare types and type formers like
$$(\sprov \alpha : K) \in \signat$$
For example, to get the multiplicative connectives of linear logic, I say:
$$(\sprov \rr, \ff : \rkind) \in \signat$$
$$(\sprov {1} : \cdot \to \rr) \in \signat$$
$$(\sprov {\tensor} : (\alpha : \rr, \beta : \rr) \to \rr) \in \signat$$
$$(\sprov {\lol} : (\alpha : \rr, \phi : \ff) \to \ff) \in \signat$$
%
\item We get to specify a theory of the judgment
$$\Gamma \prov A \le B : K$$
Which I think off the top of my head has to be reflexive and
transitive and support weakening and contraction. Maybe more stuff, it
remains to be seen what I need. Write $\equiv$ when $\le$ and $\ge$ hold.
For linear logic we have
$$\alpha, \beta : \rr \sprov (\alpha \tensor \beta) \equiv (\beta \tensor \alpha)$$
and the like.
%
\item We get to decide that some pairs of kinds $\kappa_1, \kappa_2$ are {\em
  conjugate}, written $c : \kappa_1 \sim \kappa_2$. We assume that there is an involution
on conjugations, so that
$c^\dagger : \kappa_2 \sim \kappa_1$ and $c^{\dagger \dagger}$ is the same as $c$.

From this choice is determined which {\em internal sequents} exist.
$$
\erule
{\Gamma \prov A_1 : \kappa_1 \qquad \Gamma \prov A_2 : \kappa_2 \qquad c : \kappa_1 \sim \kappa_2}
{\Gamma \prov (A_1 \tri_c A_2) : \rseq}
$$
For linear logic, we'd have
$$(\sprov c : \rr \sim \ff) \in \signat$$
We'll drop various subscripts $c$ in the sequel
when they're evident from context.
%
\item We get to decide a theory of the judgment
$$\Gamma \prov (A \tri_c B) \le (A' \tri_c B') : \rseq_c$$
which I think needs to be similarly reflexive, transitive, weakenable, and contractible,
and also be monotone/antitone in the sense of
$$
\erule
{\Gamma \prov A' \le A : \kappa_1 \qquad \Gamma \prov B \le B' : \kappa_2 }
{\Gamma \prov (A \tri B) \le (A' \tri B') : \rseq}
$$
We probably also need to demand that $A \tri_c B$ and $B \tri_{c^\dagger} A$ denote
exactly the same thing.

For linear logic, we'd have
$$(\alpha: \rr, \beta : \rr, \phi: \ff \sprov ((\alpha \tensor \beta) \tri \phi) \equiv
(\alpha \tri (\beta \lol \phi))) \in \signat$$
\end{enumerate}

\section{The Upper Theory}
The language of the upper theory gets to reuse lots of stuff from downstairs.
The main difference is that we get {\em shifts} in the type language.
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Substitutions&$\bar \theta$&$\cdot\celse \bar \theta[\bar A/\alpha]$\\
Types&$\bar A$&$ \alpha[\bar \theta] \celse \ups_c \bar A$\\
\end{tabular}
\]


$$
\erule
{\Gamma \prov \bar A : \kappa_1 \qquad c : \kappa_1 \sim \kappa_2}
{\Gamma \prov \ups_c \bar A : \kappa_2}
$$

In linear logic with $c : \rr \sim \ff$, we have
 $\ups_c = \ups$ and $\ups_{c^\dagger} = \dns$.
We can write $\dns_c$ for $\ups_{c^\dagger}$.

In this language we can {\em pose} provability questions like:
\[
\erule
{\Gamma \prov \bar A_1 : \kappa_1 \qquad \Gamma \prov \bar A_2 : \kappa_2 \qquad
c : \kappa_1 \sim \kappa_2}
{\Gamma / \bar A_1 \uprovc \bar A_2}
\]
For example, in linear logic, we might ask if it's the case that
$$\alpha : \rr, \phi : \ff /\  \alpha \tensor \dns \phi \uprov \alpha \lol \phi$$
which desugars to
$$\alpha : \rr, \phi : \ff /\  ({\tensor})[\alpha, \dns \phi] \uprov ({\lol}) [\alpha, \phi]$$
In the following section we will define the content of such questions by
translation.
\section{The Representation}

We turn $\Gamma / \bar A_1 \uprov \bar A_2$ into the term query

\[\Gamma, \alpha : \kappa_1 ,x : (\bar A_1 \wat \alpha)\prov  {\color{red}?} :  ((\dns_{c}\bar A_2) \wat \alpha ) \]

where the translation $\wat$ has the contract
$$
\erule
{ \prov \bar A : K \qquad  \prov \alpha : K}
{ \prov \bar A \wat \alpha : \rtype}
$$
and clauses like


$$\erule{\alpha : \Gamma \to \kappa \in \signat \qquad  \prov A : \kappa
\qquad  \prov \bar \theta : \Gamma}
{\alpha[\bar\theta] \wat A
  :=  \exists \Gamma . (\bar\theta \wat \Gamma) \land (\alpha[\Gamma] \le A)}$$


$$\erule{\prov \bar A : \kappa_1\qquad  \prov B : \kappa_2
\qquad  \prov  c : \kappa_1 \sim \kappa_2}
{(\ups_c \bar A) \wat B
  := \forall \alpha \cn \kappa_1 . (\bar A \wat \alpha) \imp (\alpha \tri_c B)}$$

Speculatively, it seems like I can generalize these to

$$\erule{\alpha : \Gamma \to \kappa_1 \in \signat \qquad \prov \bar \theta : \Gamma \qquad  \prov A : \kappa_2
\qquad  \prov  c : \kappa_1 \sim \kappa_2}
{(\ups^\alpha_c \bar\theta) \wat A
  := \forall \Gamma  . (\bar\theta \wat \Gamma) \imp (\alpha[\Gamma] \tri_c A)}$$
$$\erule{\alpha : \Gamma \to \kappa_1 \in \signat \qquad \prov \bar \theta : \Gamma \qquad  \prov A : \kappa_2
\qquad  \prov  c : \kappa_1 \sim \kappa_2}
{(\rM^\alpha_c \bar\theta) \wat A
  := \exists \Gamma  . (\bar\theta \wat \Gamma) \land (\alpha[\Gamma] \tri_c A)}$$
Assuming a reflexivity conjugation exists such that $A \le B$ is somehow
the same as $A \tri_{\mathrm{refl}} B$. And then the antitone/monotoneness of $\tri$
pops out of functoriality or something?

What are the rules for these connectives? I think something like
$$
\erule
{\alpha : \Gamma \to \kappa_1 \in \signat \qquad
 \prov \bar \theta : \Gamma \qquad c : \kappa_1 \sim \kappa_2}
{ \prov \ups^\alpha_c \bar \theta : \kappa_2}
$$
$$
\erule
{\alpha : \Gamma \to \kappa_1 \in \signat \qquad
 \prov \bar \theta : \Gamma \qquad c : \kappa_1 \sim \kappa_2}
{\Gamma \prov \rM^\alpha_c \bar \theta : \kappa_2}
$$
Hmmm in a certain sense, I think $\ups^\alpha_c$ is the only {\em real} connective.
$\rM^\alpha_c$ is useful for defining intermediate steps or something.

Or at least, if I generalize a slight bit further and I let $\alpha$
be any appropriately kinded expression in the lower theory, not just
a constant type family from the signature:
$$
\erule
{\Gamma \prov \alpha : \kappa \qquad \prov \bar \theta : \Gamma \qquad c : \kappa \sim \kappa'}
{\Gamma \prov \ups^\alpha_c\bar\theta : \kappa'}
$$
$$
\erule
{\Gamma \prov \alpha : \kappa \qquad \prov \bar \theta : \Gamma \qquad c : \kappa \sim \kappa'}
{\Gamma \prov \rM^\alpha_c\bar\theta : \kappa'}
$$
Then I think I could claim that if I have a
$\ups^{\alpha_1}_{c_1} \bar\theta_1$ with $\theta_1(x) = \rM^{\alpha_2}_{c_2}\bar \theta_2$,
where the types of the other things are
\[\Gamma_1 \prov \alpha_1 : \kappa_1 \qquad \prov \bar \theta_1 : \Gamma_1 \qquad c_1 : \kappa_1 \sim \kappa_1'\]
\[\Gamma_2 \prov \alpha_2 : \kappa_2 \qquad \prov \bar \theta_2 : \Gamma_2 \qquad c_2 : \kappa_2 \sim \kappa_2'\]
\[x : \kappa_2' \in \Gamma_1\]
Then I could set
\[\Gamma = (\Gamma_1 / x) \cup \Gamma_2\]
\[\color{red}\alpha = [\alpha_2 / x]\alpha_1\]
No already that doesn't typecheck. Hmm.

\subsection{Retracting that Hypothesis For Now}
Let's just stare at
$$\erule{\alpha : \Gamma \to \kappa \in \signat \qquad  \prov A : \kappa
\qquad  \prov \bar \theta : \Gamma}
{\alpha[\bar\theta] \wat A
  :=  \exists \Gamma . (\bar\theta \wat \Gamma) \land (\alpha[\Gamma] \le A)}$$
and correct the problem that I think exists with scope.

In linear logic, I could have a context of type variables
$\Gamma = (\alpha : \rr, \beta : \rr)$ and want to form
the type $\alpha \tensor \beta : \rr$. The local context of $\alpha \in \signat$
is conceptually distinct from this. I actually want to say something more like
$$\erule{\alpha : \Delta \to \kappa \in \signat \qquad  \Gamma \prov A : \kappa
\qquad  \Gamma \prov \bar \theta : \Delta}
{\alpha[\bar\theta] \wat A
  :=  \exists \Delta . (\bar\theta \wat \Delta) \land (\alpha[\Delta] \le A)}$$
or if I want to allow arbitrary low-theory expressions,
$$\erule{ \Delta \prov B :  \kappa  \qquad  \Gamma \prov A : \kappa
\qquad  \Gamma \prov \bar \theta : \Delta}
{B[\bar\theta] \wat A
  :=  \exists \Delta . (\bar\theta \wat \Delta) \land (B \le A)}$$
I guess there's a kind of mutual weakening that goes on in $B \le A$;
$B$ is weakened up to $\Gamma$, and $A$ up to $\Delta$.

\bibliography{../wes}
\end{document}
