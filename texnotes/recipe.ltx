\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}

\input{linear}
\def\conj{\rightsquigarrow}
\def\rM{{\mathsf M}}
\def\ups{{\uparrow}}
\def\dns{{\downarrow}}
\def\rseq{\mathsf{seq}}
\def\rtrue{\mathrel\mathsf{true}}
\def\sprov{\Vdash}
\def\uprov{\mathrel{\color{opfib}\vdash}}
\def\uprovc{\mathrel{\color{opfib}\vdash_c}}
\def\signat{{
\color{red}
\Sigma}}
\def\div{\vskip 1em \hrule \vskip 1em}
\def\wat{\mathbin{@}}
\def\cn{{:}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}
\def\tt{{\mathsf t}}
\def\rr{{\mathsf r}}
\def\ff{{\mathsf f}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rset{\mathbf{Set}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rok{\mathrel\mathsf{ok}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}
\def\N{\mathbb{N}}
\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\o{\comp}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\P{\mathbf{P}}
\def\N{\mathbf{N}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\tri{\triangleright}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\del{\partial}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\null{\emptyset}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{purple}{HTML}{af3faf}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}

\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\definecolor{block-gray}{gray}{0.85}
\definecolor{lgray}{gray}{0.7}
\newtcolorbox{myquote}{colback=block-gray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}


\def\judge#1{\[\njudge{$#1$}\]}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\title{Notes on the Logic of Convex Combination}
\begin{document}

\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
% got this from
% https://tex.stackexchange.com/questions/169512/tikz-style-arrow-tips-missing-when-using-tikz-cd-crossing-over
% ???

\bibliographystyle{alpha}
\section{Introduction}
I want to reconcile the ideas in \cite{fibsub} with the idea of merely
{\em compiling away} substructurality/modality into a plain vanilla type theory.
My hope is that if I do this the right way, it will have the following advantages:
\begin{enumerate}
\item The logical connectives $F$ and $U$ will appear as aspects of a single multiplicative connective.
\item The dependent generalization of it will be more naturally evident.
\end{enumerate}

\section{The Lower Theory}
We assume that we're handed a type theory that looks something like the following:
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Contexts&$\Gamma$&$\cdot
\celse \Gamma, \alpha : K$\\
Substitutions&$\theta$&$\cdot \celse \theta[A/\alpha]$\\
Base Kinds&$\kappa$&$ \cdots$\\
Kinds&$K$&$  \Gamma \to \kappa$\\
Types&$A$&$\alpha[\theta]$\\
Morphisms&&$c$\\
\end{tabular}
\]

Our freedom in customizing the lower theory comes in several forms:
\begin{enumerate}
\item We can declare kinds like
$$(\sprov \kappa : \rkind) \in \signat$$
and declare types and type formers like
$$(\sprov \alpha : K) \in \signat$$
For example, to get the multiplicative connectives of linear logic, I say:
$$(\sprov \rr, \ff : \rkind) \in \signat$$
$$(\sprov {1} : \cdot \to \rr) \in \signat$$
$$(\sprov {\tensor} : (\alpha : \rr, \beta : \rr) \to \rr) \in \signat$$
$$(\sprov {\lol} : (\alpha : \rr, \phi : \ff) \to \ff) \in \signat$$
%
\item We get to a category structure on the base kinds, whose morphisms
we call {\em conjugations} $c : \kappa_1 \conj \kappa_2$.
From this choice it is determined which {\em internal sequents} exist.
$$
\erule
{\Gamma \prov A_1 : \kappa_1 \qquad \Gamma \prov A_2 : \kappa_2 \qquad
\sprov c : \kappa_1 \conj \kappa_2}
{\Gamma \prov (A_1 \tri_c A_2) : \rseq_c}
$$
An internal sequent is just a data structure; a pair of types whose kinds are connected by a chosen conjugation.
For linear logic, we have
$$(\sprov c : \rr \conj \ff) \in \signat$$
and identity morphisms at $\rr$ and $\ff$.
We'll drop various subscripts $c$ in the sequel
when they're evident from context.
%
\item We get to decide a theory of the judgment of which internal sequents actually {\em hold}.
We write $A \le_c B$ to indicate that the sequent $A \tri_c B$ holds.
We write $\Gamma \prov A \le B : \kappa$ to mean the same thing as $\Gamma \prov A \le_{\rid_\kappa} B$.
For linear logic we'd have
$$(\alpha, \beta : \rr \sprov (\alpha \tensor \beta) \equiv (\beta \tensor \alpha) : \rr) \in \signat$$
and the like,
where $A \equiv B$ means that both $A \le B : \kappa$ and $B \le A : \kappa$.

Probably generally we have reflexivity, transitivity, weakening (in $\Gamma$), contraction (in $\Gamma$).

\item We get to decide a theory of the judgment
$$\Gamma \prov (A \tri_c B) \le (A' \tri_c B') : \rseq_c$$
which probably needs to satisfy some composition laws with respect to $\le$ on types
at the same kind, e.g.
$$
\erule
{\Gamma \prov A' \le A : \kappa_1  \qquad \Gamma \prov B \le B' : \kappa_2 }
{\Gamma \prov (A \tri B) \le (A' \tri B')}
$$
or more generally
$$
\erule
{\Gamma \prov A \le_c B  \qquad \Gamma \prov B \le_{c'} C }
{\Gamma \prov A \le_{c;c'} C}
$$
and I think also
$$
\erule
{\Gamma \prov (A \tri_c B) \le (A' \tri_c B')  \qquad \Gamma \prov A' \le_c B' }
{\Gamma \prov A \le_c B}
$$

For linear logic we'd have
$$(\alpha: \rr, \beta : \rr, \phi: \ff \prov  (\alpha \tensor \beta) \tri_c \phi \equiv
\alpha \tri_c (\beta \lol \phi) : \rseq_c) \in \signat$$
\end{enumerate}

\section{The Upper Theory}
The language of the upper theory gets to reuse lots of stuff from downstairs.
The main difference is that we get {\em shifts} in the type language.
\[
\begin{tabular}{rc@{$\quad::=\quad$}l}
Substitutions&$\bar \theta$&$\cdot\celse \bar \theta[\bar A/\alpha]$\\
Types&$\bar A$&$ \alpha[\bar \theta] \celse \ups_c \bar A \celse \dns_c \bar A$\\
\end{tabular}
\]


$$
\erule
{\Gamma \prov \bar A : \kappa_1 \qquad c : \kappa_1 \conj \kappa_2}
{\Gamma \prov \ups_c \bar A : \kappa_2}
\qquad
\erule
{\Gamma \prov \bar A : \kappa_2 \qquad c : \kappa_1 \conj \kappa_2}
{\Gamma \prov \dns_c \bar A : \kappa_1}
$$


In this language we can {\em pose} provability questions like:
\[
\erule
{\Gamma \prov \bar A_1 : \kappa_1 \qquad \Gamma \prov \bar A_2 : \kappa_2 \qquad
c : \kappa_1 \conj \kappa_2}
{\Gamma / \bar A_1 \uprovc \bar A_2}
\]
For example, in linear logic, we might ask if it's the case that
$$\alpha : \rr, \phi : \ff /\  \alpha \tensor \dns \phi \uprov \alpha \lol \phi$$
which desugars to
$$\alpha : \rr, \phi : \ff /\  ({\tensor})[\alpha, \dns \phi] \uprov ({\lol}) [\alpha, \phi]$$
In the following section we will define the content of such questions by
translation.
\section{The Representation}

We turn $\Gamma / \bar A_1 \uprov \bar A_2$ into the term query

\[\Gamma, \alpha : \kappa_1 ,x : (\bar A_1 \wat \alpha)\prov  {\color{red}?} :  ((\dns_{c}\bar A_2) \wat \alpha ) \]

where the translation $\wat$ has the contract
$$
\erule
{ \prov \bar A : K \qquad  \prov \alpha : K}
{ \prov \bar A \wat \alpha : \rtype}
$$
and clauses like


$$\erule{\alpha : \Delta \to \kappa \in \signat \qquad  \Gamma\prov A : \kappa
\qquad  \Gamma \prov \bar \theta : \Delta}
{\alpha[\bar\theta] \wat A
  :=  \exists \Delta . (\bar\theta \wat \Delta) \land (\alpha[\Delta] \le_{\rid_\kappa} A)}$$


$$\erule{\Gamma \prov \bar A : \kappa_1\qquad  \Gamma \prov B : \kappa_2
\qquad  \prov  c : \kappa_1 \conj \kappa_2}
{(\ups_c \bar A) \wat B
  := \forall \alpha \cn \kappa_1 . (\bar A \wat \alpha) \imp (\alpha \le_c B)}$$

$$\erule{\prov \bar A : \kappa_2\qquad  \prov B : \kappa_1
\qquad  \prov  c : \kappa_1 \conj \kappa_2}
{(\dns_c \bar A) \wat B
  := \forall \alpha \cn \kappa_2. (\bar A \wat \alpha) \imp (B \le_c \alpha)}$$


\div \div \div

The most general form I can think of is: suppose I have some kind of relation
$R(\alpha_1, \alpha_2)$ for $\alpha_1 : \kappa_1$ and $\alpha_2: \kappa_2$ over
the lower theory. I can make positive and negative connectives

$$\erule{\Gamma \prov \bar \theta : \Delta \qquad \Delta \prov A : \kappa_1
\qquad \prov R : \kappa_1 \conj \kappa_2}
{C^\pm(\bar\theta, \Delta,  A, R) : \kappa_2}$$

$$
{C^+(\bar\theta, \Delta,  A, R) \wat B
  :=  \exists \Delta . (\bar\theta \wat \Delta) \land R(A,  B)}$$
$$
{C^-(\bar\theta, \Delta,  A, R) \wat B
  :=  \forall \Delta . (\bar\theta \wat \Delta) \imp R(A, B)}$$

Then $(\bar A \tensor \bar B) $ is
$$C^+([\bar A / \alpha][\bar B / \beta], (\alpha : \rr, \beta : \rr), {\tensor}, \le_{\rid_{\rr}})$$
and $\ups A$ for $\Gamma \prov \bar A : \rr$ is
$$C^-([\bar A / \alpha], (\alpha : \rr), {\alpha}, \le_c)$$
and $\dns A$ for $\Gamma \prov \bar A : \ff$ is
$$C^-([\bar A / \alpha], (\alpha : \ff), {\alpha}, \ge_c)$$


\section{Starting Over with Categorical Semantics}

Suppose I have
\begin{enumerate}
\item a symmetric monoidal category $\P$ and a category $\N$
\item bifunctors $\_\lol\_ : \P \x \N \to \N$ and $\_\tri\_ : \P^\op \x \N^\op \to \rset$
\item a natural isomorphism
$$
\begin{prooftree}
(P_1 \tensor P_2) \tri N
\Justifies
P_1  \tri (P_2 \lol N)
\end{prooftree}
$$
\end{enumerate}

Then I claim there is a bunch of interesting structure on $\hat \P$ and $\hat \N$.
\begin{enumerate}
\item An echo of $\tensor$ at the presheaf level:
\judge{\_\tensor\_ : \hat\P \x \hat\P \to \hat\P}
$$(\hat P \tensor \hat Q)(P : \P) := \int^{\alpha_1,\alpha_2 \cn \P}
 \hat P(\alpha_1) \x \hat Q(\alpha_2) \x \P(P, \alpha_1 \tensor \alpha_2)$$
\item An echo of $\lol$ at the presheaf level:
\judge{\_\lol\_ : \hat\P \x \hat\N \to \hat\N}
$$(\hat P \lol \hat N)(N : \N) := \int^{\alpha\cn \P,\phi \cn \N}
 \hat P(\alpha) \x \hat N(\phi) \x \N(N, \alpha \lol \phi)$$
\item An up-shift:
\judge{\ups : \hat\P \to \hat\N}
$$(\ups \hat P)(N : \N) = \int_{\alpha\cn \P}
 \hat P(\alpha) \imp  (\alpha \tri N)$$
\item A down-shift:
\judge{\dns : \hat\N \to \hat\P}
$$(\dns \hat N)(P : \P) = \int_{\phi\cn \N}
 \hat N(\phi) \imp  (P \tri \phi)$$
\end{enumerate}


\section{Trying a Different Orientation Convention}

Suppose I have
\begin{enumerate}
\item a symmetric monoidal category $\P$ and a category $\N$
\item bifunctors $\_\lol\_ : \P \x \N \to \N$ and $\_\tri\_ : \P \x \N \to \rset$
\item a natural isomorphism
$$
\begin{prooftree}
(P_1 \tensor P_2) \tri N
\Justifies
P_1  \tri (P_2 \lol N)
\end{prooftree}
$$
\end{enumerate}

Then I claim there is a bunch of interesting structure on $\hat \P$ and $\hat \N$,
where $\hat \P = \rset^\P$, contrary to the usual convention.
\begin{enumerate}
\item An echo of $\tensor$ at the presheaf level:
\judge{\_\tensor\_ : \hat\P \x \hat\P \to \hat\P}
$$(\hat P \tensor \hat Q)(P : \P) := \int^{\alpha_1,\alpha_2 \cn \P}
 \hat P(\alpha_1) \x \hat Q(\alpha_2) \x \P(\alpha_1 \tensor \alpha_2, P)$$
\item An echo of $\lol$ at the presheaf level:
\judge{\_\lol\_ : \hat\P \x \hat\N \to \hat\N}
$$(\hat P \lol \hat N)(N : \N) := \int^{\alpha\cn \P,\phi \cn \N}
 \hat P(\alpha) \x \hat N(\phi) \x \N(\alpha \lol \phi, N)$$
\item An up-shift:
\judge{\ups : \hat\P \to \hat\N}
$$(\ups \hat P)(N : \N) = \int_{\alpha\cn \P}
 \hat P(\alpha) \imp  (\alpha \tri N)$$
\item A down-shift:
\judge{\dns : \hat\N \to \hat\P}
$$(\dns \hat N)(P : \P) = \int_{\phi\cn \N}
 \hat N(\phi) \imp  (P \tri \phi)$$
\end{enumerate}
\bibliography{../wes}
\end{document}
