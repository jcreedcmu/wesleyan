\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}

\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\definecolor{block-gray}{gray}{0.85}
\definecolor{lgray}{gray}{0.7}
\newtcolorbox{myquote}{colback=block-gray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\div{\vskip 1em \hrule \vskip 1em}
\def\wat{\mathbin{@}}
\def\cn{{:}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}
\def\P{{\mathbf P}}
\def\N{{\mathbf N}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\rr{{\mathsf r}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
\def\rset{\mathbf{Set}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\o{\comp}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\tri{\triangleright}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\null{\emptyset}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}



\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\def\tensor{\otimes}
\def\htensor{\mathrel{\hat\otimes}}
\def\lol{\multimap}
\def\hlol{\mathrel{\hat\multimap}}
\title{Notes on the Logic of Convex Combination}
\begin{document}

\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
% got this from
% https://tex.stackexchange.com/questions/169512/tikz-style-arrow-tips-missing-when-using-tikz-cd-crossing-over
% ???

\def\rmod{\mathbf{Mod}}
\section{Thinking About Semantics}
Write $\rfam$ for $\rset^\to$.
Fix a set $\alpha^+$ of positive atoms. Putting off thinking about negative atoms for now.
Let $\rmod$ be the category $\rfam \x \rset^{\alpha^+}$, or, to put it another way,
a model consists of a set $W$ of kripke worlds, and a set indexed over that called
 $\#(w)$ for $w\in W$, and a choice of sets $\eta : \alpha^+ \to \rset$ for each of the atoms.

Positive props are interpreted as functors from $\rmod \to \rset$, and negative props
are interpreted as functors $\rmod \to \rfam$ such that
\[\begin{tikzcd}
\rmod \ar[dr, "W"']\ar[rr, "\sem N"]&& \rfam\ar[dl, "\cod"]\\
& \rset
\end{tikzcd}\]

\[\sem{P_1 \tensor P_2}(M) = \sem{P_1}(M) \x \sem{P_2}(M)\]
\[\sem{P_1 \oplus P_2}(M) = \sem{P_1}(M) + \sem{P_2}(M)\]
\[\sem{\dns N}(M) = \Pi w \cn W . \sem {N}(M)(w) \to \#(M)(w)\]
\[\sem{\ups P}(M)(w) = \sem P(M) \to \#(M)(w)\]

These clauses for shifts blatantly violate covariance. What gives?

\subsection{Pondering Intuitionistic Logic}

A model is a pointed krikpe category $\C \in \rcat_*$ and a functor $\eta : \alpha \to \C \to \rset$.
We interpret props as functors $\C$.
\[\sem{A \land B}_{M}(C) = \sem{A}_{M}(C) \x \sem{B}_{M}(C)\]
\[\sem{A \lor B}_{M}(C) = \sem{A}_{M}(C) + \sem{B}_{M}(C)\]
\[\sem{A \lol B}_{M}(C) = \forall(f : C \to D). \sem{A}_{M}(D) \to \sem{B}_{M}(D)\]
\[\sem{a}_{M} = \eta(a)\]

If for every $M$ we have that $\sem {P}_M(*)$ is inhabited,
then $\prov P$ should be true.

This should mean that every prop can
be interpreted as a functor from $\rmod$ to $\rset$, yeah? By taking the distinguished
object of the category? Yeah, given an $M$, I construct the set $\sem{P}_M(*)$.

What's a morphism between models $M = (\C, \eta)$ and $N = (\D, \xi)$? A pointed functor $F : \C \to \D$.
For each $a \in \alpha$, a natural transformation $\phi : \eta(a) \dto \xi(a)\o F$.

So can I construct a function $\sem P_{M}(*_\C) \to \sem P_{N}(*_\D)$?

\subsection{Thinking Relationally}

The category $\rmod$ has objects $(\C, \eta : \alpha \to  \C \to \rrel)$.
A morphism $(\C,\eta) \to (\D, \phi)$ is $F : \C \to \D$ and for each $a\in \alpha$
\[
\begin{tikzcd}
\C \ar[r, "\eta_a"]\twocell{dr}{"\zeta"}\ar[d, "F"'] & \rrel \ar[d, equal]\\
\D \ar[r, "\phi_a"'] & \rrel
\end{tikzcd}
\]
The category $\rprel$ has objects $(\C, X : \C \to \rrel)$. A morphism
$(\C, X) \to (\D, Y)$ is $F : \C \to \D$ and a natural transformation
\[
\begin{tikzcd}
\C \ar[r, "X"]\twocell{dr}{"\xi"}\ar[d, "F"'] & \rrel \ar[d, equal]\\
\D \ar[r, "Y"'] & \rrel
\end{tikzcd}
\]
That is, for each $C\in \C$ we have a relation $\xi_C : X(C) \to Y(FC) \to \rset$.
Let $M = (\C,\eta)$ and $N = (\D, \phi)$ and $f = (F, \zeta) : M \to N \in \rmod$.

Propositions are interpreted as functors $\rmod \to \rprel$ over $\rcat$.
\[\sem{a}_{M} = \eta_a \qquad \sem{a}_{f} = \zeta_a\]

\vfil\eject
\subsection{Thinking Relationally with Mere Sets}
Write $A \sim B$ for the type of relations $A \to B \to \rset$.

The category $\rmod$ has objects
\[M = (W : \rset,  \# : W \to \rset, \eta : \alpha \to  W \to \rrel)\]
A morphism $f : M \to M'$ is
\begin{itemize}
\item $\omega : W \to W'$
\item $s : \Pi w \cn W . \#( w) \sim \#'(\omega w)$
\item $t : \Pi a \cn \alpha . \Pi w \cn W . \eta(a)(w) \sim \eta'(a)(\omega w)$
\end{itemize}
The category $\rrfam$ has objects $\Phi = (W : \rset, h : W \to \rset)$
and morphisms
\begin{itemize}
\item $\omega : W \to W'$
\item $q : \Pi w \cn W. h(w) \sim h'(\omega w)$
\end{itemize}

Positive props interpret as functors $\rmod \to \rrel$.
Negative props interpret as functors $\rmod \to \rrfam$ over $\rset$.
We conflate $\sem N_M$ with its $h$ and $\sem N_f$ with its $q$ for ease of calculation.

\[\sem {\dns N}_M = \forall w . \sem N_M(w) \to \#(w) \]
\[\sem {\ups P}_M = \lambda w .\sem P_M \to \#(w)\]

%% \[\sem {\dns N}_f = \lambda x \cn \sem {\dns N}_M . \lambda x' \cn \sem{\dns N}_{M'}.\]
%% \[\Pi w .\Pi y \cn \sem N_M(w).\Pi y' \cn\sem N_{M'}(\omega w).  \sem N_f(w, y, y')  \to s(w, (x\ w\ y), (x'\ \omega w\ y'))  \]

%% \[\sem {\ups P}_f = \lambda w . \lambda x \cn \sem {\ups P}_M(w) . \lambda x' \cn \sem{\ups P}_{M'}(w).\]
%% \[\Pi y \cn \sem P_M.\Pi y' \cn\sem P_{M'}.  \sem P_f(y, y')  \to s(w, (x\ y), (x'\ y'))  \]

\subsubsection{Writing this more Perspicuously}

Define
$$\equiv^{\#_f}_w : \#(w) \sim \#(\omega w) $$
$$\equiv^{\sem{N}_f}_w : \sem{N}_M(w) \sim \sem{N}_M'(\omega w)$$
$$\equiv^{\sem{P}_f} : \sem{P}_M \sim \sem{P}_{M'}$$
Then
\[\sem {\dns N}_f = \lambda x \cn \sem {\dns N}_M . \lambda x' \cn \sem{\dns N}_{M'}.\]
\[\Pi w .\Pi (y \equiv_w^{\sem N_f} y') .   (x\ w\ y) \equiv_w^{\#_f} (x'\ \omega w\ y'))  \]

\[\sem {\ups P}_f = \lambda w . \lambda x \cn \sem {\ups P}_M(w) . \lambda x' \cn \sem{\ups P}_{M'}(w).\]
\[\Pi (y \equiv^{\sem P_f} y') .  (x\ y) \equiv^{\#_f}_w (x'\ y')  \]

%% \subsubsection{Can I Get Away With Positives as Functions}

%% Positive props interpret as functors $\rmod \to \rset$.
%% Negative props interpret as functors $\rmod \to \rrfam$ over $\rset$.
%% \[\sem {\dns N}_M = \forall w . \sem N_M(w) \to \#(w) \]
%% \[\sem {\ups P}_M = \lambda w .\sem P_M \to \#(w)\]

%% Define
%% $$\equiv^{\#_f}_w : \#(w) \sim \#(\omega w) $$
%% $$\equiv^{\sem{N}_f}_w : \sem{N}_M(w) \sim \sem{N}_M'(\omega w)$$
%% $$\equiv^{\sem{P}_f} : \sem{P}_M \to \sem{P}_{M'}$$
%% Then
%% \[\sem {\dns N}_f = \lambda x \cn \sem {\dns N}_M . \]
%% \[\Pi w .\Pi (y \equiv_w^{\sem N_f} y') .   (x\ w\ y) \equiv_w^{\#_f} (x'\ \omega w\ y'))  \]
%% \[: \sem{\dns N}_{M'}\]

%% \[\sem {\ups P}_f = \lambda w . \lambda x \cn \sem {\ups P}_M(w) . \lambda x' \cn \sem{\ups P}_{M'}(w).\]
%% \[\Pi (y \equiv^{\sem P_f} y') .  (x\ y) \equiv^{\#_f}_w (x'\ y')  \]

\subsection{Now What}
I think I hope that proofs of $P \prov N$ line up with `natural transformations' $e$
as in
\[
\begin{tikzcd}
\sem P_M\ar[d, "e_M"'] \x \sem N_M(w)\ar[r, <->, "{\sem {P\tri N}_f}"]
&\sem P_{M'}\ar[d, "e_{M'}"] \x \sem N_{M'}(\omega w)\\
\#_w \ar[r, <->, "{\equiv_w^{\#_f}}"']&\#'_{\omega w}\\
\end{tikzcd}
\]

%% \[
%% \begin{tikzcd}
%% \sem P_M\ar[d, "e_M"']\ar[r, <->, "{\sem P_f}"]&\sem P_{M'}\ar[d, "e_{M'}"]\\
%% \sem Q_M\ar[r, <->, "{\sem Q_f}"']&\sem Q_{M'}\\
%% \end{tikzcd}
%% \]

\section{Parametricity with Categories}

A model is
\begin{enumerate}
\item a symmetric monoidal category $(\P, \tensor, \munit)$ and a category $\N$
\item functors $\_\lol\_ : \P \x \N \to \N$ and $\_\tri\_ : \P \x \N \to \rset$
\item a natural isomorphism
$$
k :
\begin{prooftree}
(P_1 \tensor P_2) \tri N
\Justifies
P_1  \tri (P_2 \lol N)
\end{prooftree}
$$
\item a mapping
$\eta$ of atoms $a^+$ (resp. $a^-$) to objects of $\hat \P$ (resp.
$\hat \N$)
\end{enumerate}


We interpret props as functors $\hat\P$ or $\hat\N$. The stuff I'm used to:
\[\sem{P_1 \tensor P_2} = \int^{\alpha_1,\alpha_2:\P} \sem{P_1}(\alpha_1) \x \sem{P_2}(\alpha_2) \x \P(\alpha_1\tensor\alpha_2, \dash)\]
\[\sem{P \lol N} = \int^{\alpha,\phi:\P} \sem{P}(\alpha) \x \sem{N}(\phi) \x \P(\alpha\lol\phi, \dash)\]
\[\sem{\ups P} = \int_{\alpha : \P} \sem P(\alpha) \to \alpha \tri \dash\]
\[\sem{\dns N} = \int_{\phi : \N} \sem N(\phi) \to \dash \tri \phi\]
\[\sem{a^-} = \eta(a^-)\qquad \sem{a^+} = \eta(a^+)\]

However, I now want to have a further notion of relations on models.
A relation $R : M \sim M'$ is something like
\begin{enumerate}
\item a functor $\equiv_P : \P \x \P' \to \rset$
\item a functor $\equiv_N : \N \x \N' \to \rset$
\item For each $\pi : \alpha \equiv_P \alpha'$ and $\nu : \phi \equiv_N \phi'$ a
relation $\equiv_{\pi \tri \nu} : (\alpha \tri \phi) \sim (\alpha' \tri \phi') $.
\item For each $a^+$ and each $\pi : \alpha \equiv_P \alpha'$,
a relation $\equiv^\pi_{\eta(a^+)} : \eta(a^+)(\alpha) \sim \eta(a^+)(\alpha')$
\item For each $a^-$ and each $\nu : \phi \equiv_N \phi'$,
a relation $\equiv^\nu_{\eta(a^-)} : \eta(a^-)(\phi) \sim \eta(a^-)(\phi')$
\end{enumerate}

And I should be able to interpret any proposition at a model relation, and obtain
a relation between the set interpretations of the prop, i.e.
for $\pi : \alpha \equiv_P \alpha'$ and $\nu : \phi \equiv_N \phi'$ we have
\[ \equiv^\pi_{\sem P_R} :  \sem P_M(\alpha) \sim \sem P_{M'}(\alpha') \]
\[ \equiv^\nu_{\sem N_R} :  \sem N_M(\phi) \sim \sem N_{M'}(\phi') \]

Now a semantic entailment from $P \models N$
is defined as a family of functions
\[\zeta_{M\alpha\phi} : \sem P_M(\alpha) \x \sem N_M(\phi) \to (\alpha \tri\phi)\]
such that
for any
\begin{itemize}
\item $R: M \to M'$
\item $\pi : \alpha \equiv_P \alpha'$ and $\nu : \phi \equiv_N \phi'$
\item $p \equiv^\pi_{\sem P_R} p'$ and $n \equiv^\nu_{\sem N_R} n'$
\end{itemize}
we have $\zeta_{M\alpha\phi} (p, n) \equiv_{\pi \tri \nu} \zeta_{M'\alpha'\phi'}(p', n')$.
\end{document}
