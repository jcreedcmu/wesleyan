\documentclass{article}
\usepackage[tmargin=0.05in, bmargin=0.05in]{geometry}
\input{theorem}
\input{prooftree}
\usepackage{stmaryrd}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\gol{\sqsubset}
\def\gor{\sqsupset}

\def\sp{\bullet}
\def\ot{\leftarrow}
\def\prequiv{\dashv\vdash}
\def\fdom{{\mathbf{d}f}}
\def\fcod{{\mathbf{e}f}}
\def\fidom{\mathbf{\bar d}f}
\def\ficod{\mathbf{\bar e}f}

\def\thn{\mathrel|}
\def\coe{\mathsf{coe}}
\def\bpush{\mathbf{push}}
\def\bpull{\mathbf{pull}}

\def\wo{\setminus}
\def\fA{\mathsf{A}}
\def\fC{\mathsf{C}}
\def\fX{\mathsf{X}}
\def\ff{\mathsf{f}}
\def\fm{\mathsf{m}}
\def\rspan{\mathsf{Span}}
% \def\El#1{\mathsf{El}({#1})}
\def\El#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}
\def\mor#1#2{#1 \to \underline{#2}}

\def\ridp{\mathsf{idp}}
\def\ssem#1{\langle\!\langle{#1}\rangle\!\rangle}

\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{orange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.9}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=orange,colback=orange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{\mathbin{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{\textsf{\textbf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\G{\mathbf{G}}
\def\S{\mathbf{S}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\tri{\rhd}
\def\ll{\mathsf{L}}
\def\rr{\mathsf{R}}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}



\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\def\tensor{\otimes}
\def\htensor{\mathrel{\hat\otimes}}
\def\lol{\multimap}
\def\hlol{\mathrel{\hat\multimap}}
\def\wtf{{\color{red}???}}

\def\re{\mathbf{E}}
\def\sh{\sharp}
\def\shp{\mathrel{\sharp}}
\def\zero{\texttt{0}}
\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}

\section{A Total Glaring Obvious Terrible Problem}

Substitution doesn't make sense semantically!

If I have $\Delta  \prov M : A$ then I have, for any $d$,
\[ M_d :  A_{dd} \]
But if I have $\Delta , x : A \prov B : \rtype$, then I'm supposed
to have, for any $\delta$,
\[ B_{\delta} : A_{\delta} \to \rtype \]
But how do I interpret the expression $([M/x]B)_\delta$? I don't know
how to take the general object $\delta \in \ssem\Delta$
and make something of $M$ with it.

The shape of the first solution that occurs to me is to change the interpretation
of contexts $\Gamma$ to replace $(\cdots, x : A)_\delta = \cdots, A_{\delta}$
with something more like $(\cdots, x : A)_\delta = \cdots, [\delta] \to A_{\delta}$
where we define $[ed]$ is the set of morphisms $d \to e \in \ssem \Delta$.
This is because the end-condition on terms means that there actually is a canonical
way of defining
$M_\delta : [\delta] \to A_\delta$
for a $\Delta \prov M : A$.

Ok, that sounds nice, but what else do I have to set up to make that work?
I suspect the end-property still translates to some other coherence
properties that $M_\delta$ needs to have with respect to transport.
Like: suppose we have
\[
\begin{tikzcd}
c \ar[r, "h"] & d \ar[r, "f"] & e
\end{tikzcd}
\]
and we stare at
\[
\begin{tikzcd}
  A_{cc} \ar[dr]
  &[-2em]&[-2em] A_{dd} \ar[dl]\ar[dr]
  &[-2em]&[-2em] A_{ee} \ar[dl]\\
  & A_{dc}\ar[dr]
  && A_{ed} \ar[dl]\\
&& A_{ec}
\end{tikzcd}
\]
Oh, this starts to resemble a bit of twisted-arrow-category stuff
again, fantastic.
%% So $M_{dc} : [dc] \to A_{dc}$. For example, $M_{dc}(h) : A_{dc}$.
%% Also $M_{ed} : [ed] \to A_{ed}$, and $M_{ed}(f) : A_{ed}$.
For what is transport on $A^+ : [\delta] \to A_\delta$?
We had $A_\phi : A_\delta \to A_\epsilon$, so
\begin{declbox}
  $A_\phi^+ :  ([\delta] \to A_\delta) \to ([\epsilon] \to A_\epsilon)$
\end{declbox}
%Ok, what is $[\phi]$, for a $\phi : d'e' \to de$? It's a square
Or if we name the parts of  $\phi$ as $i o : d'e' \to de$ and stare at
\[
% t =
\begin{tikzcd}
d' \ar[from=r, "f"']\ar[d, "i"']& e'\ar[from=d, "o"']\\
d \ar[from=r]& e \\
\end{tikzcd}
\]
then we can define {\em backwards} transport?
\begin{declbox}
  $A_{io}^+ : (a : [de] \to A_{de}) \to ([d'e'] \to A_{d'e'})$
\end{declbox}
\begin{defnbox}
  $A_{io}^+( a, f) = A_{io}( a(i \o f \o o))$
\end{defnbox}
No, this doesn't work. None of the arrows are lining up correctly. What's wrong?


Let's go over it again. If I have a morphism $f : d \to e\in \ssem \Delta$,
 and a term $M$, I can canonically get a value in $A_{ed}$.
I either take $M_{dd}$ and transport $fd$, or $M_{ee}$ and transport $ef$.
So I want to talk about $M_f : [\delta] \to A_\delta$ where $[\delta]$ is defined
as the contravariant hom: $[ed]$ is $d \to e$.

What data is needed to go from $[\delta] \to A_\delta$ to $[\epsilon] \to A_\epsilon$?
Surely something should work. Suppose $\delta = dd'$ and $\epsilon = ee'$.
If we have a $[\epsilon] = e' \to e$ and we want to be able to make
a $[\delta] = d' \to d$, we need
\[
% t =
\begin{tikzcd}
d' \ar[r]\ar[d, "i"']& d\ar[from=d, "o"']\\
e' \ar[r, "f"']& e \\
\end{tikzcd}
\]
which is really uncomfortable and weird. I seem to need a morphism
$\phi : \delta \to \epsilon$ to tell me how to actually do the
transport $A_\delta \to A_\epsilon$, but another map $\epsilon \to
\delta$ to tell me how to adapt $[\epsilon]$ into $[\delta]$.
This seems totally wrong.

\subsection{What Happens if I Ignore This}
Let's try to define what contexts might mean, anyway.

I'm going to go back to thinking about $\Gamma, x + A$ because it's less total
typing.
Before I had
%\[ A^\phi : (g : \Gamma_\phi) \to A_{\delta}(\Gamma^{\ltri \phi} g) \to A_{\epsilon}(\Gamma^{\rtri \phi} g) \]
\[ (\Gamma, x + A)_\phi = (g : \Gamma_\phi) \x A_\delta(\Gamma^{\ltri \phi} g) \]
%\[ (g : \Gamma_\psi) \x A_{\delta'}(\Gamma^{\ltri \psi} g) \to (g : \Gamma_\phi) \x A_\delta(\Gamma^{\ltri \phi} g) \]
\[ (\Gamma, x + A)^\tau(g, a) = (\Gamma^\tau g, A^\iota(\Gamma^{\ltri \tau}, a)) \]
Now I think it's going to be more like
\[ (\Gamma, x + A)_\phi = (g : \Gamma_\phi) \x ([\delta] \to A_\delta(\Gamma^{\ltri \phi} g)) \]
and then we'll need
\[ (\Gamma, x + A)^\tau : (g' : \Gamma_\psi) (a : [\delta'] \to A_{\delta'}(\Gamma^{\ltri \psi} g'))\to (g : \Gamma_\phi) \x [\delta] \to A_\delta(\Gamma^{\ltri \phi} g) \]
with $\tau$ being
\[
\begin{tikzcd}
\delta' \ar[r, "\psi"]\ar[d, "\iota"']& \epsilon'\ar[from=d, "\omega"']\\
\delta \ar[r, "\phi"']& \epsilon
\end{tikzcd}
\]
As it is, I seem stuck. I don't think I can get from $[\delta]$ to $[\delta']$ with $\iota$
Suppose $\delta = dd_0$ and $\delta' = d'd_0'$.
Then I'm talking about getting from $d_0 \to d$ to $d_0' \to d'$, and for that
I need $d_0' \to d_0$ and $d \to d'$, which is the opposite of what $\iota$ is.

Hmm. Can I get any mileage out of considering when $\tau$ is symmetric, arising from
\[
t =\qquad
\begin{tikzcd}
d' \ar[r, "s"]\ar[d, "i"']& e'\ar[from=d, "o"']\\
d \ar[r, "f"']& e
\end{tikzcd}
\]
as
\[
tt =\qquad
\begin{tikzcd}
d'e' \ar[r, "ss"]\ar[d, "io"']& e'd'\ar[from=d, "oi"']\\
de \ar[r, "ff"']& ed
\end{tikzcd}
\]
In that case I'm trying to make
\[ (\Gamma, x + A)^{tt} : (g' : \Gamma_{ss}) (a : [d'e'] \to A_{d'e'}(\Gamma^{\ltri ss} g'))\to (g : \Gamma_{ff}) \x [de] \to A_{de}(\Gamma^{\ltri ff} g) \]
Oh, no, I'm still stuck with the same problem.

\subsection{Doing the Opposite of what Doesn't Work}
I feel like there's no way this could work, but {\em existentially} quantifying
over morphisms seemed to let me make some progress on equality types, so let me try
it here, even though it seems like exactly the wrong thing for terms? Unless I get
some kind of adjoint-ish collapse?

Let's define
\begin{declbox}
  $ A^+_\delta : \Gamma_\delta \to \rtype$
\end{declbox}
\begin{defnbox}
  $ A^+_\delta(g) = [\delta] \x A_\delta(g) $
\end{defnbox}

Then I try to define
\[ (\Gamma, x + A)_\phi = (g : \Gamma_\phi) \x ([\delta] \x A_\delta(\Gamma^{\ltri \phi} g)) \]
doing transport will require
\[ (\Gamma, x + A)^\tau : (g' : \Gamma_\psi) (k : [\delta'])(a :  A_{\delta'}(\Gamma^{\ltri \psi} g'))\to (g : \Gamma_\phi) \x [\delta] \x A_\delta(\Gamma^{\ltri \phi} g) \]
Which seems attainable, but I just can't wrap my head around what it means.
\subsection{Opposite In a Different Way}

Can I make any sense out of defining $[dd']$ `covariantly' instead, as
representing $d \to d'$? Can I hope for a term semantics that takes $M$ and this sort
of $\delta$ and yields $[\delta] \to (g : \Gamma_{\delta}) \to A_{\delta}(g)$?
It's not definable {\em from} the current semantics, but nothing immediately
stops me from attempting this as a stronger semantic requirement.

This might repair a lot. For one thing, transport at types should now work the right way
around. The major bad thing is I have no idea what the general
end condition should look like now. Let's look at transport for clues.
\begin{declbox}
 $ A^+_\delta : \Gamma_\delta \to \rtype$\\
 $ A_+^\phi : (g : \Gamma_\delta) \to A^+_\delta(\Gamma^{\ltri \phi} g) \to A^+_\epsilon(\Gamma^{\rtri \phi} g)$
\end{declbox}
\begin{defnbox}
 $ A_\delta^+(g) = [\delta] \to A_\delta(g)$
\end{defnbox}
We say $\delta = d d'$ and $\epsilon = e e'$ and we need to make
\[ A_+^\phi : (g : \Gamma_\delta) \to ([\delta] \to A_\delta(\Gamma^{\ltri \phi} g))
\to [\epsilon] \to A_\epsilon(\Gamma^{\rtri \phi} g)\]

Let me get my head straight that if I have a $h : [\epsilon]$ and
$\phi : \delta \to \epsilon$
then I can {\em reverse} transport $h^\phi : [\delta]$.
For if $h : e \to e'$ and $\phi$ is a pair consisting of $d \to e$
and $e' \to d'$, then I can compose to get $d \to d'$. Ok, great. Then I can define
\begin{defnbox}
  $A_+^\phi(g, a, h) = A^\phi(g, a(h^\phi))$
\end{defnbox}
Ok, what could the end-condition be, then? Terms
are
\begin{declbox}
  $M_\delta :  (g : \Gamma_\delta) \to [\delta] \to A_\delta(g)$
\end{declbox}
Now what I had before corresponded to
taking a $g : \Gamma_{de}$
\begin{enumerate}
\item giving this $\Gamma^{\rtri \fdom } g$ and the  identity arrow at $d$, and getting out
$A_{dd}$, then transporting  to $A_{ed}$
\item giving this $\Gamma^{\rtri \fcod} g$ and the  identity arrow at $e$, and getting out
$A_{ee}$, then transporting to $A_{ed}$
\end{enumerate}
and demanding that those are equal.

%% A relevant twisted-arrow diagram that obtains among the stuff I have looks like
%% \[
%% \begin{tikzcd}
%% d \ar[r, "f"]\ar[d, equal]& e\ar[from=d, equal]\\
%% d \ar[r, "f"']& e
%% \end{tikzcd}
%% \]
So I might try to generalize to
\[
\begin{tikzcd}
d' \ar[r, "f'"]\ar[d, "\ell"']& e'\ar[d, "r"]\\
d \ar[r, "f"']& e
\end{tikzcd}
%% \qquad
%% \begin{tikzcd}
%% d'e' \ar[r, "ss"]\ar[d, "io"']& e'd'\ar[from=d, "oi"']\\
%% de \ar[r, "ff"']& ed
%% \end{tikzcd}
%%
 \]
and try taking a $g : \Gamma_{de}$
\begin{enumerate}
\item giving this $\Gamma^{?} g$ and $\ell$, and getting out
$A_{d'd}$, then $f'd$-transporting  to $A_{e'd}$
\item giving this $\Gamma^{?} g$ and $r$, and getting out
$A_{e'e}$, then $e'f$-transporting to $A_{e'd}$
\end{enumerate}
and demanding that those are equal. But I don't know how to fill in the $?$s if I abandon
the twisted-arrow diagram.

\end{document}
