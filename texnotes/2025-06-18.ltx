\documentclass{article}
\usepackage[tmargin=0.15in, bmargin=0.15in]{geometry}
\input{theorem}
\input{prooftree}
\usepackage{hyperref}
% https://tex.stackexchange.com/a/847
\hypersetup{
    colorlinks,
    urlcolor={blue},
}
\usepackage{makecell}
\usepackage{relsize}
\usepackage{latexsym}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\usepackage{stackengine}
\newcommand\oast{\stackMath\mathbin{\stackinset{c}{0ex}{c}{0ex}{\ast}{\bigcirc}}}

\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\sssection#1{\vskip1em \hrule\vskip 0.5em \noindent $\triangleright$ {\bf #1} \vskip0.5em \hrule\vskip 1em }
\def\I{\mathbb{I}}




\def\gets{\leftarrow}
\def\all{\forall}

\def\spec{\mathsf{Spec}}
\def\breturn{\mathop{\mathbf{return}}\nolimits}
\def\bthunk{\mathop{\mathbf{thunk}}\nolimits}
\def\brun{\mathop{\mathbf{run}}\nolimits}
\def\bget{\mathop{\mathbf{get}}\nolimits}
\def\bGel{\mathop{\mathbf{Gel}}\nolimits}
\def\bgel{\mathop{\mathbf{gel}}\nolimits}
\def\bgbound{\mathop{\mathbf{gbound}}\nolimits}
\def\bgpath{\mathop{\mathbf{gpath}}\nolimits}
\def\bungel{\mathop{\mathbf{ungel}}\nolimits}
\def\bGet{\mathop\mathbf{Get}}
\def\dapt#1#2{#1[\![#2]\!]}
\def\dap#1#2{#1\{#2\}}
\def\ll{\langle\!\langle}
\def\rr{\rangle\!\rangle}
\def\rshape{\ {\mathsf{shape}}}
\def\rrefl{{\mathsf{refl}}}
\def\bd{\mathsf{Bd}}
\def\bdd{\mathsf{Bdd}}
\def\rset{\mathbf{Set}}
\def\rid{\mathsf{id}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\prequiv{\dashv\vdash}
\def\sq{\square}

\definecolor{blu}{rgb}{0.1,0.5,1}
\definecolor{orng}{rgb}{1,0.5,0.3}

\def\nameof#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}



\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{lorange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.8}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=lorange,colback=lorange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\parr{\mathbin{\rotatebox[origin=c]{180}{\&}}}
\def\iff{\ \Longleftrightarrow\ }
\def\bu{\bullet}
\def\J{\mathbb{J}}
\def\R{\mathbb{R}}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\cprov{\mathrel\#}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\N{{\mathbb N}}
\def\Z{{\mathbb Z}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\tw{\mathop\triangleright\nolimits}
\def\tb{\mathop\blacktriangleleft}
\def\sw#1{^{#1}_{#1}}
\def\TP{\mathbf{TPre}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{\textsf{\textbf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
%\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rtrue{\ \mathsf{true}}
\def\rfalse{\ \mathsf{false}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\A{\mathbf{A}}
\def\B{\mathbb{B}}
\def\C{\mathbb{C}}
\def\W{\mathbb{W}}
\def\S{\mathbf{S}}
\def\G{\mathbf{G}}
\def\D{\mathbb{D}}
\def\E{\mathbb{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\tri{\rhd}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}

% https://tex.stackexchange.com/questions/716631/curved-arrows-from-tikz-cd-do-not-work
\tikzset{
  curve/.style={
    settings={#1},
    to path={
      (\tikztostart)
      .. controls ($(\tikztostart)!\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      and ($(\tikztostart)!1-\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      .. (\tikztotarget)\tikztonodes
    },
  },
  settings/.code={%
    \tikzset{quiver/.cd,#1}%
    \def\pv##1{\pgfkeysvalueof{/tikz/quiver/##1}}%
  },
  quiver/.cd,
  pos/.initial=0.35,
  height/.initial=0,
}

\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\tikzset{shorten <>/.style={shorten >=#1,shorten <=#1}}


\section{Modalities}
Suppose I have a category $\C$, suppose the judgement is structured like this:
when $N[f] \in \Gamma$ and $\Gamma \prov Q [C]$,
then $N$ is a $D$-prop and $Q$ is a $C$-prop, and  $f$ is a morphism $C \to D$.
Rules for the adjoint look like
\[
\begin{tikzcd}
C \ar[r, "h"]\ar[d, "g\o h"']& D'\ar[dl, "g" description] \ar[d, "\Delta \o g"]\\
D \ar[r, "\Delta"'] & \vec E
\end{tikzcd}
\]
\[
\begin{prooftree}
\Gamma[N [h]] \prov Q [C]
\justifies
\Gamma[U_{g} N[g\o h]] \prov Q [C]
\end{prooftree}
\qquad
\begin{prooftree}
 \Delta \o g \prov N [D']
\justifies
\Delta \prov U_{g}N [D]
\end{prooftree}
\]
\[
\begin{prooftree}
\Gamma; P [g \o h] \prov Q [C]
\justifies
\Gamma; F_{g} P[h] \prov Q [C]
\end{prooftree}
\qquad
\begin{prooftree}
 \Delta  \prov [P [D]]
\justifies
\Delta \o g \prov [F_{g}P [D']]
\end{prooftree}
\]

With a substitution/cut elimination principles like
\[
\begin{prooftree}
 \Delta \prov [P [D]]\qquad \Gamma; P[f] \prov Q[C]
\justifies
 \Delta \o f, \Gamma \prov  Q[C]
\end{prooftree}
\qquad
\begin{prooftree}
 \Delta \prov N [D]\qquad \Gamma[N[f]] \prov Q[C]
\justifies
 \Delta \o f, \Gamma \prov  Q[C]
\end{prooftree}
\]
The shift rules don't do anything particularly interesting; they're
\[
\begin{prooftree}
\Delta \prov P[D]
\justifies
\Delta \prov \ups P[D]
\end{prooftree}
%
\qquad
\begin{prooftree}
\Gamma; P[f] \prov Q[C]
\justifies
\Gamma [\ups P[f]] \prov Q[C]
\end{prooftree}
%
\qquad
\begin{prooftree}
\Delta \prov N[D]
\justifies
\Delta \prov [\dns N[D]]
\end{prooftree}
%
\qquad
\begin{prooftree}
\Gamma, N[f] \prov Q[C]
\justifies
\Gamma; \dns N[f] \prov Q[C]
\end{prooftree}
\]


I want to give this some kind of semantics in linear logic. I expect to translate positive
props into unrestricted props, negative props into linear props. For each object
of the category there is a syntactic class of kripke-world-like things $\phi \in W(C)$.
Also $W$ is a presheaf of some sort; we can transport along morphisms. There's a ``here''
predicate $h(C, \phi)$ that says we're currently at an object of the category,
and what's more at a current point $\phi$ of the presheaf.

To be able to focus on $N[f]$ on the left, we certainly have to at least grab a $h(C, \dash)$.
I'm not yet sure what role the $f$ plays. Let's look at what the $U$ semantics might be.

\[ (U_g N) \wat \phi = \exists \phi' . (\phi' = g \phi) \land (N \wat \phi')\]
I wonder if it's more uniform and easy to understand to make the source language substructural,
and do the $\tw$ translation. A context shape is a multimorphism. A stable sequent like
\[ N_1[f_1], N_2[f_2], N_3[f_3] \prov Q[C]\]
becomes
\[ \dns N_1 \wat \alpha_1,\dns N_2 \wat \alpha_2 , \dns N_3 \wat \alpha_3, \ups Q \wat \phi\prov  \#(\alpha_1^{f_1}, \alpha_2^{f_2}, \alpha_3^{f_3} \prov \phi)\]
In this case $\#$ is a predicate that takes a wide span diagram in $\C$ with some decorations.
Each object $D_i$ not at the apex is decorated with an $\alpha$ associated to $D_i$, and
the apex, an object $C$ is decorated with a $\phi$ associated to $C$.

Now what are the shifts? To focus on $N_1$, we need to residuate $\alpha_1$. So I end up with something like
\[ \dns N_2 \wat \alpha_2 , \dns N_3 \wat \alpha_3, \ups Q \wat \phi\prov [N \wat (\sq^{f_1}, \alpha_2^{f_2}, \alpha_3^{f_3} \prov \phi)]\]
Oho! This is starting to look more sensible. My conclusion is that a $\phi$ can look like a span
with a missing $\alpha$ at one of the branches. The `default' will be the identity map, I expect.
Transport therefore knows to compose on a morphism at this chosen branch.

Oh yeah this normalizes out to sensible stuff. $\lol$ is an operation on resources/frames at the same object.
$\otimes$ is an operation at resources at the same object.
I can construct a frame expression as
\[( \sq^{f_1}, \alpha_2^{f_2}, \alpha_3^{f_3} \prov \phi ) \equiv U_{f_1} (F_{f_2}\alpha_2 \otimes F_{f_3} \alpha_3 \lol \phi )\]

\subsection{Laying out the Small Algebra}
\[\begin{prooftree}
f : C \to D
  \justifies
F_f : \mathsf{Res}(D) \to \mathsf{Res}(C)
\end{prooftree}
\qquad
\begin{prooftree}
f : C \to D
  \justifies
U_f : \mathsf{Frm}(C) \to \mathsf{Frm}(D)
\end{prooftree}\]
\[( \alpha \lol_D U_f \phi )\equiv U_f (F_f \alpha \lol_C \phi)\]
\[( \alpha \tw_D U_f \phi )\iff (F_f \alpha \tw_C \phi)\]
 A stable sequent like
\[ N_1[f_1], N_2[f_2], N_3[f_3] \prov Q[C]\]
becomes
\[ \dns N_1 \wat \alpha_1,\dns N_2 \wat \alpha_2 , \dns N_3 \wat \alpha_3, \ups Q \wat \phi\prov  F_{f_1} \alpha_1 \otimes F_{f_2} \alpha_2 \otimes F_{f_3} \alpha_3 \tw \phi\]
Now because
\[ (\dns N) \wat \alpha := \forall\phi. N \wat \phi \to \alpha \tw \phi \]
this is equivalently
\[ (\forall \phi_1 .  N_1 \wat \phi_1 \to \alpha_1 \tw \phi_1) ,\dns N_2 \wat \alpha_2 , \dns N_3 \wat \alpha_3, \ups Q \wat \phi\prov  F_{f_1} \alpha_1 \otimes F_{f_2} \alpha_2 \otimes F_{f_3} \alpha_3 \tw \phi\]
and we can rearrange the rhs to
\[ (\forall \phi_1 .  N_1 \wat \phi_1 \to \alpha_1 \tw \phi_1) ,\dns N_2 \wat \alpha_2 , \dns N_3 \wat \alpha_3, \ups Q \wat \phi\prov   \alpha_1  \tw U_{f_1} (F_{f_2} \alpha_2 \otimes F_{f_3} \alpha_3 \lol \phi)\]
and instantiate $\phi_1 = U_{f_1} (F_{f_2} \alpha_2 \otimes F_{f_3} \alpha_3 \lol \phi)$ to get
\[ \dns N_2 \wat \alpha_2 , \dns N_3 \wat \alpha_3, \ups Q \wat \phi\prov     N_1 \wat ( U_{f_1}(F_{f_2} \alpha_2 \otimes F_{f_3} \alpha_3 \lol \phi) )\]
which is how we render the left focus sequent
\[( N_2[f_2], N_3[f_3] )[N_1[f_1]] \prov Q[C]\]

This all means the synthesized $\lol$ rules are slightly more interesting than I expected.
\[
\begin{prooftree}
\Delta'; P[\rid_D]  \prov N[D]
\justifies
\Delta' \prov  P \lol N [D]
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma  \prov [P[D]] \qquad \Delta [N [f]] \prov Q[C]
\justifies
(\Gamma \o f , \Delta) [ P \lol N [f]] \prov Q[C]
\end{prooftree}
\]
assuming $f : C \to D$.
Cut elimination on the bottom gives us the goal
\[\Delta' \o f, \Gamma \o f , \Delta \prov Q[C]\]
On the top, we first cut on $P$ to get
\[\Delta', \Gamma \prov N[D]\]
then cut that into the other derivation to get
\[\Delta' \o f, \Gamma \o f , \Delta \prov Q[C]\]
as required.
\subsection{More Categorically}
The type of resources is given by a contravariant functor $F : \C^\op \to \rset$.\\
The type of frames is given by a covariant functor $U : \C \to \rset$.\\
Then the relation $\tw$ is a set over the coend
\[
\begin{tikzcd}
\displaystyle\coprod_{f : C \to D} FD \x UC \ar[r, shift left=3pt]\ar[r, shift right=3pt]
&\displaystyle \coprod_{C\in \C} FC \x UC  \ar[r, ->>]
&\displaystyle \int^{C\in\C} FC \x UC
\end{tikzcd}
\]
This imposes the adjunctions $F_f \dashv U_f$.
We're saying $(F_f\alpha,\phi)$ is the same `syntactic gadget' as $(\alpha,U_f\phi)$
(assuming $\alpha \in FD$ and $\phi \in UC$)
so $\tw$ can't help but do the same thing to them.
I can also think of this as $\int^{C\in \C} FC \x UC \to \rset$,
which is like $(\exists {C\in \C}. FC \x UC) \to \rset$,
which in turn is like saying
\[(C\in \C) \to FC \to UC \to \rset\]
which is sort of the most naive way of saying what the type of $\tw$ is; only we
got categorical `coherence' for free.

What about the other structure? Naively, I need
\[ {\otimes} : (C : \C) \to FC \to FC \to FC \]
\[ {\lol} : (C : \C) \to FC \to UC \to UC \]
with presumably some constraints.

Surely I'll want that
\[F_f( \alpha \otimes \alpha) \equiv F_f\alpha \otimes F_f \alpha\]
which is I think telling me that $\otimes$ is straightforwardly a natural transformation
\[ \otimes : F \x F \to F : \C^\op \to \rset\]

The interaction I had above was
\[( \alpha \lol_D U_f \phi )\equiv U_f (F_f \alpha \lol_C \phi)\]
I think this means $\lol$ is a dinatural transformation from
$F \x U$ to $U$, both considered as functors $\C^\op \x \C \to \rset$.
Let's unpack that definition. The raw data is just right; for every
object $C \in \C$ we have a morphism $FC \x UC \to UC$, which is just a set function.
Then coherence is
\[
\begin{tikzcd}
&[-2em] FC \x UC \ar[r, "\lol"] & UC\ar[dr, "U_f"] \\
FD \x UC \ar[ur, "F_f"]\ar[dr, "U_f"']&&& UD\\
&[-2em] FD \x UD \ar[r, "\lol"'] & UD\ar[ur, equal]
\end{tikzcd}
\]
Perfect!
\subsection{The Semantics}
Suppose we're given $F : \C^\op\to\rset$ and $U : \C \to \rset$ and $\tw : \int^{C\in\C} FC \x UC \to \rset$
and natural $\otimes : F \x F \to F$ and dinatural ${\lol} : F \x U \to U$.
Assume $\alpha \otimes \alpha' \lol \phi \equiv \alpha \lol (\alpha' \lol \phi)$.
We want to interpret focused multimodal logic into this structure. Every proposition is
either positive at an object $C$, and interpreted at an element of $FC$, or negative at an object $C$
and interpreted at an element of $UC$. Interpretation yields a set.


Conventions used below: $\alpha \in FC$ and $\phi \in UC$ and $f : C \to D$ and $k : B \to C$.
\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat\alpha / N \wat \phi$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(\alpha)$\\
  $ (P_1 \oplus P_2) $ & $(P_1 \wat  \alpha ) \lor (P_2 \wat  \alpha)$\\
  $\dns N $ & $\dns\all   \phi :UC .   ( N \wat \phi) \to \alpha \tw  \phi$\\
  $F_f P $ & $\exists \alpha' : FD . (\alpha = F_f\alpha') \land (P \wat \alpha')$\\
  $ (P_1 \otimes P_2) $ & $\exists \alpha_1,\alpha_2 : FC. (\alpha = \alpha_1 \otimes \alpha_2) \land (P_1 \wat \alpha_1) \land (P_2 \wat \alpha_2)$\\
  $n $ & $n(\phi)$\\
  $ (N_1 \amp N_2) $ & $(N_1 \wat \phi ) \lor (N_2 \wat \phi )$\\
  $\ups P $ & $\dns \all\alpha : FC .   (P \wat \alpha)  \to \alpha   \tw \phi$\\
  $U_k N $ & $\exists \phi' : UB . (\phi = U_k\phi' ) \land (N \wat \phi')$\\
  $ (P \lol N) $ & $\exists \alpha : FC,\phi' :UC. (\phi = \alpha \lol \phi') \land (P \wat \alpha) \land (N \wat \phi')$\\
\end{tabular}\]
\subsection{A Syntactic Model}
Let $F(C)$ be contexts terminating at object $C$:
\[F(C) = \{\Gamma \prov \_[C]\}\]
Let $U(C)$ be contexts with a hole at object $C$:
\[U(C) = \{\Delta, \_[k] \prov Q[B] \st k : B \to C\}\]
Let $\tw$ hold when the fused context is provable:
\[ (\Gamma \prov \_[C]) \tw (\Delta, \_[k] \prov Q[B]) \iff \Delta, \Gamma \o k \prov Q[B] \]
The operation $\otimes$ is just context combination. The operation $\lol$ likewise is.

We supply predicates $p(\alpha)$ and $n(\phi)$. They say: $p(\Gamma \prov \_[C])$ iff $\Gamma$ is just the atom $p$, and $n(\Delta, \_[k] \prov Q[B] \st k : B \to C)$ iff $\Delta$ is empty and $Q$ actually
is the atom $n$.

We prove by induction that
\[P\wat \alpha \iff \alpha \prov [P] \]
\[N\wat \phi \iff  [N] \prov \phi \]
which is to say
\[P\wat (\Gamma \prov \_[C]) \iff \Gamma \prov [P[C]] \]
\[N\wat (\Delta,\_[k] \prov Q[B] ) \iff  \Delta [N[k]] \prov Q[B]  \]

\subsection{Categorifying Just a Bit More}
I want to catch up with Riley/Licata/Shulman's level generality. I think for that I need
$F : \C^\op \to \rcat$ and $U : \C \to \rcat$. Resources and frames are not just members of a set,
but they also can be related to one another by inequality. Alternatively, I can view these
as categories fibered over, so fibrations $F : \W^+ \to \C$ and $U : \W^- \to \C^\op$. What does $\tw$
become? Hm, no, I get stuck here.
\subsection{Absurd Generality}
Suppose we have an index set of polarities $I$. Then the semantics would
require categories $\C_i$ for each $i \in I$, and functors $F_i : \C_i \to \rset$.
Let the syntax of propositions be given by $\bar F_i : \C_i \to \rset$.
For each $i:I$ and each object $C \in \C_i$, there is a syntactic class of propositions.

There are two families of connectives we can configure, multiplicatives and shifts.
Suppose we have
\[  S : \rset \qquad j : S \to I \qquad C : (s : S) \to \C_{j(s)}\qquad i : I\qquad D : \C_i\]
Let $F_j C$ be an abbreviation for
\[(s : S) \to F_{j(s)} C_s \]
If  $R : F_j C \to F_i D \to \rset$ is a relation, then this creates connectives
\[\boxminus_R, \boxplus_R : \bar F_j C \to \bar F_i D \]
\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat x$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(x)$\\
  $ (P_1 \oplus P_2) $ & $(P_1 \wat  x) \lor (P_2 \wat  x)$\\
  $\boxminus_R(P) $ & $\dns\all   y :F_jC .   ( P \wat y) \to R(y, x)$\\
  $\boxplus_R(P) $ & $\exists   y :F_jC .   ( P \wat y) \land  R(y, x)$\\
\end{tabular}\]
\subsection{More Absurd Generality}
I think I've found my way back to my thoughts from 2018! The categorical structure of the $\C_i$ isn't needed,
because I'm creating the morphisms by declaring relations, even. The distinction
between polarities and modes disappears. They're all just modes. And I think by reasoning about sheaf semantics,
I can make additives effectively multiplicative.

So suppose I have a set $M$ of modes, and some resource sets $F : [M] \to \rset$,
with $F$ being a monoid homomorphism taking list concatenation to cartesian product.
Suppose $m_1 \in [M]$ and $m_2 \in M$. We aim to lift to $\bar F : [M] \to \rset$
also a monoid homomorphism.

Suppose $R : Fm_1 \to Fm_2 \to \rset$ is a relation. Then we generate
\[ \boxminus_R, \boxminus_R : \bar Fm_1 \to \bar Fm_2 \]
as syntactic connectives. The semantics is:
\[\begin{tabular}{ll}
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $X $ & $P \wat x$\\
\\[-0.9em]
\Xhline{2\arrayrulewidth}
\\[-0.9em]
  $p $ & $p(x)$\\
  $\boxminus_R(P) $ & $\dns\all   y :Fm_1 .   ( P \wat y) \to R(y, x)$\\
  $\boxplus_R(P) $ & $\exists   y :Fm_1 .   ( P \wat y) \land  R(y, x)$\\
\end{tabular}\]
\section{Modal Replacement}
I want to set up a CBPV-like system with a poset worth of value types. Something like
\[\begin{tabular}{rcl}
  Computation $N$&$::=$&$ F_d P_d\celse P_d \to_d N $\\
  Value $P_d$&$::=$&$ U_d N \celse P_d \x P_d \celse P_d + P_d$\\
\end{tabular}\]
which in the back of my head I think expands to
\[\begin{tabular}{rcl}
  Negative Low $N$&$::=$&$ \ups P\celse P \to N $\\
  Positive Low $P$&$::=$&$  F_d P_d  $\\
  Negative High $N_d$&$::=$&$U_d N$\\
  Positive High $P_d$&$::=$&$ \dns_d N_d \celse P_d \x P_d \celse P_d + P_d$\\
\end{tabular}\]
for $d \in D$ belonging to some poset. Write $\sq_d$ as shorthand
for $F_d \dns_d U_d$. Then I want to pose the question of under
what circumstances is it sound to promote a term at a type by increasing a bunch of subscripts.
\[\begin{tabular}{rcl}
  Contexts $\Gamma$&$::=$&$ \cdot \celse \Gamma, x : P_d $\\
\end{tabular}\]

\[\begin{prooftree}
\Gamma, x : P_d \prov  e :  N
\justifies
\Gamma \prov \lambda x . e : P_d \to_d N
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \prov e : P_d \to N \qquad \Gamma \prov M : P_d
\justifies
\Gamma \prov e\ M : N
\end{prooftree}\]

\[\begin{prooftree}
\Gamma \prov e : F_d P_d \qquad \Gamma, x : P_d \prov  e' :  N
\justifies
\Gamma \prov \blet F_d x = e \bin e' : N
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma \adjust_d \prov M : P_d
\justifies
\Gamma \prov \breturn M : F_d P_d
\end{prooftree}\]

\[\begin{prooftree}
\Gamma\adjust_d \prov M : U_d N
\justifies
\Gamma \prov \brun_d M : N
\end{prooftree}
\qquad
\begin{prooftree}
\Gamma  \prov e : N
\justifies
\Gamma \prov \bthunk_d e : U_d N
\end{prooftree}\]

Suppose the poset $D$ is just $\N$ for simplicity right now.
\begin{theorem}
Suppose we have a type $N$ such that all the subscripts anywhere in $N$ are $< n$.
Suppose all the surface-level subscripts in $\Gamma$ are $\ge n$. If
$\Gamma \prov e : N$, then there exists $e^+$ with $\Gamma \prov e^+ : N^+$,
where $N^+$ is $N$ with all the subscripts incremented by 1. This means
it should be okay to add a primitive
\[\mathbf{raise} : \sq_{n} N \to \sq_{n} N^+\]
\end{theorem}

\begin{proof}
?
\cqed
\end{proof}

\section{Modular Forms}
Two things I'd like to understand:
\begin{enumerate}
\item
  Why is it that $SL(2,\Z)$ is related to $(a z + b)/(cz+d)$?
\item  What makes $\Gamma_0(4)$ work
  for weight-1/2 forms?
\end{enumerate}
There's an obvious map $\R^2 \cong \C$. The group $SL(2,\Z)$ operates natively
on $\R^2$. For any $M \in SL(2,\Z)$, there's allegedly a commutative diagram
%% \[
%% \begin{tikzcd}
%% (\R^2)^2 \ar[r, equal]\ar[d, "M^2"'] & \C^2\ar[r, "\div"] & \C\ar[d, "{\tau\mapsto {a\tau + b\over c\tau + d}}"] \\
%% (\R^2)^2 \ar[r, equal] & \C^2\ar[r, "\div"] & \C \\
%% \end{tikzcd}
%% \]

%% Let's say we have $(z_0 + z_1i, w_0 +  w_1i)$ at the northern object of this diagram.
%% Then we get
%% \[ (a z_0 + b z_1) + (cz_0 + dz_1) i \qquad (a w_0 + b w_1) + (cw_0 + dw_1) i \]
%% at the southern object. So
%% \[\tau = z/w = {z_0 + z_1i \over w_0 + w_1 i}\]
%% and we want to compare
%% \[ {(a z_0 + b z_1) + (cz_0 + dz_1) i \over (a w_0 + b w_1) + (cw_0 + dw_1) i  } \quad\stackrel{?}{=}\quad {a\tau + b \over c\tau + d}\]
%% So that's the same question as
%% \[ {z_0 (a + ci) + z_1 (b + di) \over w_0 (a + ci) + w_1 (b+ di)  } \quad\stackrel{?}{=}\quad
%% {az + bw \over cz + dw}\]
%% and therefore
%% \[ (z_0 (a + ci) + z_1 (b + di))(c(z_0 + z_1i) + d(w_0 + w_1i))  } \quad\stackrel{?}{=}\quad
%% (w_0 (a + ci) + w_1 (b+ di))(a(z_0 + z_1i) + b(w_0 + w_1i)) \]
%% I can't see it. Did I do something wrong? Let's take a = 1, b = 1, c = 0, d = 1. This takes $1 \in \C$ to itself
%% as expected.

%% \[ {( z_0 +  z_1) +  z_1 i \over ( w_0 +  w_1) + w_1  i  } \quad\stackrel{?}{=}\quad {\tau + 1 } = {z + w\over w}
%% = {(z_0 + w_0) + (z_1 + w_1) i \over w_0 + w_1 i}\]
%% Ok, yeah, I think I did do something wrong. $M$ is supposed to act {\em on} the pair of vectors.

%% \subsection{Correcting the Mistake}
%% Now is this diagram actually
\[
\begin{tikzcd}
(\R^2)^2 \ar[r, equal]\ar[d, "M"'] & \C^2\ar[r, "\div"]\ar[d, "{({z\atop w}) \mapsto ({az + bw \atop cz + dw})}" description] & \C\ar[d, "{\tau\mapsto {a\tau + b\over c\tau + d}}"] \\
(\R^2)^2 \ar[r, equal] & \C^2\ar[r, "\div"] & \C \\
\end{tikzcd}
\]

A lattice form of weight $k$ is $f : \C^2 \to \C$ where
\[f(\lambda z, \lambda w) = \lambda^{-k} f(z, w)\]
\[f(az + bw, cz + dw) =  f(z, w)\]
for any $(a\ b; c\ d) \in SL(2, \Z)$.
This is the same thing as a modular form, a map $h : \C \to \C$ with
\[ h\left(a\tau + b \over c\tau + d\right)  =  (c\tau + d)^k h(\tau)\]

If we're given a modular $h$, we define $ f(z,w) = w^{-k} h(z/w)$.
Then we check
\[ f(\lambda z,\lambda w) = \lambda^{-k} w^{-k} h(\lambda z/\lambda w) = \lambda^{-k} f(z,w)\]
\[ f(az + bw,cz + dw) = (cz + dw)^{-k} h \left(az + bw\over cz + dw\right)\]
\[ = (c\tau + d)^{-k} w^{-k} h\left(a\tau + b\over c\tau + d\right) \]
\[ = (c\tau + d)^{-k} w^{-k} (c\tau + d)^k h(\tau) = f(z,w)\]
Conversely, if we're given a modular lattice function $f$,
then we define $h(\tau) = f(\tau, 1)$, and we check
\[ h\left(a\tau + b \over c\tau + d\right)  = f\left({a\tau + b \over c\tau + d}, 1\right)\]
\[  = (c\tau + d)^k f\left({a\tau + b}, c\tau + d \right)
 = (c\tau + d)^k f(\tau, 1) = (c\tau + d)^k h(\tau)\]
\subsection{The Modular Group}
The lattice $\Lambda_{(z,w)}$ is the set of points $\{uz + vw \st u, v \in \Z\}$.
If $M   \in GL(2, \R)$, then $\Lambda_{M(z,w)} = \Lambda_{(z,w)}$ iff $M \in SL(2,\Z)$.
Let's consider the forward direction.
We suppose $\Lambda_{M(z,w)} = \Lambda_{(z,w)}$.
So in particular $z \in \Lambda_{M(z,w)}$ and $w \in \Lambda_{M(z,w)}$,
so really what we're saying is
\[z = (u,v)M\left(z \atop w\right)\]
\[w = (u',v')M\left(z \atop w\right)\]
I think this is close to invertibility for $M$ by a matrix of integers, so it must have determinant $1$.

\subsection{Being More Careful about Lattices}
Write the lattice generated by some complex numbers as $\langle z, w\rangle$ or $\langle z \rangle$.
A lattice $\Lambda$ is a discrete additive subgroup of $\C$. We think of 1-d lattices as degenerate
versions of 2-d lattices, where one of the generators is infinitely big. Likewise the origin sitting by
itself is like a degenerate lattice where both generators are infinitely big.

A lattice form of weight $k$ is a map $f$ from lattices $\Lambda$ to a complex number, where
\begin{itemize}
\item $f(\lambda\Lambda) = \lambda^{-k} \Lambda$
\item $\lim_{\im (z/w) \to \infty } f(\langle z, w \rangle) = f(\langle w\rangle)$ (i.e., the form is continuous as a 2-d lattice degenerates into a 1-d lattice)
\end{itemize}

Given  $\gamma \in SL(2,\Z)$ and $h :\mathbb{H} \to \C$
we define the weight-$k$ slash operation $h |_k \gamma : \mathbb{H} \to \C$ by
\[(h |_k \gamma)(\tau) =  (c\tau + d)^{-k} h \left(a\tau + b \over c\tau + d\right) \]
A modular form of weight $k$ and level $\Gamma \subseteq SL(2, \Z)$ is a map $h : \mathbb{H} \to \C$ with
\begin{itemize}
\item (Automorphy) For all $\gamma \in \Gamma$, we have $(h|_k \gamma)(\tau)  =   h(\tau)$
\item (Growth) For any $\gamma \in SL(2,\Z)$,  we have $(h|_k \gamma)(\tau)$ is bounded as $\im(\tau) \to \infty$.
\end{itemize}

We want to claim that lattice forms and modular forms are the same thing.
To convert from lattice form to modular form, we define
\[ h(\tau) = f(\langle \tau, 1\rangle )\]
To convert from modular form to lattice form, we define
\[ f(\langle z,w \rangle) = w^{-k} h(z/w)\]
\[  f(\langle w \rangle) = w^{-k} \lim_{\tau \to i \infty} h(\tau)\]

Let's restrict ourselves to the level-1 case for now and say we're dealing with all of $SL(2,\Z)$.

\begin{itemize}
\item Suppose we have a lattice form $f$, to show $h$ is a modular form. We must show automorphy.
\[(h|_k \gamma)(\tau)  =   h(\tau)\]
means we need
\[ (c\tau + d)^{-k} f\left( \left\langle {a\tau + b \over c\tau + d}, 1\right\rangle \right)  =  f(\langle \tau, 1\rangle )\]
but the lhs is equal to $f\left( \left\langle {a\tau + b },  c\tau + d\right\rangle \right)$
and
\[ \left\langle {a\tau + b },  c\tau + d\right\rangle = \langle \tau, 1\rangle \]
as lattices, so automorphy is satisfied.
Because we're considering level-1 forms, showing growth means showing $h(\tau)$ itself is bounded as
the imaginary part of $\tau$ goes to infinity. But this follows from 1-d degeneracy of the lattice form.
We find
\[ \lim_{\im(\tau) \to \infty} h(\tau) = \lim_{\tau \to i\infty} f(\langle \tau, 1\rangle) = f(\langle 1 \rangle) \]
so that's growth satisfied.
  \item Suppose we have $h$ a modular form, to show $f$ is a lattice form. First we need the lattice
automorphy condition
\[f(\lambda\Lambda) = \lambda^{-k} \Lambda\]
which unpacks to
\[ (\lambda w)^{-k} h(\lambda z/\lambda w)  = \lambda^{-k} w^{-k} h(z/w)\]
which is immediately satisfied. Then we need the degeneracy condition. Then we need to see
\[\lim_{\im (z/w) \to \infty } f(\langle z, w \rangle) = f(\langle w\rangle)\]
which means
\[\lim_{\im (z/w) \to \infty } w^{-k} h( z/ w) = w^{-k} \lim_{\tau \to i \infty} h(\tau)\]
and we're good.
\end{itemize}
\subsection{Some Congruence Subgroups}
Consider
\[ SL(2,\Z) \supseteq \Gamma(N) := \left\{\left(\left.\begin{array}{cc}
 a & b \\ c & d
\end{array}\right)\right| a,d \equiv 1\land  b,c \equiv 0\pmod N \right\}\]

\[ SL(2,\Z) \supseteq \Gamma_0(N) := \left\{\left(\left.\begin{array}{cc}
 a & b \\ c & d
\end{array}\right)\right| c \equiv 0\pmod N \right\}\]

I'm going to take a stab and guess that

\[\Gamma(N) = \{ \gamma \in SL(2,\Z) \st p^N \o \gamma = p^N \}\]
\[\Gamma_0(N) = \{ \gamma \in SL(2,\Z) \st p_0^N \o \gamma = p_0^N \}\]


where

\[ p^N : \Z \x \Z \to \Z/N\Z \x \Z /N\Z \qquad p^N(x,y) = (x \% N, y \% N)\]
\[ p_0^N : \Z \x \Z \to \Z/N\Z  \qquad p_0^N(x,y) = (y \% N)\]

Ok, let's treat the subscript 0 case first. Suppose
$\gamma \in \Gamma_0(N)$, so $c \equiv 0 \pmod N$.
To show is $p_0^N \o  \gamma = p_0^N$. By extensionality, let $z, w \in \Z \x \Z$ be given, we need to show
\[p_0^N (\gamma(z,w)) = p_0^N(z,w)\]
\[p_0^N (az + bw, cz + dw) = w \% N\]
\[ (cz + dw) \% N = w \% N\]
\[  dw \% N = w \% N\]
At this point we know $d = \pm 1$, because $ad -bc = ad = 1$. So something went wrong here.
But surely preservation of $p_0$ determines {\em some} subgroup of $SL(2,\Z)$, doesn't it? Which one is it?

\subsubsection{Another Idea}

How about: there are subsets
\[Z = \{ (z,w) \in  \Z \x \Z \st z \equiv 0 \pmod N \}\]
\[W = \{ (z,w) \in  \Z \x \Z \st w \equiv 0 \pmod N \}\]
and we guess
\[\Gamma(N) = \{ \gamma \in SL(2, \Z) \st \gamma Z = Z \land \gamma W = W \}\]
\[\Gamma_0(N) = \{ \gamma\in SL(2, \Z)  \st \gamma Z = Z  \}\]

Let's check the $\Gamma_0$ case. Suppose $\gamma \in \Gamma_0(N)$. If $ (z,w) \in Z$, then $z \equiv 0 \pmod N$.
Then $\gamma (z, w) = (az + cw, bz + dw)$. (I'm actually having the transpose of $\gamma$ act on $\Z \x \Z$ here because I'm thinking of it as `number of copies of $z$' and `number of copies of $w$`)
To check that that's in $Z$, we'd
check $az + cw \equiv 0 \pmod N$. But this is true, because $c \equiv 0 \pmod N$.
Conversely, if $(z,w) \in Z$, then we find by similar reasoning that
$\gamma^{-1} (z,w) \in  Z$, hence $(z,w) \in \gamma Z$.

Conversely, suppose $\gamma Z = Z$. To show is $\gamma \in \Gamma_0(N)$. Well,
since $(0,1) \in Z_0$, we know $\gamma(0,1) = (c, d) \in Z_0$. So $c \equiv 0 \pmod N$.

Ok, let's think about $\Gamma(N)$ now. Suppose $\gamma \in \Gamma(N)$. Want to show
\begin{itemize}
\item $\gamma Z \subseteq Z$. Let $(z,w) \in Z$ be given. We know $z \equiv 0 \pmod N$.
So $\gamma (z,w) = (az + cw, bz + dw)$. This is in $Z$ because $az + cw \equiv 0 \pmod N$ because
we know that $z$ and $c$ are.
\item $Z \subseteq \gamma Z$. Same as above, but reasoning with $\gamma^{-1}$, relying on the fact
that $\Gamma(N)$ is actually a group.
\item $\gamma W \subseteq W$. Let $(z,w) \in W$ be given. We know $w \equiv 0 \pmod N$.
So $\gamma (z,w) = (az + cw, bz + dw)$. This is in $W$ because $bz + dw \equiv 0 \pmod N$ because
we know that $b$ and $w$ are.
\item $W \subseteq \gamma W$. Same as above, but reasoning with $\gamma^{-1}$, relying on the fact
that $\Gamma(N)$ is actually a group.
\end{itemize}

Conversely, what if $\gamma$ has $ \gamma Z = Z \land \gamma W = W$. Can we be assured
that $\gamma \in \Gamma(N)$? We know $(c,d) \in Z$ and $(a,b) \in W$. So we know $b, c \equiv 0 \pmod N$.
So because the determinant of $\gamma$ is 1, we know $(a,d) \in \{(1,1), (-1,-1)\} \pmod N$.
Huh, this seems to break in the opposite way from $\Gamma_0$!

Do I want `preserves a subset' for $\Gamma_0(N)$ and `preserves a homomorphism onto $\Z /N\Z$' for $\Gamma(N)$?

\subsection{Trying That}
Claim:
\[ \Gamma(N) = \{ \gamma \in SL(2, \Z) \st \gamma (1,0) \equiv (1,0) \pmod N \land
\gamma (0,1) \equiv (0,1) \pmod N \}\]
Oh yeah that's just dead obviously the same as $\gamma = I \pmod N$.

Here's a picture for $\Gamma(4)$:
\[\begin{tikzpicture}[x=0.5cm, y=0.5cm]

  % Define colors for the modulo classes
  \definecolor{mod0}{RGB}{30,30,64}     % Black
  \definecolor{mod3}{RGB}{245,170,0}     % Yellow
  \definecolor{mod2}{RGB}{0,128,255}     % Cyan
  \definecolor{mod1}{RGB}{255,0,65}   % Magenta

  % Draw axes
  \draw[->, thick] (-6,0) -- (6,0) node[right] {$x$};
  \draw[->, thick] (0,-6) -- (0,6) node[above] {$y$};

  % Dot lattice with coloring
  \foreach \x in {-5,...,5} {
    \foreach \y in {-5,...,5} {
      \pgfmathtruncatemacro\modval{mod(40+\x+\y,4)}
      \ifcase\modval
        \fill[mod0] (\x,\y) circle (3pt);
      \or
        \fill[mod1] (\x,\y) circle (2pt);
      \or
        \fill[mod2] (\x,\y) circle (2pt);
      \or
        \fill[mod3] (\x,\y) circle (2pt);
      \fi
    }
  }
\end{tikzpicture}\]
and here's a picture for $\Gamma_0(4)$:
\[\begin{tikzpicture}[x=0.5cm, y=0.5cm]
  % Draw axes
  \draw[->, thick] (-6,0) -- (6,0) node[right] {$x$};
  \draw[->, thick] (0,-6) -- (0,6) node[above] {$y$};

  % Dot lattice with coloring
  \foreach \x in {-5,...,5} {
    \foreach \y in {-5,...,5} {
      \pgfmathtruncatemacro\modval{mod(40+\y,4)}
      \ifnum\modval=0
        \fill[black] (\x,\y) circle (3pt);
      \else
        \fill[gray!50!white] (\x,\y) circle (2pt);
      \fi
    }
  }
\end{tikzpicture}\]

\subsection{Understanding Better What's Going On}
A {\em picture} $p = \langle P, K, \ldots\rangle$
 in $\R^2$ is a set $P$, a set of colors $K$, and a span map $K \gets P \to \R^2$.
Two pictures are considered the same if there's an appropriate isomorphism of spans.
A map $\gamma \in GL(2, \R)$ can be applied to a picture $p$ by composing $\gamma$ on the end
\[ \begin{tikzcd}K \ar[from=r]& P\ar[r]&  \R^2 \ar[r, "\gamma"] & \R^2 \end{tikzcd}\]

{\bf Claim}: Given the evident picture $p = 1 \gets \Z^2 \to \R^2$, we claim that
the $\gamma \in GL(2,\R)$ that yield the same picture after composition are exactly
the subgroup $GL(2, \Z)$.

{\bf Proof}: To be the same picture, we'd need an isomorphism $\theta$ fitting in

\[ \begin{tikzcd}
\Z^2 \ar[r]\ar[d, "\theta"'] & \R^2 \ar[d, "\gamma"]\\
\Z^2 \ar[r] & \R^2 \\
\end{tikzcd}\]
\end{document}
