\documentclass{article}


\usepackage{amsmath}
\usepackage{amssymb}
\input{theorem}

\input{prooftree}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}

\usepackage{tikz}
\usepackage{tikz-cd}
\definecolor{green}{HTML}{007f00}
\definecolor{cyan}{HTML}{007f7f}
\definecolor{purple}{HTML}{af00af}
\def\rr#1{{\color{red}\mathbf {#1}}}
\def\bb#1{{\color{blue}\mathbf{#1}}}
\def\Z{\mathcal Z}
\def\adjust{\big|}
\def\O{\mathcal{O}}
\def\rid{\mathsf{id}}
\def\int{\square}
\def\bd{\partial}
\def\prov{\vdash}
\def\prequiv{\dashv\vdash}
\def\imp{\Rightarrow}
\def\cqed{\hskip2mm{\vrule width .5em height .5em depth 0em}} % at the end of a |P.
\def\o{\circ}
\def\C{\mathbb{C}}
\def\N{\mathbb{N}}
\def\R{\mathbb{R}}
\def\x{\times}
\def\st{\mathrel|}
\def\rset{\mathbf{Set}}
\def\op{\mathsf{op}}
\def\P{\mathbf{P}}
\def\dash{\hbox{---}}
\def\deg{\mathop{\mathsf{deg}}}
\def\celse{\mathrel{|}}
\def\cn{{:}}
\def\rok{\mathrel\mathsf{ok}}
\def\sub{\subseteq}




\title{Categorifying the BCH Formula}
\begin{document}
\maketitle
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\section{Categorifying BCH}

My goal is to phrase the Baker-Campbell-Hausdorff formula in a more combinatorial way; i.e.
I want to replace the arithmetic/analytic statement that
\[ e^A e^B = e^{A + B + [A,B]/2 + [A,[A,B]]/12 + [B,[B,A]]/12 + \cdots}\]
with some statement or statements about isomorphisms between sets and/or relations.

I'm trying to follow the approach in
 \[\texttt{http://webhome.phy.duke.edu/$\sim$mehen/760/ProblemSets/BCH.pdf}\]
for understanding what the coefficients of the BCH are in general.

\subsection{Relations}
A binary relation on $X$ means a set $R$ together with a map $R \to X \x X$.
\begin{center}
\begin{tikzcd}
&[-12pt] R
\ar["{\rho_1}"']{ld}\ar["{\rho_2}"]{rd}
&[-12pt]
\\
X&&X
\end{tikzcd}
\end{center}
These play the role of the operators $A, B$ in the BCH formula. We can
do some of the same arithmetic on relations as we can do on operators,
of course saliently missing out on subtraction and division.

The sum of two relations $(R,\rho_1, \rho_2),(S, \sigma_1,\sigma_2)$ is written $R+S$ and is defined by taking
its carrier to be the coproduct of the relations' carriers, and
its projections to be the copairing of the projections
of the relations:
\begin{center}
\begin{tikzcd}
&[-12pt] R+S
\ar["{[\rho_1,\sigma_1]}"']{ld}\ar["{[\rho_2,\sigma_2]}"]{rd}
&[-12pt]
\\
X&&X
\end{tikzcd}
\end{center}
We can do ``scalar multiplication'' of a relation (i.e. ``operator'') by a set (i.e. ``scalar'').
If $R$ is a relation and $y$ is a set, then $yR$ is a relation in an evident way. We take the carrier
to be the product of the carrier of $R$ with the set $y$, and project out the $y$.
\begin{center}
\begin{tikzcd}
&[-12pt] y \x R
\ar["{ \rho_1 \o \pi_2}"']{ld}\ar["{\rho_2 \o \pi_2}"]{rd}
&[-12pt]
\\
X&&X
\end{tikzcd}
\end{center}
Two relations are considered isomorphic if there is an isomorphism of their carriers
such that both triangles in the diagram
\begin{center}
\begin{tikzcd}&[-12pt]  R\ar[dd, equal]
\ar{ld}\ar{rd}
&[-12pt]
\\
X&&X\\
&  S\ar[ul]\ar[ur]
\end{tikzcd}
\end{center}
commute.
Finally, composition of two relations $R$ and $S$ is given by pullback:

\begin{center}
\begin{tikzcd}
&[-6pt]&[-12pt] RS
\ar{ld}\ar{rd}
\ar[phantom, very near start]{dd}{\rotatebox{-45}{$\lrcorner$}}
&[-12pt]&[-6pt]
\\
&
R\ar{ld}\ar{rd}
&& S\ar{ld}\ar{rd}\\
X && X && X
\end{tikzcd}
\end{center}


\subsection{First Lemma}
The first step is to categorify
\[ e^{-B} A e^{B}  = A + [A,B] + [[A,B],B]/2 + [[[A,B],B],B]/3! + \cdots \]
First let's generalize this by replacing $B$ with $Bx$. We get
\[ e^{-Bx} A e^{Bx}  = A + [A,Bx] + [[A,Bx],Bx]/2 + [[[A,Bx],Bx],Bx]/3! + \cdots \]
which by bilinearity of Lie bracket is
\[ e^{-Bx} A e^{Bx}  = A + [A,B]x + [[A,B],B]x^2/2 + [[[A,B],B],B]x^3/3! + \cdots \]

Let's abbreviate $L_m = [[\cdots [A,\overbrace{B],\cdots, B ],B}^m]$ and note that these satisfy the recurrence
(which makes sense for relations as well as operators, since we have removed the subtraction involved in the Lie bracket)
\[L_0 = A \qquad L_{m+1} + B L_m = L_m B\]

Then our equation becomes
\[ e^{-Bx} A e^{Bx}  = \sum_m {x^m \over m!} L_m \]
Let's multiply both of these on the left by $e^{Bx}$. We get
\[  A e^{Bx}  = e^{xB} \left( \sum_m {x^m \over m!} L_m \right) \]
We can pull out the coefficients of these exponential generating functions by
taking iterated derivatives:
\[ \left(\partial\over\partial x\right)^n \left. \left(A e^{Bx}  \right)\right|_{x=0} =
 \left(\partial\over\partial x\right)^n \left.\left(e^{xB} \left( \sum_m {x^m \over m!} L_m \right)  \right)\right|_{x=0} \]
and computing these derivatives gives us the equation
\[ A B^n  = \sum_{m=0}^n   {n \choose m} B^{n-m} L_{m} \]
Now this equation is also free of any operations that don't make sense for relations.
So our goal is to prove the following:
\begin{lemma}
Suppose $A$ and $B$ are binary relations on some set $X$.
Suppose for every $m \ge 0$ that $L_m$ is a binary relation on $X$,
together satisfying the isomorphisms
\[L_0 = A \qquad L_{m+1} + B L_m = L_m B\]
Then there is an isomorphism of relations
\[ AB^n  = \sum_{m=0}^n   {n \choose m} B^{n-m} L_{m} \]
\end{lemma}

\begin{proof}
By induction on $n$. If $n=0$, then we are to show $A=L_0$, which is true by definition.
Otherwise, we know
\begin{equation}\tag{$\dagger$}
AB^n  = \sum_{m=0}^n   {n \choose m} B^{n-m} L_{m}
\end{equation}
and we must show
\[A B^{n+1}  = \sum_{m=0}^{n+1}   {n+1 \choose m} B^{n+1-m} L_{m} \]
By $(\dagger)$, it would suffice to show
\[\left(\sum_{m=0}^n   {n \choose m} B^{n-m} L_{m} \right)B =
 \sum_{m=0}^{n+1}   {n+1 \choose m} B^{n+1-m} L_{m} \]
But we can in fact reason that
\[\left(\sum_{m=0}^n   {n \choose m} B^{n-m} L_{m} \right)B =
\left(\sum_{m=0}^n   {n \choose m} B^{n-m} L_{m} B\right) \]
\[= \left(\sum_{m=0}^n   {n \choose m} B^{n-m} (L_{m+1} + B L_m) \right) \]
\[= \left(\sum_{m=0}^n   {n \choose m} B^{n-m} L_{m+1} \right) + \left(\sum_{m=0}^n   {n \choose m} B^{n+1-m} L_m \right) \]
\[= \left(\sum_{m=1}^{n+1}   {n \choose m-1} B^{n+1-m} L_{m} \right) + \left(\sum_{m=0}^n   {n \choose m} B^{n+1-m} L_m \right) \]
\[= \sum_{m=0}^{n+1}   \left({n \choose m-1} + {n \choose m}\right) B^{n+1-m} L_{m}  \]
\[= \sum_{m=0}^{n+1}   {n+1 \choose m} B^{n+1-m} L_{m}  \]
as required.
\cqed
\end{proof}

\subsection{Second Lemma}
Next we want to categorify the fact that
\[ e^{-G} {d\over dx} e^G = D + {1\over 2} [D, G] + {1 \over 3!} [[D, G], G] + \cdots\]
For any $G(x)$ that produces an operator given a scalar $x$, where $D = (d/dx)G$.
We first generalize by replacing $G$ with $Gy$. We get
\[ e^{-Gy} {d\over dx} e^{Gy} = yD + {y^2\over 2} [D, G] + {y^3 \over 3!} [[D, G], G] + \cdots\]
Multiply both sides on the left by $e^{Gy}$ to obtain
\[  {d\over dx} e^{Gy} = e^{Gy} \left(Dy + {y^2\over 2} [D, G] + {y^3 \over 3!} [[D, G], G] + \cdots\right)\]

Make the definitions
\[ M_1 = D \qquad M_{m+1} = [M_m, G]\]
Foreshadowing the desire to express constraints on relations rather than operators, this is equivalent
to requiring
\[ M_0 = 0 \qquad M_1 = D \qquad M_{m+1} + G M_m = M_m G\]
The equation we're trying to show now becomes
\[  {d\over dx} e^{Gy} = e^{Gy} \left(\sum_{m=0}^\infty {y^m\over m!} M_m \right)\]

Now let's also define $S_m$ to be the $m$-term sum of $m-1$ iterates
of $G$ with a $D$ somewhere in the middle.
\[ (DG\cdots G) + (GD\cdots G) + \cdots + (G\cdots DG) + (G\cdots GD)\]
So that
\[ {d\over dx}e^{Gy} = {d\over dx}\left(1 + Gy + {y^2\over 2!}G^2 + {y^3\over 3!}G^3 + \cdots\right)\]
\[= \left(yD + {y^2\over 2!}(DG + GD) + {y^3\over 3!}(DGG + GDG + GGD) + \cdots\right)\]
\[= \left(yS_1 + {y^2\over 2!}S_2 + {y^3\over 3!}S_3 + \cdots\right)\]
\[= \sum_{m=0}^\infty {y^m\over m!}S_m \]
So what we want to show is
\[ \sum_{m=0}^\infty {y^m\over m!}S_m = e^{Gy} \left(\sum_{m=0}^\infty {y^m\over m!} M_m \right) \]
By differentiating this expression by $y$ on both sides $n$ times, we see that it would suffice to show
\[ S_n = \sum_{k = 0}^n {n \choose k} G^k M_{n-k} \]
for every $n$.

\begin{lemma}
Suppose $G$ is a binary relation on a set $X$ and there exist sequences
 $(M_i)_{i \ge 1}$ and $(S_i)_{i\ge 1}$ of binary relations on $X$ satisfying the isomorphisms
\[  M_1 = D \qquad M_{n+1} + G M_n = M_n G\]
\[  S_1 = D \qquad S_{n+1} = G^n D + S_n G \]
Then for every $n \ge 0$ we have an isomorphism
\[ S_n = \sum_{k = 0}^{n-1} {n \choose k} G^k M_{n-k} \]
\end{lemma}

\begin{proof}
The base case is $n=1$. We must show $S_1 = M_1$, but this is true by definition.
Otherwise, we know
\[ S_n = \sum_{k = 0}^{n-1} {n \choose k} G^k M_{n-k} \]
and try to show
\[ S_{n+1} = \sum_{k = 0}^{n} {{n+1} \choose k} G^k M_{{n+1}-k} \]
We show this as follows:
\[ S_{n+1} = G^n D + S_n G   \]
\[ = G^n D + \left(\sum_{k = 0}^{n-1} {n \choose k} G^k M_{n-k} \right)G \]
\[ = G^n D + \sum_{k = 0}^{n-1} {n \choose k} G^k M_{n-k} G \]
\[ = G^n D + \sum_{k = 0}^{n-1} {n \choose k} G^k (M_{n+1-k} + G M_{n-k})  \]
\[ = G^n D + \sum_{k = 0}^{n-1} {n \choose k} G^k M_{n+1-k} + \sum_{k = 0}^{n-1} {n \choose k} G^{k+1} M_{n-k}  \]
\[ = G^n D + \sum_{k = 0}^{n-1} {n \choose k} G^k M_{n+1-k} + \sum_{k = 1}^{n} {n \choose k - 1} G^{k} M_{n+1-k}  \]
\[ = G^n D + \left(M_{n+1} +  \sum_{k = 1}^{n-1} {n \choose k} G^k M_{n+1-k}\right)
 +\left(nG^nD + \sum_{k = 1}^{n-1} {n \choose k - 1} G^{k} M_{n+1-k} \right) \]
\[ = G^n D + M_{n+1} + nG^nD + \sum_{k = 1}^{n-1} \left({n \choose k}+{n \choose k - 1}\right) G^k M_{n+1-k}\]
\[ = G^n D + M_{n+1} + nG^nD + \sum_{k = 1}^{n-1} {n+1 \choose k} G^k M_{n+1-k} \]
\[ = (n+1)G^nD + \sum_{k = 0}^{n-1} {n+1 \choose k} G^k M_{n+1-k} \]
\[ = \sum_{k = 0}^{n} {n+1 \choose k} G^k M_{n+1-k} \]
as required. \cqed
\end{proof}

\subsection{Conjectures}

This is the most up-to-date rephrasing of ``The Lemma'' below as of 2022-06-09.

Define
\[(A \oplus B)^n = \sum_{k = 0}^n {n \choose k} A^k B^{n-k}\]
 \[G_{[\lambda_0,\ldots, \lambda_{k-1}]} = [[G_{\lambda_0}, G_{\lambda_1} ]\cdots  G_{\lambda_{k-1}}]\]
 \[G_{\lambda_0,\ldots, \lambda_{k-1}} = G_{\lambda_0} G_{\lambda_1} \cdots  G_{\lambda_{k-1}}\]

\[S^\sigma_{n} = \sum_{k = 1}^{n} \sum_{\lambda : (k, n+1)}  { n! \over k!} G_\lambda\sum_{i=0}^{k-1} [(-1)^i = \sigma]{k-1 \choose i}\lambda_i\]

\begin{lemma}
Let relations $A, B$ be given. Suppose I have $L_0, L_1, L_2, \ldots$ such that
\[L_0 = A; \qquad L_{n+1} + BL_n = L_nB \qquad (n \ge 1)\]

%% \[ L_n = \sum_{k = 1}^{n}\sum_{\lambda : k, n+1}
%%   {\lambda_0 n! \over k!}  G_{[\lambda]} \eqno(\dagger)\]
\[  (n+1)!G_{n+1} + S^+_{n} = L_n + S^-_{n}  \qquad (n \ge 1)\]

Then
\[ (A \oplus B)^n = \sum_{\lambda : (k,n)} {n!\over k!}  G_\lambda\]
(i.e. ``$ e^{xA}e^{xB} = e^{G(x)}$'')
\end{lemma}

This depends on
\begin{lemma}
\[  \sum_{\lambda : (k, n)} G_{[\lambda]}\lambda_0
  = \sum_{\lambda : (k, n)}   G_\lambda\sum_{i=0}^{k-1} (-1)^i{k-1 \choose i}\lambda_i\]
\end{lemma}

\begin{corollary}
\[  \sum_{k = 1}^{n}\sum_{\lambda : (k, n+1)} { n! \over k!}G_{[\lambda]}\lambda_0
  = \sum_{k = 1}^{n} \sum_{\lambda : (k, n+1)}  { n! \over k!} G_\lambda\sum_{i=0}^{k-1} (-1)^i{k-1 \choose i}\lambda_i\]
\end{corollary}







\subsection{Combining Lemmas}

We want to find $G$ such that
\[ e^{A}e^{B} = e^{G}\]
Mehen's approach is to observe that it would be enough to find a
\[G(x) = \sum_{n \ge 1} x^n G_n\]
satisfying
\[e^{-Bx} e^{-Ax}   {d\over dx} e^{Ax} e^{Bx} = e^{-G(x)} {d\over dx} e^{G(x)}  \]
By the above lemmas, the lhs of this is equal to
\[e^{-Bx} e^{-Ax}   (A e^{Ax} e^{Bx} +  e^{Ax}B  e^{Bx}) \]
\[= e^{-Bx} A e^{Bx} +  B  \]
\[= B + e^{-Bx} A e^{Bx}  \]
\[= B + A + [A, B]x + [[A, B], B] x^2/2 + [[[A,B],B],B]x^3/3! + \cdots \]
and the rhs is
\[ D +  [D, G]{1\over 2!} +  [[D, G], G]{1 \over 3!} + \cdots\]
where $D = (d/dx)G$. Noting that
\[G = xG_1 + x^2G_2 + x^3G_3 + x^4G_4 + x^5G_5 + \cdots\]
\[D = G_1 + 2xG_2 + 3x^2G_3 + 4x^3G_4 + 5x^4G_5 + \cdots\]
we can write out what the rhs looks like in somewhat more detail, in terms of commutators of the individual $G_i$.

\[\mathsf{rhs} = G_1 + 2xG_2 + 3x^2G_3+ {\cdots} + {}\]
\[  [G_1 + 2xG_2 + 3x^2G_3+ \cdots, xG_1 + x^2G_2 + x^3G_3 + \cdots] / 2! + {}\]
\[  [[G_1 + 2xG_2 + 3x^2G_3+ \cdots, xG_1 + x^2G_2 + x^3G_3 + \cdots], xG_1 + x^2G_2 + \cdots] / 3! + \]
\[ \cdots\]
so here's what we're going to do:
\begin{enumerate}
\item collect terms together of like degree in $x$
\item define $G_{[ij\cdots k]}$ to be $[[\cdots [G_i,G_j],\cdots],G_k]$
\item define $R_{n+1} = (\partial / \partial x)^{n} \mathsf{rhs} \adjust_{x=0}$
and $L_{n+1} = (\partial / \partial x)^{n} \mathsf{lhs} \adjust_{x=0}$ and observe
$L_n = R_n$.
\item ignore $G_{[11\cdots 1]}$ because they're always zero.
\end{enumerate}
We get:
\[A + B = G_1\]
\[L_1 = [A,B] = 2G_{2}\]
\[L_2 = [L_1, B] = 6G_3 + G_{[12]} + 2G_{[21]} \]
\[L_3 = [L_2, B] = 24G_4 + 3G_{[13]}  + 6G_{[22]} + 9G_{[31]} + G_{[112]} + G_{[121]} + 2G_{[211]}\]
\[L_4 = [L_3, B] = 120G_5 + 12G_{[14]} + 24G_{[23]} + 36G_{[32]} + 48G_{[41]} + {}\]
\[ 4G_{[113]} + 4G_{[131]} + 12G_{[311]} + 4G_{[122]} + 8G_{[221]} + 8G_{[212]} + {}\]
\[ G_{[1112]} + G_{[1121]} + G_{[1211]} + 2G_{[2111]} \]

When $\lambda_1,\ldots,\lambda_k$ satisfy
\begin{itemize}
\item $\forall i . \lambda_i \ge 1$
\item $n = \sum_i \lambda_i$
\end{itemize}
we write $\lambda : (k, n)$.

In general I think what the above is saying is that
\[ A + B = G_1 \]
\[  L_n = \sum_{k = 1}^{n}\sum_{\lambda : (k, n+1)} {\lambda_1 n! \over k!}  G_{[\lambda]} \]

We can rearrange this to emphasize $G_{n+1}$:

\[  (n+1)!G_{n+1} = L_n - \sum_{k = 2}^{n}\sum_{\lambda : (k, n+1)} {\lambda_1 n! \over k!}  G_{[\lambda]}   \]

The recurrences I should have are

\[L_0 = A \qquad L_{n+1} + BL_n = L_nB \]
\[G_{[\lambda n]} + G_nG_{[\lambda]} = G_{[\lambda]} G_n\]

Let's define $H_{[\lambda]} = -G_{[\lambda]}$ when $|\lambda| \ge 2$, then we have the
``definitions'' of $G_i$ and $L_i$ and $H_{[\lambda]}$:

\[  (n+1)!G_{n+1} = L_n + \sum_{k = 2}^{n}\sum_{\lambda : (k, n+1)} {\lambda_1 n! \over k!}  H_{[\lambda]}   \]
\[L_0 = A \qquad L_{n+1} + BL_n = L_nB \]
\[H_{[\lambda n]} + G_nH_{[\lambda]} =  H_{[\lambda]} G_n  \qquad (|\lambda| \ge 2)\]
\[H_{[m n]} + G_{m} G_n = G_nG_{m} \]

Now if we define
\[ (A \oplus B)^n = \sum_{i=0^n}{n\choose i} A^i B^{n-i} \]
we should expect
\[ (A \oplus B)^n = \left({\partial \over \partial x}\right)^n e^{xG_1 + x^2G_2 + x^3G_3 + \cdots }\]
e.g. defining $G_{ijk} = G_iG_jG_k$ I get
\[ (A + B) = G_1 \]
\[ (A \oplus B)^2 = G_{11} + 2G_2 \]
\[ (A \oplus B)^3 = G_{111} + 3G_{21} + 3G_{12} + 6G_3 \]
\[ (A \oplus B)^4 = G_{1111} + 4G_{112} + 4G_{121} + 4G_{211} + 12G_{31} + 12G_{22} + 12G_{13} + 24G_4 \]
Let's see which of these I can show.
\begin{itemize}
\item[$n=1$.]
Trivial.
\item[$n=2$.]
We have $G_1^2 = AA + AB + BA + BB$ and $2G_2 = L_1$. So clearly $AA + AB + BA + BB + L_1 = AA + 2AB + BB$ as required.
\item[$n=3$.]
Let's first look at $6G_3$. We know that's equal to
\[L_2 + \sum_{\lambda:(2, 3)} \lambda_1 H_{[\lambda]}
= L_2 + 2H_{[21]} + H_{[12]}
\]
Let's try to use up these $H$'s. I reckon these will turn our $3G_{21}+3G_{12}$ into $2G_{21} + 4G_{12}$.
I can evaluate that to $LA + LB + 2AL + 2BL$. Now I want to use the $L_2$ to turn this into
$LA + 2LB + 2AL + BL$.
This is finally the right set of ingredients to turn
\[G_1^3 = AAA + AAB + ABA + ABB + BAA + BAB + BBA + BBB\]
into
\[AAA + 3AAB + 3ABB + BBB\]
as required.
\item[$n=4$.]
Let's first look at $24G_4$. We know that's equal to
\[L_3 + \sum_{k = 2}^3 \sum_{\lambda:(k, 4)} {\lambda_1 3!\over k!} H_{[\lambda]}
= L_3 + \sum_{\lambda:(2, 4)} {3\lambda_1} H_{[\lambda]}
+ \sum_{\lambda:(3, 4)} {\lambda_1} H_{[\lambda]}
\]
\[
= L_3 + \sum_{\lambda:(2, 4)} {3\lambda_1} H_{[\lambda]}
+ \sum_{\lambda:(3, 4)} {\lambda_1} H_{[\lambda]}
\]
\[
= L_3 + 3H_{[13]}  + 6H_{[22]} + 9H_{[31]} + H_{[112]} + H_{[121]} + 2H_{[211]}
\]
The remainder of the stuff we have to act on is
\[ G_{1111} + 4G_{112} + 4G_{121} + 4G_{211} + 12G_{31} + 12G_{22} + 12G_{13}\]
Oof I'm kind of anxious about those $H_{[112]}$ with three digits. Can I reduce it to actions
on multiplied $G$'s?
\[ H_{[112]} = -[[G_1, G_1], G_2] = 0 \]
\[ H_{[121]} = -[[G_1, G_2], G_1] = -H_{[211]} \]
so in this case I can ignore them but that's a tiny bit suspect.
What I have now is
\[ = L_3 + 3H_{[13]} + 9H_{[31]}\]
acting on
\[ G_{1111} + 4G_{112} + 4G_{121} + 4G_{211} + 12G_{31} + 12G_{22} + 12G_{13}\]
I know that $H_{[mn]}$ swaps $G_{m}G_{n}$ so what I have now is
\[ G_{1111} + 4G_{112} + 4G_{121} + 4G_{211} + 6G_{31} + 12G_{22} + 18G_{13}\]
Let's expand out the definitions of $G_3$.
\[ G_{1111} + 4G_{112} + 4G_{121} + 4G_{211} + {}\]
\[(L_2 + 2H_{[21]} + H_{[12]})G_1 + 12G_{22} + 3G_1 (L_2 + 2H_{[21]} + H_{[12]})\]
and simplify for net effect:
\[ G_{1111} + 4G_{112} + 4G_{121} + 4G_{211} + {}\]
\[(L_2 + H_{[21]})G_1 + 12G_{22} + 3G_1 (L_2 + H_{[21]})\]
Let's use up those $H_{[21]}$ now:
\[ G_{1111} + 7G_{112} + 2G_{121} + 3G_{211} + {}\]
\[L_2 G_1 + 12G_{22} + 3G_1 L_2 \]
Now what do the $L_2$'s do? $L_2 + BL_1 = L_1B$.
So
\[L_2G_1 + BL_1G_1 = L_1BG_1\]
\[3G_1L_2 + 3G_1BL_1 = 3G_1L_1B\]
which means we compute... ugh this seems wrong. I don't trust these odd numbers.
\end{itemize}


\subsection{More Sandbox}
I need to rework the definition
\[  (n+1)!G_{n+1} = L_n - \sum_{k = 2}^{n}\sum_{\lambda : (k, n+1)} {\lambda_1 n! \over k!}  G_{[\lambda]}   \]
to capture both the $G$-products that $G_{n+1}$ creates and destroys.

Suppose $\lambda = \lambda_1, \ldots,\lambda_k$ is a sequence. We define $M^\sigma(\lambda)$
to be a multiset of sequences for $\sigma \in \{+,-\}$ like so.

\[
M^+(n) = \{n\} \qquad M^-(n) = \emptyset
\]
\[
M^\sigma(\lambda n) = \{ \rho n \st \rho \in M^\sigma(\lambda)\} \cup \{ n \rho  \st \rho \in M^{-\sigma}(\lambda)\}
\]
So for example $M^+(abc) = \{abc, cba\}$ and $M^-(abc) =  \{bac, cab\}$.

Define
\[S^\sigma_{n} = \sum_{k=2}^n \sum_{\lambda :(k, n+1)} \sum_{\rho \in M^\sigma (\lambda)} {\lambda_1 n!\over k!} G_{\rho}\]
Then we can assert more explicit recurrence defining the $G_n$ as
\[ G_1 = A+B \]
\[  (n+1)!G_{n+1} + S^+_{n} = L_n + S^-_{n}  \qquad (n \ge 1)\]
Let's work out the next few.
\[ 2G_2 = L_1 \]
\[ 6G_3 + 2G_{21} + G_{12} = L_2 + 2G_{12} + G_{21}\]
\[ 6G_3 + G_{21}  = L_2 + G_{12} \qquad \hbox {(net)}\]
I wrote some code to compute the following:
\[24G_{4} + 3 G_{13} + 6 G_{22} + 9 G_{31} + 3 G_{112} + 2 G_{121} + 3 G_{211} =\]
\[ L_{3} + 9 G_{13} + 6 G_{22} + 3 G_{31} + 2 G_{112} + 4 G_{121} + 2 G_{211}\]
\[24G_{4} + 6 G_{31} +  G_{112} +  G_{211} =  L_{3} + 6 G_{13} + 2 G_{121} \qquad\hbox{(net)}\]

Going back to the $n=4$ case I have
\[ (A \oplus B)^4 = G_{1111} + 4G_{112} + 4G_{121} + 4G_{211} + 12G_{31} + 12G_{22} + 12G_{13} + 24G_4 \]
and using up the $G_4$ I get
\[  G_{1111} + 3G_{112} + 6G_{121} + 3G_{211} + 6G_{31} + 12G_{22} + 18G_{13} + L_3 \]
Let's try the $G_{3}$ now.
\[ G_{1111} + 6G_{112} + 4G_{121} + 2G_{211} + L_2G_{1} + 12G_{22} + 3G_{1}L_2 + L_3 \]
Looking better than before! Let's try the $L_3$.
\[ G_{1111} + 6G_{112} + 4G_{121} + 2G_{211} + 12G_{22} + L_2A + 3 AL_2 + 2BL_2 + 2L_2B  \]
Ok, let's try the $G_2$s. They turn into $L_1$s dividing by two.
\[ G_{1111} + 3G_{11L} + 2G_{1L1} + G_{L11} + 3L_1L_1 + L_2A + 3 AL_2 + 2BL_2 + 2L_2B  \]
I have to expand out some of these $G_1$'s I guess.
\[ G_{1111} + 3(A+B)^2L_1 + 2(A+B)L_1(A+B) + L_1(A+B)^2 + {}\]
\[ 3L_1L_1 + L_2A + 3 AL_2 + 2BL_2 + 2L_2B  \]
which is
\[ G_{1111} + 3AAL + 3ABL + 3BAL + 3BBL +{}\]
\[  2ALA + 2ALB + 2BLA + 2BLB + {}\]
\[  LAA + LAB + LBA + LBB + {}\]
\[ 3L_1L_1 + L_2A + 3 AL_2 + 2BL_2 + 2L_2B  \]
Let's see what I can do with the $L_2$s. They should each move a $B$ to the right across an $L_1$.
\[ G_{1111} + 3AAL +  3BAL + BBL + 2BLB + {}\]
\[  2ALA + 5ALB + BLA + {}\]
\[  LAA + LAB + 2LBA + 3LBB + {}\]
\[ 3LL    \]
I'ma take a leap of faith and assume the $LL$ applies to $BAL$ even though I have no way of being sure:
\[ G_{1111} + 3AAL +  3ABL + BBL + 2BLB + {}\]
\[  2ALA + 5ALB + BLA + {}\]
\[  LAA + LAB + 2LBA + 3LBB \]
Let's see what happens to $G_{1111}$.

Grr... I didn't turn out right.

% L_2 : BL →  LB
%% function comps(n) {
%%   if (n <= 0) return [[]];
%%   let rv = [];
%%   for (let i = 1; i <= n; i++) {
%%     rv = [...rv, ...comps(n-i).map(c => [...c, i])];
%%   }
%%   return rv;
%% }

%% function perms(comp, sgn) {
%%   if (comp.length == 1) {
%%     return sgn == 1 ? [comp] : [];
%%   }
%%   const prefix = comp.slice(0, comp.length - 1);
%%   const last = comp[comp.length - 1];
%%   return [
%%     ...perms(prefix, -sgn).map(perm => [last, ...perm]),
%%     ...perms(prefix, sgn).map(perm => [...perm, last]),
%%   ];
%% }

%% function factorial(n) {
%%   if (n <= 1) return 1;
%%   return n * factorial(n-1);
%% }

%% function pretty(terms) {
%%   const rv = {};
%%   terms.forEach(term => {
%%     const {coeff, perm} = term;
%%     const k = perm.join(''); // not valid if numbers > 9!
%%     rv[k] = (rv[k] ?? 0) + coeff;
%%   });

%%   return Object.entries(rv).map(([k,v]) => {
%%     return `${v} G_{${k}}`;
%%   }).join(' + ');
%% }

%% function go(m) {
%%   const n = m - 1;
%%   const cs = comps(n+1);
%%   let posTerms = [];
%%   let negTerms = [];
%%   for (let k = 2; k <= n; k++) {
%%     const csk = cs.filter(c => c.length == k); // compositions of k parts, adding to n+1
%%     const nk = factorial(n) / factorial(k);
%%     posTerms = [...posTerms, ...csk.flatMap(c => perms(c,  1).map(perm => ({coeff: c[0] * nk, perm})))];
%%     negTerms = [...negTerms, ...csk.flatMap(c => perms(c, -1).map(perm => ({coeff: c[0] * nk, perm})))];

%%   }
%%   console.log(`${factorial(n+1)}G_{${n+1}} + ${pretty(posTerms)} = L_{${n}} + ${pretty(negTerms)}`);
%% }

%% go(4);

\vskip 1in
\vfil\eject



\[DG =  x(G_1G_1) + x^2(2G_2G_1 + G_1G_2)\]
\[ + x^3(3G_3G_1 + 2G_2G_2 + G_1G_3) \]
\[ + x^4(4G_4G_1 + 3G_3G_2 + 2G_2G_3 + G_1G_4) + \cdots\]
\[GD =  x(G_1G_1) + x^2(2G_1G_2 + G_2G_1)\]
\[ + x^3(3G_1G_3 + 2G_2G_2 + G_3G_1) \]
\[ + x^4(4G_1G_4 + 3G_2G_3 + 2G_3G_2 + G_4G_1) + \cdots \]
\[ [D,G]{1\over 2!} = {1\over 2!}(x[G_1,G_1] +  x^2(2[G_2,G_1] + [G_1,G_2])\]
\[ + x^3(3[G_3,G_1] + 2[G_2,G_2] + [G_1,G_3]) \]
\[ + x^4(4[G_4,G_1] + 3[G_3,G_2] + 2[G_2,G_3] + [G_1,G_4]) + \cdots)\]
\[ [D,G] =  x^2[G_2,G_1]  + 2x^3[G_3,G_1]  + x^4(3[G_4,G_1] + [G_3,G_2] ) + \cdots\]

\[G = xG_1 + x^2G_2 + x^3G_3 + x^4G_4 + x^5G_5 + \cdots\]
\[ [[D,G],G] =  x^3[[G_2,G_1],G_2]  + x^4(2[[G_3,G_1],G_1] + [[G_2,G_1],G_2]) \]
\[ + x^5(3[[G_4,G_1],G_1] + [[G_3,G_2],G_1] + 2[[G_3,G_1],G_2] + [[G_2,G_1],G_3] ) + \cdots\]


\[G = \sum_{n = 1}^\infty x^n G_n\]
\[D = \sum_{n = 1}^\infty nx^{n-1} G_n\]
\[[D, G] = \sum_{n = 2}^\infty \sum_{i+j = n} ix^{n-1} [G_i,  G_j]\]


\[\sum_{k=0}^\infty {1\over(k+1)!}[[D, \overbrace{G]\cdots G}^k] = \]
\[\sum_{k=0}^\infty {1\over(k+1)!}\sum_{n = k}^\infty \sum_{\lambda, \lambda_1,\ldots,\lambda_k \prov n} \lambda x^{n-1} [[G_{\lambda}, G_{\lambda_1} ]\cdots  G_{\lambda_k}]\]

\[\sum_{n = 1}^\infty x^{n-1} \sum_{k=0}^\infty {1\over(k+1)!} \sum_{\lambda, \lambda_1,\ldots,\lambda_k \prov n} \lambda  [[G_{\lambda}, G_{\lambda_1} ]\cdots  G_{\lambda_k}]\]

So I get $1$ coefficient is $G_1 = A + B$, and for the $x$ coefficient, I get
\[ x([G_1,G_1]{1\over 2!} + 2G_2) = 2xG_2 = x[A,B] \]
so $G_2 = [A,B]/2!$. For $x^2$ I get
\[ x^2([[G_1,G_1],G_1]{1\over 3!} + {2\over 2!}[G_2,G_1] + {1\over 2!}[G_1, G_2] + 3G_3) = {x^2\over 2!}[[A,B],B] \]
\[ 2[G_2,G_1] + [G_1, G_2] + 6G_3 = [[A,B],B] \]
so
\[ G_3 = {1\over 3!} ([[A,B],B] - 2[G_2,G_1] - [G_1, G_2] ) \]
\[ = {1\over 3!} ([[A,B],B] - [[A,B], A + B] - 1/2[A + B, [A,B]] ) \]
\[ = {1\over 3!} ([[A,B],B] - [[A,B], A + B]/2  ) \]
\[ = {1\over 12} ([[A,B],B] - [[A,B], A]  ) \]
\[ = {1\over 12} ([[A,B],B] + [[B,A], A]  ) \]

 For $x^3$ I get
\[ x^3([[[G_1,G_1],G_1],G_1]{1\over 4!} + {2\over 3!}[[G_2,G_1],G_1] + {1\over 3!}[[G_1, G_2],G_1] + {3\over 2}[G_3,G_1] \]
\[ + [[G_1,G_1],G_2]{1\over 3!} + {2\over 2!}[G_2,G_2] + {1\over 2!}[G_1, G_3] + 4G_4 )\]
\[= {x^3\over 3!}[[[A,B],B],B] \]
Therefore I need
\[ {2}[[G_2,G_1],G_1] + [[G_1, G_2],G_1] + 9[G_3,G_1] \]
\[ + [[G_1,G_1],G_2] + 6[G_2,G_2] + 3[G_1, G_3] + 24G_4 \]
\[= [[[A,B],B],B] \]

Summarizing a conjecture:
If we have
\[ G_1 = A + B\]
\[  2G_2 = [A,B] \]
\[ 2[G_2,G_1] + [G_1, G_2] + 6G_3 = [[A,B],B] \]
\[ {2}[[G_2,G_1],G_1] + [[G_1, G_2],G_1] + 9[G_3,G_1] \]
\[ + [[G_1,G_1],G_2] + 6[G_2,G_2] + 3[G_1, G_3] + 24G_4 \]
\[= [[[A,B],B],B] \]
and generally something like
\[ [[A,\overbrace{B],\cdots,B}^{n}] = \sum_{k = 1}^{n}\sum_{\lambda_1,\ldots,\lambda_k \prov n+1}
  {\lambda_1 n! \over k!}  [[G_{\lambda_1}, G_{\lambda_2} ]\cdots  G_{\lambda_k}] \]
then
\[e^{xA} e^{xB} = e^{xG_1 + x^2 G_2 + \cdots} \]

\section{Sandbox}
\subsection{Expansion}
Define $[\vec G]$ by
\[ [H] = H \qquad [\vec G H] = [\vec G]H - H[\vec G] \]
Define $E(\vec G)$ by
\[ E(H) = 0 \qquad  E(\vec GH) = E(\vec G)H + H[\vec G]\]

\begin{lemma}
\[[\vec G] + E(\vec G)  = \prod \vec G\]
\end{lemma}
\begin{proof}
By induction. Base case is $H = H$.
For the step case, we want to verify
\[[\vec G H] + E(\vec G H)  = \left(\prod \vec G\right)H\]
This is the same as
\[[\vec G]H - H[\vec G] + E(\vec G) H + H[\vec G]  = \left(\prod \vec G\right)H\]
and this follows by i.h. multiplied on the right by $H$
\cqed
\end{proof}



\subsection{Computations}
Assume
\[ G_1 = A + B\]
\[  2G_2 = [A,B] \]
\[ 2[G_2,G_1] + [G_1, G_2] + 6G_3 = [[A,B],B] \]
\[ {2}[[G_2,G_1],G_1] + [[G_1, G_2],G_1] + 9[G_3,G_1] \]
\[ + [[G_1,G_1],G_2] + 6[G_2,G_2] + 3[G_1, G_3] + 24G_4 \]
\[= [[[A,B],B],B] \]
And assume Lie bracket is defined by $[X,Y] + YX = XY$ for
every $X,Y$ that actually occurs.
Try to show
\[ \sum_{k = 0}^n {n \choose k} A^k B^{n-k} = \sum_{\lambda_1,\ldots,\lambda_k\prov n} {n!\over k!} \prod_{i=1}^k  {G_{\lambda_i}}\]
\subsubsection{$n=1$}
 \[A + B = G_1\]
True by definition.
\subsubsection{$n=2$}
\[A^2 + 2AB + B^2 = G_1^2 + 2G_2\]
Which I can show.
\subsubsection{$n=3$}
\[A^3 + 3A^2B + 3AB^2 + B^3 = G_1^3 + 3G_2G_1 + 3G_1G_2 + 6G_3\]
Here I have to think more carefully. I need to eliminate the $G_3$. Let's try that first.
For that I need $2[G_2,G_1]$ and $[G_1,G_2]$. I can get those by reasoning that
\[ G_2G_1 = [G_2,G_1] + G_1G_2\]
\[ G_1G_2 = [G_1,G_2] + G_2G_1\]
so name the rhs $R$ and compute
\[ R = G_1^3 + 3G_2G_1 + 3G_1G_2 + 6G_3 \]
\[ = G_1^3 + 2G_2G_1 + 4G_1G_2 + 6G_3 + 2[G_2,G_1] + [G_1,G_2]\]
\[ = G_1^3 + 2G_2G_1 + 4G_1G_2 + [[A,B],B]\]
Now we want to start processing away the remaining $G_2$'s.
\[ R = G_1^3 + [A,B]G_1 + 2G_1[A,B] + [[A,B],B]\]
Now we want to focus on processing away the $[[A,B],B]$, so we have to at least
expand the $G_1$'s adjacent to copies of $[A,B]$.
\[ R = G_1^3 + [A,B]A + [A,B]B + 2A[A,B] + 2B[A,B] + [[A,B],B]\]
\[  = G_1^3 + [A,B]A + 2[A,B]B + 2A[A,B] + B[A,B] \]
and if I grind this out I get $(A \oplus B)^3$ as I expect.
\subsubsection{$n=4$}
\[(A \oplus B)^4 = \]
\[ G_1^4 + 4G_2G^2_1 + 4G_1G_2G_1 + 4G_1^2G_2 + 12G_3G_1  + 12G_2G_2 + 12G_1G_3 + 24G_4\]
Let's get rid of the $G_4$ first. What do we need for that? To get to $[[[A,B],B],B]$
we need
\[ {2}[[G_2,G_1],G_1] + [[G_1, G_2],G_1] + 9[G_3,G_1] \]
\[ + [[G_1,G_1],G_2] + 6[G_2,G_2] + 3[G_1, G_3] + 24G_4 \]

The expansion lemma tells us
\[XYZ = YXZ + Z[X,Y] + [[X,Y],Z]\]
So let's do this to the rhs:
\[ 2G_2G_1G_1 \mapsto 2(G_1G_2G_1 + G_1[G_2,G_1] + [[G_2,G_1],G_1])\]
\[ G_1G_2G_1 \mapsto G_2G_1G_1 + G_1[G_1,G_2] + [[G_1,G_2],G_1]\]
\[ G_1G_1G_2 \mapsto G_1G_1G_2 + G_2[G_1,G_1] + [[G_1,G_1],G_2]\]
\[ 9G_3G_1 \mapsto 9(G_1G_3 + [G_3,G_1]) \]
\[ 3G_1G_3 \mapsto 3(G_3G_1 + [G_1,G_3]) \]
\[ 6G_2G_2 \mapsto 6(G_2G_2 + [G_2,G_2]) \]
and after doing that I have $R = $
\[ G_1^4 + 3G_2G^2_1 + 5G_1G_2G_1 + 4G_1^2G_2 + 6G_3G_1  + 12G_2G_2 + 18G_1G_3 \]
\[ + 2G_1[G_2,G_1] + G_1[G_1,G_2] + G_2[G_1,G_1] + [[[A,B],B],B]\]
To eliminate a $G_3$ I need to use
\[ 2[G_2,G_1] + [G_1, G_2] + 6G_3 = [[A,B],B] \]
Thankfully all my $G_3$s come in batches of 6. I wish to execute
\[ 2[G_2,G_1]G_1 + [G_1, G_2]G_1 + 6G_3G_1 = [[A,B],B]G_1 \]
\[ 6G_1[G_2,G_1] + 3G_1[G_1, G_2] + 18G_1G_3 = 3G_1[[A,B],B] \]
For this plan I still need to come up with
\[ 2[G_2,G_1]G_1 + [G_1, G_2]G_1 \]
\[ 4G_1[G_2,G_1] + 2G_1[G_1, G_2] \]

so I execute
\[2G_2G_1G_1 \mapsto 2([G_2,G_1]G_1 + G_1G_2G_1) \]
\[G_1G_2G_1 \mapsto [G_1,G_2]G_1 + G_2G_1G_1 \]
\[4G_1G_2G_1  \mapsto 4(G_1[G_2,G_1] + G_1G_1G_2)\]
\[ 2G_1G_1G_2 \mapsto 2(G_1[G_1, G_2] + G_1G_2G_1) \]
Yielding $R = $
\[ G_1^4 + 2G_2G^2_1 + 4G_1G_2G_1 + 6G_1^2G_2 + 12G_2G_2  \]
\[ + [[A,B],B]G_1  + 3G_1[[A,B],B] + [[[A,B],B],B]\]
And now all the $G_2$ coefficients are even, and I can convert them:
\[ R = G_1^4 + [A,B]G_1G_1 + 2G_1[A,B]G_1 + 3G_1G_1[A,B] + 3[A,B][A,B]  \]
\[ + [[A,B],B]G_1  + 3G_1[[A,B],B] + [[[A,B],B],B]\]
and if we grind out all the Lie brackets and $G_1$s this does become
$(A \oplus B)^4$.
\vfil\eject
\subsection{The Lemma}

\[ G(x) = xG_1 + x^2G_2 + x^3G_3 + \cdots\]
\[ e^{xA}e^{xB} = e^{G(x)}\]
If
\[[A,B] = 2G_2 \]
then
\[AA + 2AB + BB = (A + B)^2 + 2G_2\]
\[AA + 2AB + BB = AA + AB + BA + BB + 2G_2\]

\[AAA + 3AAB + 3ABB + BBB = (A + B)^3 + 3G_1G_2 + 3G_2G_1 + 6G_3\]


We use $\lambda$ to stand for a composition $\lambda_1,\ldots,\lambda_k$ with $k$ parts.
When $\lambda$ has $k$ parts and sums to $n$ we write $\lambda : k,n$.
\[e^{-xB}e^{-xA}(d/dx) e^{xA}e^{xB} =e^{-G(x)}(d/dx) e^{G(x)}\]
Let \[G_{[\lambda_1,\ldots, \lambda_k]} = [[G_{\lambda_1}, G_{\lambda_2} ]\cdots  G_{\lambda_k}]\]
 \[G_{\lambda_1,\ldots, \lambda_k} = G_{\lambda_1} G_{\lambda_2} \cdots  G_{\lambda_k}\]
\begin{lemma}
Suppose for every $n$ that
\[ [[A,\overbrace{B],\cdots,B}^{n}] = \sum_{k = 1}^{n}\sum_{\lambda : k, n+1}
  {\lambda_1 n! \over k!}  G_{[\lambda]} \]
and all relevant Lie brackets exist and have the property that
\[ [X,Y] + YX = XY \]
Then
\[ \sum_{k = 0}^n {n \choose k} A^k B^{n-k} = \sum_{\lambda : k,n} {n!\over k!}  G_\lambda\]
\[ e^{xA}e^{xB} = e^{G(x)}\]
\end{lemma}

\begin{proof}
\[e^{(xG_1+x^2G_2 + x^3G_3 + \cdots)}\]
\[ 1 + (xG_1+x^2G_2 + x^3G_3 + \cdots) + (xG_1+x^2G_2 + x^3G_3 + \cdots)^2{1\over 2}\]
\[+ (xG_1+x^2G_2 + x^3G_3 + \cdots)^3{1\over 6}\]
\[ {x^{14}\over 14!}G_3 G_9 G_2 {14!\over 3!} \]
\cqed
\end{proof}


\subsection{An Alternate Characterization of $G$s}
We start with
\[ G_1 = A + B\]
\[  2G_2 = [A,B] \]
\[ 2[G_2,G_1] + [G_1, G_2] + 6G_3 = [[A,B],B] \]
\[ {2}[[G_2,G_1],G_1] + [[G_1, G_2],G_1] + 9[G_3,G_1] \]
\[ + [[G_1,G_1],G_2] + 6[G_2,G_2] + 3[G_1, G_3] + 24G_4 \]
\[= [[[A,B],B],B] \]
and try to move things to one side, and expand out the Lie brackets. We get
\[ G_1 = A + B\]
\[ 2G_2 = AB - BA\]
\[ 6G_3 + G_{21} + 2BAB = G_{12} + ABB + BBA \]
\[ 24G_4 + G_{211} + G_{112} + 6G_{31} + 3BABB + BBBA = 2G_{121} + ABBB + 3BBAB \]

The computations for the 1 and 2 case are obvious. For 3,
I try starting with
\[ G_1^3 + 3G_{12}  + 3G_{21} + 6G_3\]
and I note I {\em cannot} immediately consume $2BAB$. So maybe I want to postpone the $A,B$ commutators.
Let's just say $L_n = [[A,\overbrace{B],\cdots,B}^{n}]$ and
\[ G_1 = A + B\]
\[ 2G_2 = L_1 \]
\[ 6G_3 + G_{21} = G_{12} + L_2 \]
\[ 24G_4 + G_{211} + G_{112} + 6G_{31} = 2G_{121} + 6G_{13} + L_3 \]

Then I'd get
\subsubsection{3}
Start with
\[ G_1^3 + 3G_{12}  + 3G_{21} + 6G_3\]
and move to
\[ G_1^3 + 4G_{12}  + 2G_{21} + L_2\]
and from there
\[ G_1^3 + 2G_{1}L_1  + L_1G_{1} + L_2\]
and I think I can resolve that.
\subsubsection{4}
\[ 6G_3 + G_{21} = G_{12} + L_2 \]
\[ 24G_4 + G_{211} + G_{112} + 6G_{31} = 2G_{121} + 6G_{13} + L_3 \]

{\hrule}

Start with
\[ G_1^4 + 4G_{121}  + 4G_{211} + 12G_{31}
 + 4G_{112} + 12G_{13}  + 12G_{22} + 24G_4\]
and go (processing $G_4$) to
\[ G_1^4 + 6G_{121}  + 3G_{211} + 6G_{31}  + 3G_{112} + 18G_{13}  + 12G_{22} + L_3\]
and go (processing $G_3$) to
\[ G_1^4 + 4G_{121}  + 2G_{211} + L_2G_1  + 6G_{112} + 3G_1L_2 + 12G_{22} + L_3\]
and go (processing $G_2$) to
\[ G_1^4 + 2G_{1}L_1G_1  + L_1G_{11} + L_2G_1  + 3G_{11}L_1 + 3G_1L_2 + 3L_1L_1 + L_3\]

\subsubsection{Generalizing}
\begin{lemma}
\[[[A,\overbrace{B],\cdots,B}^{n}] = \sum_{k = 0}^n {n \choose k}(-1)^k B^k A B^{n-k}\]
\end{lemma}
\begin{proof}
By induction. Step case looks like
\[ \left[\sum_{k = 0}^n {n \choose k}(-1)^k B^k A B^{n-k},B\right] \]
\[= \left(\sum_{k = 0}^n {n \choose k}(-1)^k B^k A B^{n-k}\right)B - B\left(\sum_{k = 0}^n {n \choose k}(-1)^k B^k A B^{n-k}\right)\]
\[=  \left(\sum_{k = 0}^n {n \choose k}(-1)^k B^k A B^{n+1-k}\right) - \left(\sum_{k = 0}^n {n \choose k}(-1)^k B^{k+1} A B^{n-k}\right)\]
\[=  \left(\sum_{k = 0}^n {n \choose k}(-1)^k B^k A B^{n+1-k}\right) + \left(\sum_{k = 1}^{n-1} {n \choose k-1}(-1)^k B^{k} A B^{n+1-k}\right)\]
\[=  \left(\sum_{k = 0}^{n+1} \left({n \choose k}+{n \choose k-1}\right)(-1)^k B^k A B^{n+1-k}\right)\]
\[=  \left(\sum_{k = 0}^{n+1} {n+1 \choose k}(-1)^k B^k A B^{n+1-k}\right)\]
\cqed
\end{proof}

For example,
\[ [[[[A, B], B], B], B] = AB^4 - 4BAB^3 + 6B^2AB^2 - 4B^3AB + B^4A\]

\subsection{Trying To Come up with a Recurrence}

There are three kinds of states. $S$ is a list of positive integers.
\def\here#1{\underline{#1}}
\[\pm \here n\]
\[ \pm S  \here n\]
\[\pm  \here n S\]
Here are the possible transitions:
\[ C[\here n]  \mapsto C[\here{n+1}] \]
\[ X \mapsto -\here 1 X^- \]
\[ X \mapsto X^-\here 1 \]

\subsection{Some More Conjectures}

\subsubsection{Complicated}
Let $A_0, \ldots, A_n$ be given. Associate a constant $a_i$ with each $A_i$.
Let
\[[A] = [A_0, \ldots, A_n] = [\cdots[[A_0, A_1], A_2]\cdots, A_n]\]
\[[A]' = a_0[A_0, \ldots, A_n] \]
For $\pi\in S_{n+1}$, let $\pi (A_1, \ldots, A_n) = A_{\pi 1}, \ldots, A_{\pi n}$.
I want to conjecture that

\[ \sum_{\pi \in S_{n+1}} [\pi A]' = \sum_{\pi \in S_{n+1}} \left(\sum_{k = 0}^n  (-1)^k {n\choose k} a_{\pi k}\right) \prod_{i = 0}^n A_{\pi i}\]

\subsubsection{Simple}

I think I directly see the pattern in how the Lie brackets of many $G$s resolve into simple product of $G$s.
If $\lambda_0,\ldots,\lambda_k$ is a composition of $n$, then the coefficient of $G_{\lambda_0,\ldots,\lambda_k}$ in
\[  \sum_{k = 1}^{n}\sum_{\lambda : k, n+1} {\lambda_1 n! \over k!}  G_{[\lambda]} \]
is
\[ \sum_{i=0}^k (-1)^i{k \choose i}\lambda_i \]
So what I'm saying I think is
\[  \sum_{k = 1}^{n}\sum_{\lambda : k, n+1} {\lambda_1 n! \over k!}  G_{[\lambda]}
= \sum_{\lambda : k+1, n} G_\lambda { n! \over k!} \sum_{i=0}^k (-1)^i{k \choose i}\lambda_i\]
But maybe this has some off-by-one errors. Let's be careful.

The parameter $n$ should be at least $2$. When $n=2$, I want to be talking about 2$G_2$ on both sides.
But it looks like actually $n=1$ is what gives me that on the left. So let's revise to

\[  \sum_{k = 1}^{n-1}\sum_{\lambda : k, n} {\lambda_1 (n-1)! \over k!}  G_{[\lambda]}
= \sum_{\lambda : k+1, n} G_\lambda { n! \over k!} \sum_{i=0}^k (-1)^i{k \choose i}\lambda_i\]

Let's make sure I'm consistently using $0$-indexed compositions on both sides as well:
\[  \sum_{k = 1}^{n-1}\sum_{\lambda : k, n} {\lambda_0 (n-1)! \over k!}  G_{[\lambda]}
 = \sum_{\lambda : k+1, n} G_\lambda { n! \over k!} \sum_{i=0}^k (-1)^i{k \choose i}\lambda_i\]
I think it's still ok to say $\lambda : k,n$ to say that composition $\lambda$ has $k$ parts
(numbered $0\ldots (k-1)$) and sums to $n$. Let's fill in the missing sum on the right:
\[  \sum_{k = 1}^{n-1}\sum_{\lambda : k, n} {\lambda_0 (n-1)! \over k!}  G_{[\lambda]}
 = \sum_{k = 1}^{n-1} \sum_{\lambda : k, n} G_\lambda { n! \over (k-1)!} \sum_{i=0}^{k-1} (-1)^i{k-1 \choose i}\lambda_i\]
This is a bit of a mess. Let me just unpack the expression on the left first.
\[\begin{array}{ll}
  n & L(n)\\
\hline
2 & 2G_{2} \\
3 & 6G_{3} + 2[G_2,G_1] + [G_1,G_2] \\
4 & 24G_{4} + 9[G_3,G_1] + 3[G_1,G_3] + 6[G_2,G_2]  \\
& + [[G_1,G_1],G_2] + [[G_1,G_2],G_1] + 2[[G_2,G_1],G_1]\\
\end{array}\]
And on the right I hope to end up with
\[\begin{array}{ll}
  n & R(n)\\
\hline
2 & 2G_2 \\
3 & 6G_3 + G_2G_1 - G_1G_2 \\
4 & 24G_4 + 6G_3G_1 - 6G_1G_3   \\
&  + G_1G_1G_2  - 2 G_1G_2G_1 + G_2G_1G_1\\
\end{array}\]
So I think I need to adjust to
\[  \sum_{k = 1}^{n-1}\sum_{\lambda : k, n} { (n-1)! \over k!}G_{[\lambda]}\lambda_0
  = \sum_{k = 1}^{n-1} \sum_{\lambda : k, n}  { (n-1)! \over k!} G_\lambda\sum_{i=0}^{k-1} (-1)^i{k-1 \choose i}\lambda_i\]
and I think I can strengthen this claim to saying that for {\bf all} $k \in [1,n-1]$, we have
\[  \sum_{\lambda : k, n} G_{[\lambda]}\lambda_0
  = \sum_{\lambda : k, n}   G_\lambda\sum_{i=0}^{k-1} (-1)^i{k-1 \choose i}\lambda_i\]


I think this is immediately true for $k=1$ and $n\ge 2$. Let's see how it works for $k = 2$.

\[  \sum_{p = 1}^{n-1}  p [G_p, G_{n-p} ]
  = \sum_{p =1}^{n-1}    G_p G_{n-p} (2p - n)\]
Let's see what happens for $n=5$.

\[    [G_1, G_4] + 2[G_2,G_3] + 3[G_3,G_2] + 4[G_4,G_1]\]
\[  =   -3 G_1 G_4 -  G_2 G_3 + G_3 G_2 + 3 G_4 G_1\]
Checks out so far!

I think this is a good target lemma to prove:
\begin{lemma}
\[  \sum_{\lambda : k, n} G_{[\lambda]}\lambda_0
  = \sum_{\lambda : k, n}   G_\lambda\sum_{i=0}^{k-1} (-1)^i{k-1 \choose i}\lambda_i\]
\end{lemma}

\begin{proof}
?
\cqed
\end{proof}

\begin{corollary}
\[  \sum_{k = 1}^{n-1}\sum_{\lambda : k, n} { (n-1)! \over k!}G_{[\lambda]}\lambda_0
  = \sum_{k = 1}^{n-1} \sum_{\lambda : k, n}  { (n-1)! \over k!} G_\lambda\sum_{i=0}^{k-1} (-1)^i{k-1 \choose i}\lambda_i\]
\end{corollary}

Note that either side of the equation in the corollary is what we want to set equal to
\[L_n = [[A,\overbrace{B],\cdots,B}^{n-1}] \]
We could also interpret the minus signs across the equation.

\subsection{The Lemma, Take 2}
We use $\lambda$ to stand for a composition $\lambda_1,\ldots,\lambda_k$ with $k$ parts.
When $\lambda$ has $k$ parts and sums to $n$ we write $\lambda : k,n$.
Let \[G_{[\lambda_1,\ldots, \lambda_k]} = [[G_{\lambda_1}, G_{\lambda_2} ]\cdots  G_{\lambda_k}]\]
 \[G_{\lambda_1,\ldots, \lambda_k} = G_{\lambda_1} G_{\lambda_2} \cdots  G_{\lambda_k}\]
Let
\[T_n(r) = \sum_{k = 1}^{n-1} \sum_{\lambda : k, n}  { (n-1)! \over k!} G_\lambda\sum_{i=0}^{k-1} [i \in \N_r] {k-1 \choose i}\lambda_i\]
where $r\in\{0,1\}$ and $\N_0$ is the even numbers and $\N_1$ is the odd numbers.

\begin{lemma}
If
\[ L_n + T_n(1) = T_n(0)\]
and
\[ L_0 = A \qquad L_{n+1} + BL_n = L_nB\]
Then
\[ \sum_{k = 0}^n {n \choose k} A^k B^{n-k} = \sum_{\lambda : k,n} {n!\over k!}  G_\lambda\]
\end{lemma}

\begin{proof}

\cqed
\end{proof}

\section{Reducing $G$ to $AB$}

I know
\[ G_1 = A + B\]
\[ 2G_2 = [A,B] \]
\[ 6G_3 = [A,G_2] + [G_2, B]\]

\vfil\eject
\section{Cutoff Lemmas}

Let's say $\lambda:(k,n,m)$ for $\lambda$ is an ordered partition in $k$ parts, summing to $n$,
with no part greater than $m$.
\subsection{Cut off at $G_1$}
Suppose $A, B$ are relations, and $AB = BA$. We seek $G_1$ such that for all $n$
\[  (A \oplus B)^n = \sum_{k}\sum_{\lambda : (k, n, 1)} {n!\over k!}\prod_{i=0}^{k-1} G_{\lambda_i}\]
When $n=1$, we find $A + B = G_1$.
Since $A$ and $B$ commute, this works in general.

\subsection{Cut off at $G_2$}
Suppose $A, B$ are relations,
We set $G_1 = A +B$ and seek some constraints on $G_2$  such that for all $n$
\[  (A \oplus B)^n = \sum_{k} \sum_{\lambda : (k, n, 2)} {n!\over k!}\prod_{i=0}^{k-1} G_{\lambda_i}\]

Or we can use an alternate special-case characterization (because we're cutting off at $G_2$)
for the general partition expression above, and instead seek
\[  (A \oplus B)^n =\sum_{p} {n!\over (n-2p)!p! }G_1^{n-2p}G_2^p \]
%% so a few examples of what we're trying to show is
%% \[  A \oplus B = A + B \]
%% \[  (A \oplus B)^2 = (A + B)^2 + L  \]
%% \[  (A \oplus B)^3 = (A + B)^3 + 3(A+B)L  \]
%% \[  (A \oplus B)^4 = (A + B)^4 + 6L(A+B)^2 + 3LL  \]
%% \[  (A \oplus B)^5 = (A + B)^5 + 10(A+B)^3 L + 15(A+B) LL  \]
%% \[  (A \oplus B)^6 = (A + B)^6 + 15(A+B)^4 L + 45(A+B)^2 LL + 15LLL\]

First we show a lemma about $(A\oplus B)^n$:
\begin{lemma}
Suppose $A, B, L$ are relations, assume $L$ commutes with $A,B$.
Define $Z_0 = 1$ and $Z_{n+1} = AZ_n + Z_nB$.
Define $P(n)$ to be the following proposition:
 \[Z_{n+2} = Z_{n+1}(A+B) + (n+1)LZ_n  \]
If $P(0)$, then $\forall n . P(n)$.
\label{littlun}
\end{lemma}
\begin{proof}
By induction on $n$. Assuming $P(n)$, we show $P(n+1)$, by reasoning
\[ Z_{n+3} = AZ_{n+2} + Z_{n+2}B  \]
\[= A(Z_{n+1}(A+B) + nLZ_{n}) + (Z_{n+1}(A+B) + (n+1)LZ_{n})B  \]
\[= AZ_{n+1}(A+B) + Z_{n+1}(A+B)B +  (n+1)LZ_{n+1} \]
\[= AZ_{n+1}(A+B) + Z_{n+1}B(A+B) +  (n+2)LZ_{n+1} \]
\[= Z_{n+2}(A+B) + (n+2)LZ_{n+1} \]
\cqed
\end{proof}

For the following, suppose $G_1, G_2$ are relations that commute with one another, and define
\[F(n) =  \sum_{\{p\st 2p \le n\}} {n!\over (n-2p)!p! }G_1^{n-2p}G_2^p\]
Say $Q(n)$ means $Z_n = F(n)$.
We show a recurrence that $F$ satisfies.
\begin{lemma}
\label{bigun} $F(n+2) = F(n+1)G_1 + 2(n+1)G_2F(n)$
\end{lemma}

\begin{proof}
\[F(n+1)G_1 + 2(n+1)G_2F(n)\]
\[= \left(\sum_{\{p\st 2p \le n+1\}} {(n+1)!\over (n+1-2p)!p! }G_1^{n+1-2p}G_2^p\right)G_1 +{}\]
\[2(n+1)G_2\left(\sum_{\{p\st 2p \le n\}} {n!\over (n-2p)!p! }G_1^{n-2p}G_2^p\right)\]
\[= \left(\sum_{\{p\st 2p \le n+1\}} {(n+1)!\over (n+1-2p)!p! }G_1^{n+2-2p}G_2^p\right) +{}\]
\[2(n+1)\left(\sum_{\{p\st 2p \le n\}} {n!\over (n-2p)!p! }G_1^{n-2p}G_2^{p+1}\right)\]
\[= \left(\sum_{\{p\st 2p \le n+1\}} {(n+1)!\over (n+1-2p)!p! }G_1^{n+2-2p}G_2^p\right) +{}\]
\[2(n+1)\left(\sum_{\{p\st 2p \le n+2\}} {n!\over (n+2-2p)!(p-1)! }G_1^{n+2-2p}G_2^{p}\right)\]
\[= \sum_{\{p\st 2p \le n+2\}} {(n+1)!\over (n+1-2p)!p! }G_1^{n+2-2p}G_2^p+
 {2(n+1)n!\over (n+2-2p)!(p-1)! }G_1^{n+2-2p}G_2^{p}\]
\[= \sum_{\{p\st 2p \le n+2\}} \left({(n+1)!\over (n+1-2p)!p!} +
 {2(n+1)n!\over (n+2-2p)!(p-1)! }\right)G_1^{n+2-2p}G_2^{p}\]
\[= \sum_{\{p\st 2p \le n+2\}} \left({(n+1)!(n+2-2p)\over (n+2-2p)!p!} +
 {2(n+1)!p\over (n+2-2p)!p! }\right)G_1^{n+2-2p}G_2^{p}\]
\[= \sum_{\{p\st 2p \le n+2\}} {(n+2)!\over (n+2-2p)!p! }G_1^{n+2-2p}G_2^p \]
\[= F(n+2)\]
\cqed
\end{proof}


\begin{corollary}
If $Q(1)$ and $Q(2)$, then $\forall n . Q(n)$.
\end{corollary}

\begin{proof}
 By induction on $n$. True by assumption for $n = 1,2$.
Suppose $Q(n)$ and $Q(n+1)$. This means $G_1 = A+B$ and $(A \oplus B)^2 = (A+B)^2 + 2G_2$,
which makes $2G_2$ a valid $L$ in Lemma~\ref{littlun}.
We show $Q(n+1)$.
\begin{tabbing}
$ F(n+2) = F(n+1)G_1 + 2(n+1)G_2F(n)$\`Lemma~\ref{bigun}\\
$= Z_{n+1}G_1 + 2(n+1)G_2Z_n$\`i.h.\\
$= Z_{n+2}$\`Lemma~\ref{littlun}
\end{tabbing}
as required. \cqed

\section{Thinking Ahead}


Imagine a world where I cut off at $G_3$.
Suppose I know that $G_3$ commutes with everything, and
\[A+B = G_1\]
\[(A\oplus B)^2 = 2G_{2} + G_{11}\]
\[(A\oplus B)^3 = 6G_{3} + 3G_{21} + 3G_{12} + G_{111} \]
and I want to show
\[(A\oplus B)^4 = 24G_{31} + 12G_{22} + 4G_{211} + 4G_{112} + 4G_{121} + G_{1111}\]
Define  $\Z[G] = AG + GB$.
I could first try to reason that
\[(A\oplus B)^4 = \Z[(A\oplus B)^3]\]
\[ = 6\Z[G_{3}] + 3\Z[G_{21}] + 3\Z[G_{12}] + \Z[G_{111}]\]

I think I know that $AG_1 = G_1A + 2G_2$,  which would mean
\[ AG_{111}  = 2G_{211}+ 2G_{121} + 2G_{112} + G_{111}A\]
\[ \Z[G_{111}]  = 2G_{211}+ 2G_{121} + 2G_{112} + G_{1111}\]
Now sort of $G_3 = ([A,[A,B]] + [B,[B,A]])/12$.
So $12G_3 = A[A,B] - [A,B]A - B[A,B] + [A,B]B$.
So $6G_3 = AG_2 - G_2A - BG_2 + G_2B$.
So I expect
\[6G_{3a} + G_2A  = AG_2  \eqno(*a)\]
\[6G_{3b} +  BG_2 = G_2B\eqno(*b)\]
Now I reason that

\[ 3AG_2G_1\]
\[ = AG_2G_1 + 12G_{3a}G_1 + 2G_2AG_1\]
\[ = 12G_{3a}G_1 + 2G_{22} + AG_2G_1 +  G_2AG_1 + G_2G_1A\]

\[ 3AG_1G_2\]
\[ = AG_1G_2 + 4G_{22} + 2G_1AG_2\]
\[ = 6G_1G_{3a} + 4G_{22} + AG_1G_2 +  G_1AG_2 + G_1G_2A\]

\[ 3G_2G_1B\]
\[ = 4G_{22} + 2G_2BG_1 + G_2G_1B\]
\[ = 4G_{22} + 6G_{3b}G_1 + BG_2G_1 + G_2BG_1 + G_2G_1B\]

\[ 3G_1G_2B\]
\[ = 12G_{3b}G_1 + 2G_1BG_2 + G_1G_2B\]
\[ = 2G_{22} + 12G_1G_{3b} + BG_1G_2 + G_1BG_2 + G_1G_2B\]
Hence what we know is
\[3\Z[G_{21}] + 3\Z[G_{12}] = 18G_{31} + 12G_{22} + 2G_{211} + 2G_{121} + 2G_{112}\]
\[ \Z[G_{111}]  = 2G_{211}+ 2G_{121} + 2G_{112} + G_{1111}\]
so indeed
\[ 6\Z[G_{3}] + 3\Z[G_{21}] + 3\Z[G_{12}] + \Z[G_{111}] = \]
\[ 6G_{31} + 3\Z[G_{21}] + 3\Z[G_{12}] + \Z[G_{111}] = \]
\[ = 24G_{31} + 12G_{22} + 4G_{211} + 4G_{112} + 4G_{121} + G_{1111}\]
\vfil\eject
\section{From Scratch}

I think I'm always going to want to be able to push $A$'s to the right
and $B$'s to the left. So I think I want two kinds of type constructors, $L$ and $M$.
The intent is
\[L[X] \approx [A,X] \qquad M[X] \approx [X,B]\]
so I define
\[L[X] + XA = AX \qquad M[X] + BX = XB \]
My goal is still to get
\[ (A+B) = G_{1}\]
\[ (A\oplus B)^2 = 2G_2 + G_{11}\]
\[ (A\oplus B)^3 = 6G_3 + 3G_{(21)} + G_{111}\]
\[ (A\oplus B)^4 = 24G_{4} + 12G_{(31)} + 12G_{22} + 4G_{(211)} + G_{1111}\]
\[ (A\oplus B)^5 = 120G_{5} + 60G_{(41)} + 60G_{(23)} + 20G_{(221)} + 5G_{(2111)} + G_{11111}\]
etc.
I seem to know that
\[2G_2 = L[B] = M[A] = L[G_1] = M[G_1]\]
\[12G_3 = LL[B] + MM[A] \qquad 6G_3 = L[G_2] + M[G_2]\]

\subsection{$n=2$}
Need to show that $\Z[G_1] = 2G_2 + G_{11}$. Easy.
$AG_1 = G_1A + L[G_1]$ so $AG_1 + G_1B = G_1(A+B) + L[G_1] = G_{11} + 2G_2$.
\subsection{$n=3$}
Need to show that $2\Z[G_2] + \Z[G_{11}] = 6G_3 + 3G_{(21)} + G_{111}$.
It's fairly easy to see that
\[2\Z[G_2] = G_{12} + G_{21} + L[G_2] + M[G_2] \]
\[\Z[G_{11}] = AG_{11} + G_{11}B = L[G_1]G_1 + G_{1}AG_{1} + G_{11}B \]
\[ = L[G_1]G_1 + G_1L[G_1] + G_{11}A + G_{11}B \]
\[ = L[G_1]G_1 + G_1L[G_1] + G_{111} \]
\[ = 2G_{21} + 2G_{21} + G_{111} \]
From this we find out $6G_3 = L[G_2] + M[G_2]$ because that's what's left over, I guess.
\subsection{$n=4$}
Need to show that
\[6\Z[G_3] + 3\Z[G_{(21)}] + \Z[G_{111}]
=
24G_{4} + 12G_{(31)} + 12G_{22} + 4G_{(211)} + G_{1111}\]

What choices do I have? I know in general
\[\Z[G_{ij}] = G_{1ij} + M[G_i]G_j + G_iM[G_j]  \]
\[\Z[G_{ij}] = G_{i1j} + L[G_i]G_j + G_iM[G_j] \]
\[\Z[G_{ij}] = G_{ij1} + L[G_i]G_j + G_iL[G_j] \]
so in particular
\[\Z[G_{21}] = G_{121} + M[G_2]G_1 + G_2M[G_1]  \]
\[ = G_{211} + L[G_2]G_1 + G_2M[G_1] \]
\[ = G_{211} + L[G_2]G_1 + G_2L[G_1] \]
and
\[\Z[G_{12}] = G_{112} + M[G_1]G_2 + G_1M[G_2]  \]
\[ = G_{112} + L[G_1]G_2 + G_1M[G_2] \]
\[ = G_{121} + L[G_1]G_2 + G_1L[G_2] \]
All right; I have $3\Z[G_{(21)}]$. I thought it was appropriate to take one of each
of these six possibilities, but now I want to see if I can do something more asymmetric.
I know I need to wind up with $2G_{(211)}$, though, so I can't be too asymmetric.
\[3\Z[G_{(21)}] = 2G_{(211)} + M_2G_1 + G_2M_1 +2L_2G_1 + 2G_2M_1 + {}\]
\[ 2M_1G_2 + 2G_1M_2 + L_1G_2 + G_1L_2\]

\[= 12G_{22} + 2G_{(211)} + M_2G_1 + 2L_2G_1 + 2G_1M_2 + G_1L_2\]
Now I wish I lived in $\mathbb{Q}$ and that
\[[L_2, G_1] = [M_2, G_1]\] because then
\[L_2G_1 + G_1M_2 = M_2G_1 + G_1L_2\]
and
\[M_2G_1 + 2L_2G_1 + 2G_1M_2 + G_1L_2 = (3/2)(M_2G_1 + L_2G_1 + G_1M_2 + G_1L_2)\]
\[= (3/2)6(G_{31} + G_{13})\]
\[= 9G_{(31)}\]
because that would let me finish the case.

For I can see
\[6\Z[G_{3}] = 3G_{(31)} + 3L[G_3] + 3M[G_3] \]
and
\[\Z[G_{111}] =  2G_{(211)} + G_{1111} \]


\[3\Z[G_{(21)}] =  3\Z[G_{21}] + 3\Z[G_{12}]\]
\[= 2L[G_2]G_1 + G_2L[G_1] + 2G_2M[G_1] + M[G_2]G_1 \]
\[ + 2L[G_1]G_2 + G_1L[G_2] + 2G_1M[G_2] + M[G_1]G_2 \]
\[ + 2G_{(211)} \]
\[= 12G_{22} + 2L[G_2]G_1 + M[G_2]G_1  + G_1L[G_2] + 2G_1M[G_2] + 2G_{(211)} \]
\[= 12G_{22} + 6G_{31} + 6G_{13} + L[G_2]G_1 + G_1M[G_2] + 2G_{(211)} \]


We seem to need that
\[ 24G_4 + 3G_{31} + 3G_{13} = L[G_3] + M[G_3] + L[G_2]G_1 + G_1M[G_2]\]
I wonder if I can massage this into something more sensible.
\[ 24G_4 + M[G_2]G_1 + G_1L[G_2]  = L[G_3] + M[G_3] + 3G_{31} + 3G_{13}\]
\[ 24G_4  = L[G_3] + M[G_3] + 3G_{31} + 3G_{13} + (-M)[G_2]G_1 + G_1(-L)[G_2] \]
Dunno, this is pretty messy.
\end{proof}
\section{Only Pushing $A$s to the right}
Still trying to figure out something with less ambiguity.
Assert that I can hereditarily form Lie brackets of any $G_i$, and $A$.
My goal is to find $G_i$ such that
\[ (A+B) = G_{1}\]
\[ (A\oplus B)^2 = 2G_2 + G_{11}\]
\[ (A\oplus B)^3 = 6G_3 + 3G_{(21)} + G_{111}\]
\[ (A\oplus B)^4 = 24G_{4} + 12G_{(31)} + 12G_{22} + 4G_{(211)} + G_{1111}\]
\[ (A\oplus B)^5 = 120G_{5} + 60G_{(41)} + 60G_{(23)} + 20G_{(221)} + 5G_{(2111)} + G_{11111}\]
\subsection{$n=1$}
 I know
\[\color{blue}G_1 = A + B\]
 Great.

\subsection{$n=2$}
 I try to show $\Z[G_1] = AG_1 + G_1B = 2G_2 + G_{11}$.
So I push an $A$ to the right and get $G_{11} + [A,G_1] = 2G_2 + G_{11}$. I infer
\[\color{blue} 2G_2 = [A,G_1]\]
Great.

\subsection{$n=3$}
I'm going to guess that I know
\[\color{blue} 6G_3  = 2[A, G_2] + [G_2, G_1] \]
I want to show
\[2\Z[G_2] + \Z[G_{11}] = 6G_3 + 3G_{(21)} + G_{111}\]
so observe
\[ 2\Z[G_{2}] = 2[A,G_2] + 2G_{21} \]
\[ \Z[G_{11}] = [A,G_1]G_1 + G_1[A,G_1] + G_{111} \]
so we can reason
\[2[A,G_2] + 2G_{21}  + [A,G_1]G_1 + G_1[A,G_1] + G_{111} = \]
\[2[A,G_2] + 4G_{21} + 2G_{12} + G_{111} = \]
\[2[A,G_2] + [G_2,G_1] + 3G_{21} + 3G_{12} + G_{111} = \]
\[6G_3 + 3G_{21} + 3G_{12} + G_{111} \]


\subsection{$n=4$}
I'm going to guess that I know
\[\color{blue}24G_4 = 6[A, G_3] + [[A, G_2], G_1]\]
I want to show
\[6\Z[G_3] + 3\Z[G_{(21)}] + \Z[G_{111}] =
24G_{4} + 12G_{(31)} + 12G_{22} + 4G_{(211)} + G_{1111}\]
so observe
\[6\Z[G_{3}] = 6[A,G_3] + 6G_{31}\]
\[3\Z[G_{(21)}] = 3([A,G_2]G_1 +  G_2[A,G_1] + G_{211} + [A,G_1]G_2 +  G_1[A,G_2] + G_{121})\]
\[ = 12G_{22} + 3([A,G_2]G_1 +   G_{211} +   G_1[A,G_2] + G_{121})\]
\[\Z[G_{111}] =  2G_{(211)} + G_{1111} \]
so we reason
\[6\Z[G_3] + 3\Z[G_{(21)}] + \Z[G_{111}] \]
\[= 6[A,G_3] + 6G_{31} + {}\]
\[12G_{22} + 3([A,G_2]G_1 +   G_{211} +   G_1[A,G_2] + G_{121}) + {}\]
\[2G_{(211)} + G_{1111}\]
by just unpacking all the $[A,\dash]$, and collecting up the $[A,G_1] = 2G_2$.
Now I want to get to the right level of $G_{(211)}$ so I permute those around.
This consists of pushing enough $G_2$ to the right, past $G_1$. I get
\[= 6[A,G_3] + 6G_{31} + {}\]
\[12G_{22} + 3[A,G_2]G_1 +  [G_2,G_1]G_1 + 3G_1[A,G_2] + 2G_{1}[G_2,G_1] + {}\]
\[4G_{(211)} + G_{1111}\]
Now my goal is to collect all the $2[A,G_2] +[G_2,G_1] = 6G_3$ that I can.
I notice that the levels of $[G_2,G_1]$ are already correct; I just need to permute one $[A,G_2]$
across a $G_1$ to get things balanced:
\[= 6[A,G_3] + 6G_{31} + {}\]
\[12G_{22} + 2[A,G_2]G_1 +  [G_2,G_1]G_1 + 4G_1[A,G_2] + [[A,G_2],G_1] + 2G_{1}[G_2,G_1] + {}\]
\[4G_{(211)} + G_{1111}\]
\[= 6[A,G_3] + 12G_{31} + 12G_{13} + 12G_{22} +   [[A,G_2],G_1]  + 4G_{(211)} + G_{1111}\]
Finally I can pull out the $G_4$ factor, as required:
\[= 24G_4 + 12G_{(31)} + 12G_{22} + 4G_{(211)} + G_{1111}\]

\subsection{$n=5$}
I'm going to guess that I know
\[\color{blue}120G_5 = 24[A, G_4] + 12[G_4,G_1] + 2[[G_1,G_3],G_1] + 2[[G_1,G_2],G_2]\]
I want to show
\[ 24\Z[G_{4}] + 12\Z[G_{(31)}] + 12\Z[G_{22}] + 4\Z[G_{(211)}] + \Z[G_{1111}] =\]
\[ 120G_5 + 60G_{(41)} + 60G_{(32)} + 20G_{(311)} + 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Right away I know
\[ 24\Z[G_{4}] = 24[A,G_4] + 24G_{41} \]
\[ 12\Z[G_{(31)}] = 12[A,G_3]G_1 +12G_3[A,G_1] + 12G_{311} + 12[A,G_1]G_3 +12G_1[A,G_3] + 12G_{131}\]
\[ = 12[A,G_3]G_1 +24G_{32} + 12G_{311} + 24G_{23} +12G_1[A,G_3] + 12G_{131}\]
\[ 12\Z[G_{22}] = 12[A,G_2]G_2 + 12 G_2[A,G_2] + 12G_{221}\]
\[ 4\Z[G_{(211)}] = 4[A,G_2]G_{11} + 4[A,G_1]G_{21} + 4[A,G_1]G_{12}  + {}\]
\[4G_2[A,G_1]G_{1} + 4G_{1}[A,G_2]G_{1} + 4G_1[A,G_1]G_{2}  +{}\]
\[4G_{21}[A,G_1] + 4G_{12}[A,G_1] + 4G_{11}[A,G_2]  +{}\]
\[ 4G_{2111} + 4G_{1211} + 4G_{1121}\]

\[ = 4[A,G_2]G_{11} + 16G_{(221)}   + {}\]
\[   4G_{1}[A,G_2]G_{1}  + {}\]
\[   4G_{11}[A,G_2]  + 4G_{2111} + 4G_{1211} + 4G_{1121}\]

\[ \Z[G_{1111}] = 2G_{2111} + 2G_{1211} + 2G_{1121} + 2G_{1112} + G_{11111}\]

So what I'm working with is
\[ \Z[\cdots] = 24[A,G_4] + 24G_{41} + {}\]
\[  12[A,G_3]G_1 +24G_{32} + 12G_{311} + 24G_{23} +12G_1[A,G_3] + 12G_{131} + {}\]
\[12[A,G_2]G_2 + 12 G_2[A,G_2] +  {}\]
\[  4[A,G_2]G_{11} + 28G_{221} + 16G_{212} + 16G_{122}  + {}\]
\[ 4G_{1}[A,G_2]G_{1} +  4G_{11}[A,G_2]  + {}\]
\[6G_{2111} + 6G_{1211} + 6G_{1121} + 2G_{1112} + G_{11111} \]
So the first thing to do is even out the $G_{(2111)}$.
\[= 24[A,G_4] + 24G_{41} + {}\]
\[  12[A,G_3]G_1 +24G_{32} + 12G_{311} + 24G_{23} +12G_1[A,G_3] + 12G_{131} + {}\]
\[12[A,G_2]G_2 + 12 G_2[A,G_2] +  {}\]
\[  4[A,G_2]G_{11} + 28G_{221} + 16G_{212} + 16G_{122}  + {}\]
\[ 4G_{1}[A,G_2]G_{1} +  4G_{11}[A,G_2]  + {}\]
\[G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]} + {}\]
\[5G_{(2111)} + G_{11111} \]
Next thing is maybe the $G_{(221)}$.
\[= 24G_{[04]} + 24G_{41} + {}\]
\[  12G_{[03]1} +24G_{32} + 12G_{311} + 24G_{23} +12G_{1[03]} + 12G_{131} + {}\]
\[12G_{[02]2} + 12 G_{2[02]} +  {}\]
\[  4G_{[02]11} + 8G_{2[21]} + 4G_{[21]2}  + {}\]
\[ 4G_{1[02]1} +  4G_{11[02]}  + {}\]
\[G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]} + {}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Now is the time to try to form $G_3$'s. Recall $6G_3 = 2G_{[02]} + G_{[21]}$, and
I think I want the count of $G_{[21]}$ to be authoritative.

I can rearrange perspicuously to
\[= 24G_{[04]} + 24G_{41} + {}\]
\[  12G_{[03]1} + {\color{green}24G_{32}} + {\color{red}12G_{311}} + {\color{green}24G_{23}} +12G_{1[03]} + {\color{red}12G_{131}} + {}\]
\[{\color{cyan}12 G_{2[02]} + 12G_{[02]2}} + {\color{purple} 4G_{[02]11} + 4G_{1[02]1} + 4G_{11[02]}} +{}\]
\[{\color{cyan}8G_{2[21]} + 4G_{[21]2}} + {\color{purple}G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]}} +{}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111} \]
I notice that I eventually want $60G_{(32)}$ and $20G_{(311)}$ and $60G_{(41)}$.
So I need $36G_{41}$ and $60G_{14}$. Those aren't multiples of $24$.
I need to swap around some $G_4,G_1$. Do
\[= 24G_{[04]} + 12G_{[41]} + 12G_{(41)} + {}\]
\[  12G_{[03]1} + {\color{green}24G_{32}} + {\color{red}12G_{311}} + {\color{green}24G_{23}} +12G_{1[03]} + {\color{red}12G_{131}} + {}\]
\[{\color{cyan}12 G_{2[02]} + 12G_{[02]2}} + {\color{purple} 4G_{[02]11} + 4G_{1[02]1} + 4G_{11[02]}} +{}\]
\[{\color{cyan}8G_{2[21]} + 4G_{[21]2}} + {\color{purple}G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]}} +{}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111} \]
and now I need $48$ of each of $G_{14}$ and $G_{41}$, much better.
Now I need to come up with $2G_{[[02]1]1} + 2G_{1[[02]1]}$. So just do that.
\[= 24G_{[04]} + 12G_{[41]} + 12G_{(41)} + {}\]
\[  12G_{[03]1} + 2G_{[[02]1]1} + {\color{green}24G_{32}} + {\color{red}12G_{311}} + {\color{green}24G_{23}} +12G_{1[03]}  + 2G_{1[[02]1]}+ {\color{red}12G_{131}} + {}\]
\[{\color{cyan}12 G_{2[02]} + 12G_{[02]2}} + {\color{purple} 2G_{[02]11} + 4G_{1[02]1} + 6G_{11[02]}} +{}\]
\[{\color{cyan}8G_{2[21]} + 4G_{[21]2}} + {\color{purple}G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]}} +{}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Now get the $G_{(41)}$ I want:
\[= 24G_{[04]} + 12G_{[41]} + 60G_{(41)} + {}\]
\[   {\color{green}24G_{32}} + {\color{red}12G_{311}} + {\color{green}24G_{23}} + {\color{red}12G_{131}} + {}\]
\[{\color{cyan}12 G_{2[02]} + 12G_{[02]2}} + {\color{purple} 2G_{[02]11} + 4G_{1[02]1} + 6G_{11[02]}} +{}\]
\[{\color{cyan}8G_{2[21]} + 4G_{[21]2}} + {\color{purple}G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]}} +{}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111} \]

so I want to transform the cyan parts to:
\[= 24G_{[04]} + 12G_{[41]} + 60G_{(41)} + {}\]
\[   {\color{green}24G_{32}} + {\color{red}12G_{311}} + {\color{green}24G_{23}} + {\color{red}12G_{131}} + {}\]
\[{\color{cyan}12 G_{2[02]} + 12G_{[02]2}} + {\color{purple} 2G_{[02]11} + 4G_{1[02]1} + 6G_{11[02]}} +{}\]
\[{\color{cyan}6G_{2[21]} + 6G_{[21]2}} + {\color{purple}G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]}} +{}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111}  + {}\]
\[{\color{cyan}2G_{[2[21]]}}  \]
Generate the right number of $G_{(23)}$:
\[= 24G_{[04]} + 12G_{[41]} + 60G_{(41)} + {}\]
\[   {\color{green}60G_{(32)}} + {\color{red}12G_{311}} + {\color{red}12G_{131}} + {}\]
\[ {\color{purple} 2G_{[02]11} + 4G_{1[02]1} + 6G_{11[02]}} +{}\]
\[ {\color{purple}G_{[21]11} + 2G_{1[21]1} + 3G_{11[21]}} +{}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111}  + {}\]
\[{\color{cyan}2G_{[2[21]]}}  \]
Generate some number of $G_{(311)}$, not yet right:
\[= 24G_{[04]} + 12G_{[41]} + 60G_{(41)} + {}\]
\[   {\color{green}60G_{(32)}} + {\color{red}18G_{311}} + {\color{red}24G_{131}} + {\color{red}18G_{113}} + {}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111}  + {}\]
\[{\color{cyan}2G_{[2[21]]}}  \]
so try to rebalance
\[= 24G_{[04]} + 12G_{[41]} + 60G_{(41)} + {}\]
\[ 2G_{[13]1} + 2G_{1[31]} + {}\]
\[   {\color{green}60G_{(32)}} + {\color{red}20G_{311}} + {\color{red}20G_{131}} + {\color{red}20G_{113}} + {}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111}  + {}\]
\[{\color{cyan}2G_{[2[21]]}}  \]
and observe that these Lies can be collapsed into a bigger Lie:
\[= 24G_{[04]} + 12G_{[41]} + 60G_{(41)} + {}\]
\[ 2G_{[[13]1]} +   {\color{green}60G_{(32)}} + {\color{red}20G_{311}} + {\color{red}20G_{131}} + {\color{red}20G_{113}} + {}\]
\[20G_{(221)} + 5G_{(2111)} + G_{11111}  + {}\]
\[{\color{cyan}2G_{[2[21]]}}  \]

Finally I use the clever definition of $G_5$
\[120G_5 = 24G_{[04]} + 12G_{[41]} +  2G_{[[13]1]} + 2G_{[2[21]]}\]
to reach
\[ 120G_5 + 60G_{(41)} + 60G_{(32)} + 20G_{(311)} + 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
as required.
\subsection{What I Think I Know}
\[2G_2 = G_{[01]}\]
\[6G_3  = 2G_{[02]} + G_{[21]}\]
\[24G_4 = 6G_{[03]} + G_{[[02]1]}\]
\[120G_5 = 24G_{[04]} + 12G_{[41]} + 2G_{[[13]1]} + 2G_{[[12]2]}\]
But conjecturally it might be that there are more `screened' terms:
\[2G_2 = G_{[01]}\]
\[6G_3  = 2G_{[02]} + G_{[21]}\]
\[24G_4 = 6G_{[03]} + kG_{[31]} + G_{[[02]1]} + kG_{[13]}\]
\[120G_5 = 24G_{[04]} + 12G_{[41]} + 2G_{[[13]1]} + 2G_{[[12]2]}\]
\section{Backwards Proof}
Let's start with
\[X_5 = 120G_{\rr5} + 24G_{4\rr 1} + 36G_{\rr 41}  + 60G_{1\rr 4} + {}\]
\[ 24G_{3\rr 2} + 24G_{\rr 2 3} + 36G_{\rr3 2} + 36G_{2\rr 3} +{}\]
\[ 12G_{31\rr1} + 8G_{\rr 311} + 12G_{13\rr1} + 8G_{11\rr 3} + 20G_{1\rr 31} + {}\]
\[ 12G_{22\rr1} + 8G_{\rr 2 2 1} +  8G_{\rr212} +  12G_{21\rr2}+ 12G_{1\rr22} +  8G_{12\rr2} {} \]
\[ 4G_{211\rr1} + G_{\rr2111} + 4G_{121\rr1} + G_{1\rr211} + 4G_{112\rr1} + G_{11\rr21} + 5G_{111\rr 2} + G_{1111\rr1}\]
and try to unpack all the ``tools'' we have for shunting stuff around. First unpack the $G_5$.
\[= 24G_{4'} + 12G_{[\rr 41]} + 2G_{[[13]1]} + 2G_{[[12]2]} + {}\]
\[ 24G_{4\rr 1} + 36G_{\rr 41}  + 60G_{1\rr 4} + {}\]
\[ 24G_{3\rr 2} + 24G_{\rr 2 3} + 36G_{\rr3 2} + 36G_{2\rr 3} +{}\]
\[ 12G_{31\rr1} + 8G_{\rr 311} + 12G_{13\rr1} + 8G_{11\rr 3} + 20G_{1\rr 31} + {}\]
\[ 12G_{22\rr1} + 8G_{\rr 2 2 1} +  8G_{\rr212} +  12G_{21\rr2}+ 12G_{1\rr22} +  8G_{12\rr2} {} \]
\[ 4G_{211\rr1} + G_{\rr2111} + 4G_{121\rr1} + G_{1\rr211} + 4G_{112\rr1} + G_{11\rr21} + 5G_{111\rr 2} + G_{1111\rr1}\]
Remember that what a $G_{[\rr 41]}$ does is takes a $G_{1\rr 4}$ and makes a $G_{\rr 41}$.
\[= 24G_{4'} + 2G_{[[13]1]} + 2G_{[[12]2]} + {}\]
\[ 24G_{4\rr 1} + 48G_{\rr 41}  + 48G_{1\rr 4} + {}\]
\[ 24G_{3\rr 2} + 24G_{\rr 2 3} + 36G_{\rr3 2} + 36G_{2\rr 3} +{}\]
\[ 12G_{31\rr1} + 8G_{\rr 311} + 12G_{13\rr1} + 8G_{11\rr 3} + 20G_{1\rr 31} + {}\]
\[ 12G_{22\rr1} + 8G_{\rr 2 2 1} +  8G_{\rr212} +  12G_{21\rr2}+ 12G_{1\rr22} +  8G_{12\rr2} {} \]
\[ 4G_{211\rr1} + G_{\rr2111} + 4G_{121\rr1} + G_{1\rr211} + 4G_{112\rr1} + G_{11\rr21} + 5G_{111\rr 2} + G_{1111\rr1}\]
So, ok, I can use up all my `4-swapping tools'.
Now I can expand out my $G_{\rr 4}$s. They're good multiples of 24, and I know they won't move around any in the future.
\[= 24G_{4'} + 2G_{[[13]1]} + 2G_{[[12]2]} + 24G_{4\rr 1} + {}\]
\[ + 12G_{3'1} + 3G_{[2'1]1} + 12G_{13'} + 3G_{1[2'1]} + {}\]
\[ {\color{green} 2G_{[13]1} + 4G_{1[13]} + 2G_{[31]1} + 2G_{1[31]}} + {}\]
\[ 24G_{3\rr 2} + 24G_{\rr 2 3} + 36G_{\rr3 2} + 36G_{2\rr 3} +{}\]
\[ 12G_{31\rr1} + 8G_{\rr 311} + 12G_{13\rr1} + 8G_{11\rr 3} + 20G_{1\rr 31} + {}\]
\[ 12G_{22\rr1} + 8G_{\rr 2 2 1} +  8G_{\rr212} +  12G_{21\rr2}+ 12G_{1\rr22} +  8G_{12\rr2} {} \]
\[ 4G_{211\rr1} + G_{\rr2111} + 4G_{121\rr1} + G_{1\rr211} + 4G_{112\rr1} + G_{11\rr21} + 5G_{111\rr 2} + G_{1111\rr1}\]
I guess I'll try to use up the $[[13]1]$ movers then.
\[= 24G_{4'} + 2G_{[[12]2]} + 24G_{4\rr 1} + {}\]
\[ + 12G_{3'1} + 3G_{[2'1]1} + 12G_{13'} + 3G_{1[2'1]} + {}\]
\[ + 2G_{[1\rr 3] 1} + 4G_{1[1\rr 3]} \]
\[ 24G_{3\rr 2} + 24G_{\rr 2 3} + 36G_{\rr3 2} + 36G_{2\rr 3} +{}\]
\[ 12G_{31\rr1} + 8G_{\rr 311} + 12G_{13\rr1} + 8G_{11\rr 3} + 20G_{1\rr 31} + {}\]
\[ 12G_{22\rr1} + 8G_{\rr 2 2 1} +  8G_{\rr212} +  12G_{21\rr2}+ 12G_{1\rr22} +  8G_{12\rr2} {} \]
\[ 4G_{211\rr1} + G_{\rr2111} + 4G_{121\rr1} + G_{1\rr211} + 4G_{112\rr1} + G_{11\rr21} + 5G_{111\rr 2} + G_{1111\rr1}\]
Which $\rr3$ are red? I need multiples of 6.

\hrule

\[ = {\color{blue} 24\Z[G_4]} + 2G_{[[13]1]} + 2G_{[[12]2]} + {}\]
\[ 48G_{41} + 48G_{14} + 60G_{(32)} + 20G_{(311)} + 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Ok,
\[ = 2G_{[[13]1]} + 2G_{[[12]2]} + {}\]
\[ 12G_{[03]1} + 2kG_{[31]1} + 2G_{[[02]1]1} + 2kG_{[13]1} + {}\]
\[ 12G_{1[03]} + 2kG_{1[31]} + 2G_{1[[02]1]} + 2kG_{1[13]} + {}\]
\[ 60G_{(32)} + 20G_{(311)} + 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Now let's use up the $[13]$-motion. I guess $k=1$? {\color{red} It might have been that I wanted
$G_{[[13]1]} + G_{[1[31]]}$ instead of $2G_{[[13]1]}$, not sure}
What a $G_{[[13]1]}$ does is take a $G_{1[13]}$ and make a $G_{[13]1}$.
\[ =  2G_{[[12]2]} + {}\]
\[ 12G_{[03]1} + 2G_{[31]1} + 2G_{[[02]1]1} + 4G_{[13]1} + {}\]
\[ 12G_{1[03]} + 2G_{1[31]} + 2G_{1[[02]1]} + {}\]
\[ 60G_{(32)} + 20G_{(311)} + 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Doing some more of the $3$-motion:
\[ =  2G_{[[12]2]} + {}\]
\[ 12G_{[03]1} + 2G_{[[02]1]1} + {}\]
\[ 12G_{1[03]} + 2G_{1[[02]1]} + {}\]
\[ 60G_{(32)} + 18G_{311} + 24G_{131} + 18G_{113} + 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Now note that what $G_{[03]1}$ does is turn $G_{311}$ into $\Z[G_3]G_1$.
Now note that what $G_{1[03]}$ does is turn $G_{131}$ into $G_1\Z[G_3]$.
So we're at
\[ =  2G_{[[12]2]} + {}\]
\[ 12\Z[G_3]G_1 + 2G_{[[02]1]1} + {}\]
\[ 12G_1\Z[G_3] + 2G_{1[[02]1]} + {}\]
\[ 60G_{(32)} + 6G_{311} + 12G_{131} + 18G_{113} + 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
I guess I'ma forge ahead and expand the $G_3$s. They are all multiples of 6 and immobile from now on.
\[ =  2G_{[[12]2]} + {}\]
\[ 12\Z[G_3]G_1 + 2G_{[[02]1]1} + {}\]
\[ 12G_1\Z[G_3] + 2G_{1[[02]1]} + {}\]
\[ 20G_{[02]2} + 10_{[21]2} + 20G_{2[02]} + 10G_{2[21]} + {}\]
\[ 2G_{[02]11} + G_{[21]11} + 4G_{1[02]1} + 2G_{1[21]1} + 6G_{11[02]} + 3G_{11[21]} + {}\]
\[ 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Move around the $[12]2$, which I assume {\color{red} actually} means $2[21]$:
\[ = 12\Z[G_3]G_1 + 2G_{[[02]1]1} + {}\]
\[ 12G_1\Z[G_3] + 2G_{1[[02]1]} + {}\]
\[ 20G_{[02]2} + 8G_{[21]2} + 20G_{2[02]} + 12G_{2[21]} + {}\]
\[ 2G_{[02]11} + G_{[21]11} + 4G_{1[02]1} + 2G_{1[21]1} + 6G_{11[02]} + 3G_{11[21]} + {}\]
\[ 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Move around the $[[02]1]1$ and $1[[02]1]$:
\[ = 12\Z[G_3]G_1  + 12G_1\Z[G_3]  + {}\]
\[ 20G_{[02]2} + 8G_{[21]2} + 20G_{2[02]} + 12G_{2[21]} + {}\]
\[ 4G_{[02]11} + G_{[21]11} + 4G_{1[02]1} + 2G_{1[21]1} + 4G_{11[02]} + 3G_{11[21]} + {}\]
\[ 20G_{(221)} + 5G_{(2111)} + G_{11111} \]
Start moving 2s:
\[ = 12\Z[G_3]G_1  + 12G_1\Z[G_3]  + {}\]
\[ 20G_{[02]2} +  20G_{2[02]}  + {}\]
\[ 4G_{[02]11} + G_{[21]11} + 4G_{1[02]1} + 2G_{1[21]1} + 4G_{11[02]} + 3G_{11[21]} + {}\]
\[ 32G_{221} + 16G_{212} + 12G_{122} + 5G_{(2111)} + G_{11111} \]
Keep moving 2s:
\[ = 12\Z[G_3]G_1  + 12G_1\Z[G_3]  + {}\]
\[ 20G_{[02]2} +  20G_{2[02]}  + {}\]
\[ 4G_{[02]11} +  4G_{1[02]1} + 4G_{11[02]} + {}\]
\[ 32G_{221} + 16G_{212} + 12G_{122}  + G_{11111} + \]
\[6G_{2111} + 6G_{1211} + 6G_{1121} + 2G_{1112}\]
Hm, let's undo that consideration about the $\Z[G_3]$.
\[ = 12(G_{[03]1} + G_{311})  + 12(G_{1[03]} + G_{131})  + {}\]
\[ 20G_{[02]2} +  20G_{2[02]}  + {}\]
\[ 4G_{[02]11} +  4G_{1[02]1} + 4G_{11[02]} + {}\]
\[ 32G_{221} + 16G_{212} + 12G_{122}  + G_{11111} + \]
\[6G_{2111} + 6G_{1211} + 6G_{1121} + G_{1112}\]
Expand $G_3$ outside brackets instead.
\[ = 12G_{[03]1} + 4G_{[02]11} + 2G_{[21]11}  + 12G_{1[03]} + 4G_{1[02]1} + 2G_{1[21]1}  + {}\]
\[ 20G_{[02]2} +  20G_{2[02]}  + {}\]
\[ 4G_{[02]11} +  4G_{1[02]1} + 4G_{11[02]} + {}\]
\[ 32G_{221} + 16G_{212} + 12G_{122}  + G_{11111} + \]
\[6G_{2111} + 6G_{1211} + 6G_{1121} + G_{1112}\]
Do some more $2$-motion
\[ = 12G_{[03]1} + 4G_{[02]11} + 12G_{1[03]} + 4G_{1[02]1} + {}\]
\[ 20G_{[02]2} +  20G_{2[02]}  + {}\]
\[ 4G_{[02]11} +  4G_{1[02]1} + 4G_{11[02]} + {}\]
\[ 32G_{221} + 16G_{212} + 12G_{122}  + G_{11111} + \]
\[8G_{2111} + 6G_{1211} + 4G_{1121} + G_{1112}\]
I don't know, this feels stuck. Maybe try again later.

\section{Starting Small, Looking at Provenance}

Write $A'$ for $[0,A]$.
\subsection{$n=1$}
Assert $G_{\rr 1} = A + B$, which is what we need to show already.
\subsection{$n=2$}
Assert $2G_{\rr 2} = G_{1'}$. Compute
\[\Z[G_{ 1}] = G_{1'} + G_{1\rr 1} = 2G_{\rr2} + G_{1\rr1}\]
\subsection{$n=3$}
Assert $6G_{\rr3}  = 2G_{2'} + G_{[\rr 2 1]}$.
Need to show $\Z[2G_{ 2} + G_{{11}}] = 6G_3 + 3G_{(21)} + G_{111}$.
Compute
\[2\Z[G_{2}] + \Z[G_{{11}}] = 2G_{2'} + 2G_{2\rr 1} + G_{1'1} + G_{ 11'} + G_{11\rr1}\]
Now collect up $G_{1'}$'s:
\[ = 2G_{2'} + 2G_{2\rr 1} + 2G_{\rr21} + 2G_{ 1\rr2} + G_{11\rr1}\]
Now I notice I need to swap around some $G_{21}$.
\[ = 2G_{2'} + G_{[\rr21]} + 2G_{2\rr 1} + G_{\rr21} + 3G_{ 1\rr2} + G_{11\rr1}\]
\[ = 6G_{\rr 3} + 2G_{2\rr 1} + G_{\rr21} + 3G_{ 1\rr2} + G_{11\rr1}\]
\subsection{$n=4$}
Assert $24G_4 = 6G_{3'} + G_{[2'1]}$.
Need to show
\[\Z[6G_3 + 3G_{(21)} + G_{111}] = 24G_4 + 12G_{(31)} + 12G_{22} + 4G_{(211)} + G_{1111}\]
Compute:
\[6\Z[G_3] + 3\Z[G_{(21)}] + \Z[G_{111}]\]
\[ = 6G_{3'} + 6G_{3\rr 1} + 3G_{2'1} + 3G_{21'} + 3G_{21\rr1} + 3G_{1'2} + 3G_{12'} + 3G_{12\rr1} +{}\]
\[ G_{1'11} + G_{11'1} + G_{111'} + G_{111\rr1}\]
Now I can synthesize some $2G_{\rr 2}$ from $G_{1'}$:
\[ = 6G_{3'} + 6G_{3\rr 1} + 3G_{2'1} + 6G_{2\rr2} + 3G_{21\rr1} + 6G_{\rr22} + 3G_{12'} + 3G_{12\rr1} +{}\]
\[ 2G_{\rr211} + 2G_{1\rr21} + 2G_{11\rr 2} + G_{111\rr1}\]
I need to spread out the $ 2G_{\rr211} + 2G_{1\rr21} + 2G_{11\rr 2}$. I leave one behind of the left two, and keep the right two.

\[ = 6G_{3'} + 6G_{3\rr 1} + 3G_{2'1} + 6G_{2\rr2} + 3G_{21\rr1} + 6G_{\rr22} + 3G_{12'} + 3G_{12\rr1} +{}\]
\[  G_{[\rr 2 1]1} + 2G_{1[\rr 2 1]} + G_{\rr211} + G_{1\rr21} + 4G_{11\rr 2} + G_{111\rr1}\]
Now I have to swap some $G_{2'1}$ to match the resources I have.

\[ = 6G_{3'} + 6G_{3\rr 1} + G_{[2'1]} + 2G_{2'1} + 6G_{2\rr2} + 3G_{21\rr1} + 6G_{\rr22} + 4G_{12'} + 3G_{12\rr1} +{}\]
\[  G_{[\rr 2 1]1} + 2G_{1[\rr 2 1]} + G_{\rr211} + G_{1\rr21} + 4G_{11\rr 2} + G_{111\rr1}\]
Now synthesize some $G_{\rr 3}$:
\[ = 6G_{3'} + 6G_{3\rr 1} + G_{[2'1]} + 6G_{\rr 31} + 6G_{2\rr2} + 3G_{21\rr1} + 6G_{\rr22} + 12G_{1\rr3} + 3G_{12\rr1} +{}\]
\[  G_{\rr211} + G_{1\rr21} + 4G_{11\rr 2} + G_{111\rr1}\]
Now synthesize some $G_{\rr 4}$:
\[ = 24G_{\rr4} + 6G_{3\rr 1} + 6G_{\rr 31}  + 12G_{1\rr3} + 6G_{2\rr2} +  6G_{\rr22} + {}\]
\[ 3G_{21\rr1} + G_{\rr211} + 3G_{12\rr1} + G_{1\rr21} + 4G_{11\rr 2} + G_{111\rr1}\]
\subsection{Summary}
\[X_2 = 2G_{\rr2} + G_{1\rr1}\]

\[X_3 = 6G_{\rr 3} + 2G_{2\rr 1} + G_{\rr21} + 3G_{ 1\rr2} + G_{11\rr1}\]

\[X_4 = 24G_{\rr4} + 6G_{3\rr 1} + 6G_{\rr 31}  + 12G_{1\rr3} + 6G_{2\rr2} +  6G_{\rr22} + {}\]
\[ 3G_{21\rr1} + G_{\rr211} + 3G_{12\rr1} + G_{1\rr21} + 4G_{11\rr 2} + G_{111\rr1}\]

\[X_5 = 120G_{\rr5} + 24G_{4\rr 1} + 36G_{\rr 41}  + 60G_{1\rr 4} + {}\]
\[ 24G_{3\rr 2} + 24G_{\rr 2 3} + 36G_{\rr3 2} + 36G_{2\rr 3} +{}\]
\[ 12G_{31\rr1} + 8G_{\rr 311} + 12G_{13\rr1} + 8G_{1\rr 31} + 20G_{11\rr 3} + {}\]
\[ 12G_{22\rr1} + 8G_{\rr 2 2 1} +  8G_{\rr212} +  12G_{21\rr2}+ 12G_{1\rr22} +  8G_{12\rr2} {} \]
\[ 4G_{211\rr1} + G_{\rr2111} + 4G_{121\rr1} + G_{1\rr211} + 4G_{112\rr1} + G_{11\rr21} + 5G_{111\rr 2} + G_{1111\rr1}\]

\section{Lie Stuff}
We want to define a little generalization of right-nested Lie bracket notation
$[A_n,[\cdots [A_2,A_1]\cdots]]$.
First, we have a notion $L^\sigma_n$ of Lie permutations of $n$ things, with sign $\sigma$.
\[
\erule{}{1 \in L^+_1}
\qquad
\erule{\pi\in L^\sigma_n}{(n+1,\pi) \in L^\sigma_{n+1}}
\qquad
\erule{\pi\in L^\sigma_n}{(\pi,n+1) \in L^{-\sigma}_{n+1}}
\]
For example, $21 \in L^+_2$ and $12 \in L^-_2$ to capture that $[A_2,A_1] = A_2A_1 - A_1A_2$.

 Suppose $R$ is a ring and $A:R^n$, and $f : R^n \to R$.
The action of $\pi$ on $R^n \to R^n$ should be evident, except that our notion of the ``default permutation''
of $n$ things is $n,(n-1),\cdots,2,1$ so e.g. $(3,2,1)$ is the way we write the identity permutation.

We define:
\[[A]^f = \sum_{\pi \in L^\sigma_n} \sigma f( \pi \cdot A)\]
So the ordinary right-nested lie bracket can be written
\[[A_n, [\cdots,[A_2, A_1]\cdots]] = [A_n,\ldots,A_1]^{\Pi} = [A_n,\ldots,A_1]\]
Now we can show
\begin{lemma}
In the free $\mathbb{Z}$-module over permutations,
\[\sum_{\pi \in L^\sigma_n} \sum_{\pi' \in L^{\sigma'}_n} \sigma\sigma' (\pi' \o \pi)
= n\sum_{\pi \in L^\sigma_n}  \sigma \pi\]
\end{lemma}

\begin{proof}
Write
\[D_{\sigma\sigma'} = \sum_{\pi \in L^\sigma_n} \sum_{\pi' \in L^{\sigma'}_n}  (\pi' \o \pi)\]
\[D_{\sigma} = \sum_{\pi \in L^\sigma_n}    \pi\]
then we're asserting
\[D_{++} - D_{-+} - D_{+-} + D_{--} = nD_+ - nD_-\]
in other words there should be an isomorphism
\[nD_- + D_{++} + D_{--} = nD_+ + D_{-+} + D_{+-}\]
{\color{red}???}
\cqed
\end{proof}

\begin{lemma}
\[[A_n,\ldots,A_1]^{[\dash]} = n[A_n,\ldots, A_1]\]
\end{lemma}

\begin{proof}
\[[A_{n},\ldots,A_1]^{[\dash]} = \sum_{\pi \in L^\sigma_n} \sigma [ \pi \cdot A]\]
\[= \sum_{\pi \in L^\sigma_n} \sum_{\pi' \in L^{\sigma'}_n} \sigma\sigma' (\pi' \cdot \pi \cdot A)\]
\[= \sum_{\pi \in L^\sigma_n} \sum_{\pi' \in L^{\sigma'}_n} \sigma\sigma' ((\pi' \o \pi) \cdot A)\]
\[= n\sum_{\pi \in L^\sigma_n}  \sigma (\pi \cdot A)\]
\[= n[A_{n},\ldots,A_1]\]

\cqed
\end{proof}

\section{More Sandbox}
I should be able to show first of all that $\ln(e^x) = x$. Generally
\[\ln(f) = \sum_{k\ge 1} {(-1)^{k+1}\over k} (f-1)^k\]
so
\[x =\ln(e^x) = \sum_{k\ge 1} {(-1)^{k+1}\over k} (e^x-1)^k\]
\[= \sum_{k\ge 1} {(-1)^{k+1}\over k} \left(\sum_{n\ge 1} {x^n\over n!}\right)^k\]
\[= \sum_{k\ge 1, n\ge 1} {(-1)^{k+1}\over k} x^n \sum_{\lambda :(k,n)}  \prod_{i=1}^k {1 \over \lambda_i!}\]
The $n=1$ case is trivially satisfied, so what I'm really saying is for all $n \ge 2$,
\[  0 = \sum_{k\ge 1} {(-1)^{k+1}\over k} \sum_{\lambda :(k,n)}  \prod_{i=1}^k {1 \over \lambda_i!}\]
i.e. if
\[  P(k) = {1\over k} \sum_{\lambda :(k,n)}  \prod_{i=1}^k {1 \over \lambda_i!}\]
then
\[ \sum_{\{2k \st k \ge 1\}} P(k) =  \sum_{\{2k+1 \st k \ge 1\}} P(k)\]
Let's try this for $n = 2$. The $\lambda :(k,2)$ are $2,11$, so I get
\[ {1\over 2!} = {1\over 2} = 1/2\]
Let's try this for $n = 3$. The $\lambda :(k,3)$ are $3,21,12,111$, so I get
\[{1\over 3!} + {1\over 3} = {1\over 2!}{1\over 2} + {1\over 2!}{1\over 2} = 1/2\]
Still works.
Let's try this for $n = 4$. The $\lambda :(k,4)$ are $4,31,13,22,211,121,112,1111$, so I get
\[{1\over 4!}  + {1\over 2!3} + {1\over 2!3} + {1\over 2!3} = {1\over 2!2!2} + {1\over 3!2} +  {1\over 3!2} + {1\over 4} = 13/24\]
Multiplying through by $4!$ I'd get
\[{{4\choose 4}\over 1}  + {{4 \choose 2,1,1}\over 3} + {{4 \choose 1,2,1}\over 3} + {{4\choose 1,1,2}\over 3} =
{{4 \choose 2,2}\over 2} + {{4\choose 3,1}\over 2} +  {{4\choose 1,3}\over 2} + {{4\choose 1,1,1,1}\over 4} = 13\]
Let's try this for $n = 5$. The $\lambda :(k,5)$ are $5,(41),(32),(311),(221),(2111),11111$.
\[{1\over 5!}  + {1\over 2!2!} + {1\over 3!} + {1\over 5} = {1\over 4!} + {1\over 3!2!} + {1\over 2!}\]
or times $5!$ I have
\[\underbrace{1}_5  + \underbrace{10 + 10 + 10}_{(221)} + \underbrace{20 + 20 + 20}_{(311)} + \underbrace{24}_{11111} =
 \underbrace{{5\over 2} + {5\over 2}}_{(41)} + \underbrace{5 + 5}_{(32)} + \underbrace{15 + 15 + 15 + 15}_{(2111)}\]

Given an unordered set partition like $\{1,2,3\}$ of $6$, I'd get a term

\[ {6 \choose 1,2,3} {3\choose 1,1,1}{1 \over 3}\]
where $3!$ is the number of distinct permutations of $\{1,2,3\}$ and $3$ is its length.
So for $\{2,2,1,1\}$ I'd get
\[ {6 \choose 2,2,1,1} {4 \choose 2,2} {1 \over 4}\]
Let's try to do the computation for $n=6$.
Odds are $6,411,222,321,21111$. Evens are $51,42,33,2211,3111,111111$.
Odds yield
\[{{6 \choose 6}{1\choose 1}\over 1}
+ {{6\choose 222}{3\choose 3}\over 3}
+ {{6\choose 411}{3\choose 12}\over 3}
+ {{6\choose 321}{3\choose 111}\over 3}
+ {{6\choose 21111}{5\choose 14}\over 5}
\]
\[ = 1 + 30 + 30 + 120 + 360 = 541\]
Evens yield
\[{{6 \choose 51}{2\choose 11}\over 2}
+ {{6\choose 42}{2\choose 11}\over 2}
+ {{6\choose 33}{2\choose 2}\over 2}
+ {{6\choose 2211}{4\choose 22}\over 4}
+ {{6\choose 3111}{4\choose 31}\over 4}
+ {{6\choose 111111}{6\choose 6}\over 6}
\]
\[= 6 + 15 + 10 + 270 + 120 + 120 = 541\]
So what I'm doing here is assigning some kind of integer $w(\lambda)$ to every {\em unordered} partition $\lambda$
in the set of partitions $P^k_n$ with $k$ parts and total $n$, and asserting
\[  \sum_{\lambda \in P^+_n} w(\lambda) =  \sum_{\lambda \in P^-_n}  w(\lambda)\]
where the $+$ and $-$ indicate even and odd numbers of parts.
Let's say the partition I'm considering is $\lambda = 1111122334 \in P^{10}_{19}$. Then
\[w(\lambda) = {19 \choose 1,1,1,1,1,2,2,3,3,4}{10 \choose 5,2,2,1}{1\over 10}\]
\section{Picking at What I Can Understand}
Recall
\[2G_2 = G_{[01]}\]
\[6G_3  = 2G_{[02]} + G_{[21]}\]
\[24G_4 = 6G_{[03]} + G_{[[02]1]}\]
\[120G_5 = 24G_{[04]} + 12G_{[41]} + 2G_{[[13]1]} + 2G_{[[12]2]}\]

\[X_0 = 1\]
\[\Z[X_0] = X_1 = G_{1} \]
\[\Z[X_1] = X_2 = 2G_{2} + G_{11} \]
\[\Z[X_2] = X_3 = 6G_{ 3} + 3G_{(2 1)} + G_{111}\]
\[\Z[X_3] = X_4 = 24G_{4} +12G_{(31)} + 12G_{(22)} + 3G_{(211)} + G_{1111}\]
\[\Z[X_4] = X_5 = 120G_{5} + 60G_{(4 1)}+  60G_{(3 2)} + 20G_{(311)} + 20G_{(221)} + 4G_{(2111)} + G_{11111}\]
How much 1-synthesis is going on when producing $X_{n+1}$ from $\Z[X_n]$? Let's say $R_1$ or a (subscript red 1)
is an application of the $1$
synthesis rule. It's %% I get
%% \[\Z[X_0] = X_1 \ \leftarrow\  R_1 \]
%% \[\Z[X_1] = X_2 \ \leftarrow\  G_{1\rr1} \]
%% \[\Z[X_2] = X_3 \ \leftarrow\  2G_{2\rr1} + G_{11\rr1} \]
%% This is conclusive:
\[(\Z[X_n] = X_{n+1}) \ \leftarrow\  X_nR_1 \]
Now how much 2-synthesis is going on? Write $R_2$ or ${}_{\rr 2}$.
\[(\Z[X_1] = X_2) \ \leftarrow\  G_{\rr2} \]
\[(\Z[X_2] = X_3) \ \leftarrow\  G_{1\rr2} + G_{\rr 21} \]
\[(\Z[X_3] = X_4) \ \leftarrow\  G_{11\rr 2} + G_{1\rr21} + G_{\rr211} + 3G_{2\rr 2} + 3G_{\rr2 2}\]
Hm, I sort of know how to deal with this. Let's define noncommutative polynomials
$h_n(x_1, \ldots, x_n)$ like so:
\[h_1(x_1) = x_1\]
\[h_2(x_1,x_2) = 2x_2 + x_1^2  \]
\[h_3(x_1,x_2,x_3) = 6x_3 + 3(x_2x_1 + x_1x_2) + x_1^3\]
\[h_4(x_1,x_2,x_3,x_4) = 24x_{4} +12(x_{3}x_{1} + x_1x_3) + 12x_{22} + 4(x_2x_1^2 + x_1x_2x_1 + x_1^2x_2) + x_1^4\]
etc.

Then the ``synthesis counter'' is actually a doubly $\N$-index map from relations to relations.
If we want to count how many times we synthesize $G_n$ when trying to show $\Z[X_m] = X_{m+1}$,
then let's call that $S_{n}[r,h]$, which maps a variable relation $r$ and a polynomial $h$
to another polynomial which shows all the contexts in which we need to apply the rule.
 For example, we have established that
\[S_{1}[r, h] = h r \]
and now I think I've convinced myself that
\[S_{2}[r, h] = h  \{r/x_1\}\]
where $\{r/x_1\}$ is an operation kind of like a derivative or Lie bracket, in that we define it by
\[H\{r/x\} = 0 \qquad\hbox{(if $x\not\in H$)}\]
\[x\{r/x\} = r \qquad(HK) \{r/x\} = (H\{r/x\})K + H(K\{r/x\}) \]

Concretely, $2$synthesis?
\[(1\to 2) R\]
\[(2\to 3) xR + Rx \]
\[(3\to 4) 3x_2R + 3Rx_2 + xxR + xRx + Rxx \]
\[(4\to 5) 12x_3x + 12xx_3 + {} 4(x_2xR + x_2Rx + xx_2R + Rx_2R + xRx_2 + RxX_2) + {}\]
\[ xxxR + xxRx + xRxx + Rxxx \]
What about $3$-synthesis?
\[(2\to 3) R\]
\[(3\to 4) 2xR + Rx \]
\[(4\to 5) 6x_2R  + 6Rx_2 + 3xxR + 2xRx + Rxx \]
What about $4$-synthesis?
\[(3\to 4) R\]
\[(4\to 5)  3xR + Rx   \]

\section{Always Synthesize On the Right}
\subsection{First Sketch}
Here's a strategy for trying to reduce the amount of nondeterminism I
have to deal with: notice that I'm always synthesizing $A + B \to G_1$
on the right side of an expression, and follow that pattern for all
other synthesis. This will introduce a {\em lot} of swapping, but
maybe it will reveal the ``screened'' terms that have been confounding
me until now.

$0\to1$: I still have $\Z[X_0] = A + B = G_1$.

$1\to2$: I still have $\Z[X_1] = \Z[G_1] = G_{1'} + G_{11} = 2G_2 + G_{11}$.
Synthesis of $G_2$ still takes place on the right. I still have $2G_2 = G_{1'}$.

$2\to3$: I have $\Z[X_2] = 2\Z[G_2] + \Z[G_{11}] = 2G_{2'} + 2G_{21} + G_{1'1} + G_{11'} + G_{111}$.
Here I diverge: I first go to
\[2G_{2'} + 2G_{21} + G_{[1'1]} + 2G_{11'} + G_{111}\]
then synthesize
\[2G_{2'} + 2G_{21} + G_{[1'1]} + 4G_{12} + G_{111}\]
then swap back to balance out:
\[2G_{2'} + 3G_{21} + G_{[12]} + G_{[1'1]} + 3G_{12} + G_{111}\]
finding that I need
\[6G_3 = 2G_{2'} + G_{[12]} + G_{[1'1]}\]
This is equal in the noncommutative polynomial ring, but maybe it will reveal more structure.

Time to try $3\to4$. We first know
\[\Z[X_3] = 6\Z[G_{3}] + 3\Z[G_{21}] + 3\Z[G_{12}] + \Z[G_{111}]\]
\[ = 6G_{3'} + 6G_{31} + 3G_{2'1} + 3G_{21'} + 3G_{211} + 3G_{1'2} + 3G_{12'} + 3G_{121} + {}\]
\[G_{1'11} + G_{11'1} + G_{111'} + G_{1111}\]
Now we shunt all the $1'$ and $2'$ to the right:
\[ = 6G_{3'} + 6G_{31} + 3G_{[2'1]} +  6G_{21'} + 3G_{211} + 3G_{[1'2]} +  6G_{12'} + 3G_{121} + {}\]
\[G_{[1'1]1} + 2G_{1[1'1]}  + 3G_{111'} + G_{1111}\]
Now synthesize some $G_2$:
\[ = 6G_{3'} + 6G_{31} + 3G_{[2'1]} +  12G_{22} + 3G_{211} + 3G_{[1'2]} +  6G_{12'} + 3G_{121} + {}\]
\[G_{[1'1]1} + 2G_{1[1'1]}  + 6G_{112} + G_{1111}\]
Now balance out the $(211)$, which I seem to need to do before I can synthesize $G_3$! interestingly constrained.
\[ = 6G_{3'} + 6G_{31} + 3G_{[2'1]} +  12G_{22} +  3G_{[1'2]} +  6G_{12'} +  {}\]
\[G_{[1'1]1} + 2G_{1[1'1]}  + 2G_{1[12]} + G_{[12]1} + 4G_{(211)} + G_{1111}\]
Now shunt the $[1'1]$ and $[12]$ to the right across $1$ so they're in the right place for $G_3$-synthesis:
\[ = 6G_{3'} + 6G_{31} + 3G_{[2'1]} +  12G_{22} +  3G_{[1'2]} +  6G_{12'} +  {}\]
\[G_{[[1'1]1]} + 3G_{1[1'1]}  + 3G_{1[12]} + G_{[[12]1]} + 4G_{(211)} + G_{1111}\]
Now everything is in the right ratio, nice:
\[ = 6G_{3'} + 6G_{31} + 3G_{[2'1]} +  12G_{22} +  3G_{[1'2]} +  18G_{13} +  {}\]
\[G_{[[1'1]1]} + G_{[[12]1]} + 4G_{(211)} + G_{1111}\]
Now balance out the $G_{(13)}$:
\[ = 6G_{3'} + 12G_{(31)} + 3G_{[2'1]} +  12G_{22} +  3G_{[1'2]} +  6G_{[13]} +  {}\]
\[G_{[[1'1]1]} + G_{[[12]1]} + 4G_{(211)} + G_{1111}\]
And we find we need
\[\color{blue} 24G_4 = 6G_{3'} + 6G_{[13]} + 3G_{[2'1]} + 3G_{[1'2]} + G_{[[1'1]1]} + G_{[[12]1]}\]
Now this is looking very nice. If I expand out the ``derivatives'' I see
\[ 24G_4 = 6G_{[03]} + 6G_{[13]} + 3G_{[[02]1]} + 3G_{[[01]2]} + G_{[[[01]1]1]} + G_{[[12]1]}\]
If I do $[0,\dash] \mapsto [\dash, 1]$ everywhere, then all compositions of $4$ are covered, and they
all remain left-nested.
\vfil\eject
\subsection{After Numerical Experiment}

\newenvironment{nstabbing}
  {\setlength{\topsep}{-\parskip}%
   \setlength{\partopsep}{0pt}%
   \vskip-2em\hphantom{.}%
   \tabbing}
  {\endtabbing}

Ok, I got as far as confirming $3\to4$ as well in code. What I have found so far


 \begin{nstabbing}
\hspace{0.5in}\=$=\ $ \=\kill\\
$G_1 $\>$=$\>$ A+B$\\
$2G_2 $\>$=$\>$ L_{01}$\\
$6G_3 $\>$=$\>$ 2L_{02} + L_{12} + L_{011}$\\
$24G_4 $\>$=$\>$ 6L_{03} + 6L_{13} + 3L_{021} + 3L_{012} + L_{121} + L_{0111} $\\
$120G_{5} $\>$=$\>$ 24L_{04} + 36L_{14} + 12L_{23} + {}$\\
\>\>$ 12L_{031} + 12L_{013} + 8L_{131} +{}$\\
\>\>$ 12L_{022} + 4L_{122} + {}$\\
\>\>$ 4L_{0211} + 4L_{0121} +  4L_{0112} + L_{1211} + L_{01111}$\\
\end{nstabbing}
%
where $L_e = G_{[e]}$ and brackets nest to the left.
%% \subsection{Backwards Proof}
%% Let's try to show that $X_3 = \Z[X_2]$ `backwards'. We start with
%% \[6G_3  + 3G_{21} + 3G_{12} + G_{111}\]
%% we unpack the $G_3$:
%% \[2L_{02} + L_{12} + L_{011}  + 3G_{21} + 3G_{12} + G_{111}\]
%% Now the $L_{[02]}$ is already `finished'. We can use the $L_{12}$:
%% \[2L_{02} + L_{011}  + 2G_{21} + 4G_{12} + G_{111}\]
%% I claim I can tell from the size of $L_{011}$ that it's meant to be used to migrate the products
%% of $G_2$ desynthesis. So let's do $2$-desynthesis now. Conveniently, we know which to desynthesize: all the expressions
%% that end in $2$.
%% \[2L_{02} + L_{011}  + 2G_{21} + 2G_{1[01]} + G_{111}\]
%% Now I can use the $L_{011}$.
%% \[2L_{02} +  2G_{21} + G_{[01]1} + G_{1[01]} + G_{111}\]
%% Now I can finish up:
%% \[2\Z[G_{2}] + \Z[G_{11}]\]

\subsection{Generalizing the Code}
Let me try to generalize my intent in writing the $3\to4$ proof.
First what we do is move all the $[0,1]$ to the right.

How many of these do we move? Well, they come from occurrences of $1$ in ordered partitions.
What's the coefficient? In moving $12G_{[01]3}$ we pick up a factor of 12 from the ambient $4!/2!$
that we started with. But in moving all the $[0,1]$ to the right in
\[4G_{[01]21} + 4G_{2[01]1} + 4G_{[01]12} + 4G_{1[01]2}\]
we have the factor of $4 = 4!/3!$, but also the fact that the leftmost $[0,1]$s need
to move {\em twice}. So we get
\[4G_{[[01]2]1} + 8G_{2[[01]1]} + 4G_{[[01]1]2} + 8G_{1[[01]2]} \]
So let's step back. What's the math equivalent of the {\tt target} function, as a polynomial?
\[X_n = \sum_{\lambda:(k,n)} {n!\over k!} G_\lambda\]
And what do I know about $\Z[X_n]$?
\[Z[X_n] =  \sum_{\lambda:(k,n)} {n!\over k!}(G_{\lambda 1} + [G_0, G_\lambda ] )\]
And what do I know about $[G_0, G_\lambda]$, as a pseudo-derivative?
\[Z[X_n] =  \sum_{\lambda:(k,n)} {n!\over k!}\left(G_{\lambda 1}+\sum_{i = 1}^k G_{\lambda_{<i}}[G_0, G_{\lambda_i} ]G_{\lambda_{>i}} \right)\]
Now consider what happens when I move {\em all} $[G_0, \dash]$  to the right
\[Z[X_n] =  \sum_{\lambda:(k,n)} {n!\over k!}\left(G_{\lambda 1}+\left(\sum_{i = 1}^k\sum_{j = i+1}^k G_{\lambda_{[1,i)(i,j)}} G_{[0,\lambda _i,\lambda_j]} G_{\lambda_{(j,k]}}\right) + \sum_{i = 1}^k G_{\lambda_{[1,i)(i,k]}}G_{[0\lambda_i]} \right)\]
ah and I could move all of the resulting brackets to the right as well:
\[Z[X_n] =  \sum_{\lambda:(k,n)} {n!\over k!} Q(n,k)\]
\[Q(n,k) = \left(G_{\lambda 1}+ \vphantom{\sum_{i+1}^k}\right.\]
\[\left(\sum_{1 \le i < j < \ell \le k} G_{\lambda_{[1,\hat i, \hat k, \ell)}} G_{[0,\lambda _i, \lambda_j, \lambda_\ell]} G_{\lambda_{(\ell, k]}}\right) + \]
\[\left(\sum_{1 \le i < j \le k} G_{\lambda_{[1,\hat i, \hat j,k)}} G_{[0,\lambda _i,\lambda_j]} \right) + \]
\[\left.\sum_{1 \le i \le k}  G_{\lambda_{[1,\hat i,k]}}G_{[0\lambda_i]}  \right)\]
Ok, so clearly what this comes down to is summing over subsets $S \subseteq [1,\ldots,k]$. Write $\bar S$ for the complement of $S$ in $[1,k]$.
\[Z[X_n] =  \sum_{\lambda:(k,n)} {n!\over k!} \left( \sum_{S \subseteq [1,k]} G_{\lambda_{\bar S}} G_{[0,\lambda_S]}\right)\eqno(\dagger)\]
Where we think of $G_{\lambda 1}$ as arising from setting $S$ to the empty set, so that $G_{\lambda_{\bar S}}$ is all of $S$ and we
set $G_{[0,\lambda_\emptyset]} = G_1$. I'm pretty happy about this result.
It's fairly clean.

\subsubsection{Cleanup after $2$-synthesis: $(21^*)$}
So let's try to analyze what happens to partitions involving just
one $2$ and some $1$s. Set
\[ T_{nk} = G_{1^k21^{n-2-k}}\]
We know $X_n$ includes $\sum_{k=0}^{n-2} nT_{nk}$
so $\Z[X_n]$ by 1-synthesis has $\sum_{k=0}^{n-2} nT_{(n+1)k}$
We also know that the rhs of $\dagger$ includes
\[nG_{1^{n-1} [0,1]}\]
because there are $n$ different subsets of $[1,\ldots, n]$ that
exclude one element.

By 2-synthesis this gives us $2nG_{1^{n-1}2}$.

It seems clear we're meant to spread out the
$(\overbrace{n, \ldots, n}^{n-1}, 2n)$
vector to instead be
$(\overbrace{n+1, \ldots,  n+1}^n)$, i.e. $(n-1)n + 2n = (n+1)n$.
So the result of doing the Lie rearrangement is
\[ 2nG_{1^{n-1}2} + \sum_{k=0}^{n-2} nT_{(n+1)k} =
\sum_{k=0}^{n-2} (k+1)G_{1^{k}[12]1^{n-2-k}} +
\sum_{k=0}^{n-1} (n+1)T_{(n+1)k}
\]

\subsubsection{Cleanup after $2$-synthesis: $(2^*1^*)$}
What if we have more 2s? If $p_1,\ldots,p_N$ is a list of numbers,
then define an ordered partition $\pi_p$ by
\[ \pi_{p} = 1^{p_1}21^{p_2}2\cdots2 1^{p_{N-1}} 2 1^{p_N} \]
e.g.
\[ G_{\pi_{ijk}} = G_{1^i21^{j}21^k}\]
Define $P_n$ to be the set of $p$ that make sense for $n$, namely
\[P_n = \{ p\st \sum p = n-2|p|+2\}\]
Say $p \to^+ q$ if
$q$ does nothing but increments one of the numbers in $p$.

We know $X_n$ includes
\[\sum_{p \in P_n } {n!\over (n-|p|+1)!}G_{\pi_p}\]
e.g.
\[\sum_{i+j+k=n-4} n(n-1)\pi_{ijk}\]
So after doing 1-synthesis in $\Z[X_n]$ we surely have for $|p| = 3$
\[\sum_{i+j+k=n-4} n(n-1)G_{\pi_{ij(k+1)}}\]
And generally we would have
\[\sum_{p \in P_n } {n!\over (n-|p|+1)!}\pi_{p}G_1\]
Any 2-synthesis is going to come from picking out a 1 in between somewhere.
But they've already been moved to the right. Let's
\[\sum_{n_1 + n_2 + 1= n} \sum_{p_1 \in P_{n_1}} \sum_{p_2 \in P_{n_2}}
 {n!\over (n-|p|+1)!}\pi_{p_1}G_{[0,1]} \pi_{p_2}\]
which lives in $\Z[X_n]$,
into
\[\sum_{n_1 + n_2 + 1= n} \sum_{p_1 \in P_{n_1}} \sum_{p_2 \in P_{n_2}}
 {n!\over (n-|p|+1)!}\pi_{p_1p_2}\]
\subsection{Wait Before I Finish This}
I notice there's an unresolved ambiguity in how I `balance out' even
the $G_{(2211)}$ case. I'm not sure how to do it. I suppose I should try the $5\to 6$ case to see how it goes.
\vskip1em
\hrule
\vskip1em
How did it go? I found out there's specifically a ``degree of
freedom'' in how I push an extra $10G_{1212}$ around: I can
either start working on the left and reason
\[1212 = 2112 + [12]12\]
\[ = 2121 + 21[12] + [12]12\]
\[ = 2211 + 2[12]1 + 21[12] + [12]12\]
\[ = 2211 + 2[12]1 + 21[12] + 1[12]2 + [121]2\]
\[ = 2211 + 2[12]1 + 21[12] + 1[12]2 + 2[121] + [1212]\]
\[ = 2211 + 2[12]1 + 21[12] + 12[12] + 1[122] + 2[121] + [1212]\]
\[ = 2211 + 21[12] + 2[121] + 21[12] + 12[12] + 1[122] + 2[121] + [1212]\]
\[ = 2211 + 21[12] + 2[121] + 21[12] + 12[12] + 1[122] + 2[121] + [1212]\]
or start working on the right and do
\[1212 = 1221 + 12[12]\]
\[ = 2121 + [12]21 + 12[12]\]
\[ = 2211 + 2[12]1 + [12]21 + 12[12]\]
\[ = 2211 + 2[12]1 + 2[12]1 + [122]1 + 12[12]\]
\[ = 2211 + 2[12]1 + 2[12]1 + 1[122] + [1221] + 12[12]\]
\[ = 2211 + 2[12]1 + 21[12] + 2[121] + 1[122] + [1221] + 12[12]\]
\[ = 2211 + 21[12] + 2[121] + 21[12] + 2[121] + 1[122] + [1221] + 12[12]\]
rearranging I get
\[ = 2211 + 21[12] + 2[121] + 21[12] + 12[12] + 1[122] + 2[121] + [1221]\]
and so I see the only difference is between $[1212] = [[[G_1,G_2], G_1], G_2]$
and $[1221] = [[[G_1,G_2], G_2], G_1]$. But generally we have
\[[[[A,B], A], B] = [[[A,B], A]B - B[[A,B], A]\]
\[= ([A,B]A - A[A,B])B - B([A,B]A - A[A,B])\]
\[= ((AB - BA)A - A(AB - BA))B - B((AB - BA)A - A(AB - BA))\]
\[= (2ABA - BAA - AAB)B - B(2ABA - BAA - AAB)\]
\[= 2ABAB - BAAB - AABB - 2BABA + BBAA + BAAB\]
\[= 2ABAB - AABB - 2BABA + BBAA \]
\[= -2BABA + BBAA + 2ABAB - AABB\]
\[-[[[B,A], B], A]\]
\[[[[A,B], B], A]\]
So they're numerically the same.

Meanwhile there seemed to be some ambiguity about the $(321)$ resolution, but the needs of 3-synthesis forced my hand.

\subsection{Understanding $[0,\dash]$}
If I look at the order-6 `rule' that tells me
what $6!G_6$ is equal to, and I pick out just terms that start with 0,
I get
\[
 120G_{[05]} +  60G_{[0(41)]} +  60G_{[0(32)]} +
 20G_{[0(311)]} +  20G_{[0(221)]} + 5G_{[0(2111)]} + G_{[011111]}
\]
where parentheses mean as usual ``sum over all permutations of these'',
and brackets nest to the left. This is just a sum over $(k,n)$ partitions
with a factor of $n!/k!$ as I expect. It remains to understand the
coefficients on the remaining terms:
\[
 240G_{[1,5]} +
 120G_{[2,4]} +
 60G_{[[1,4],1]} +
 60G_{[[1,3],2]} + {}\]
\[
 10G_{[[[1,3],1],1]} +
 5G_{[[[1,2],2],1]} +
 5G_{[[[1,2],1],2]} +
 G_{[[[[1,2],1],1],1]} +
\]
\subsection{Understanding Synthesis Counts}
For a given partition $\lambda$, and a number $n$
how many times do I synthesize $\lambda n$? Let's look at the $5\to 6$ case.
\[\begin{tabular}{l|l|l}
$\lambda$&$n$&synthesis\\
\hline
4&2&$120 = 5!/1!$\\
(31)&2&$60 = 5!/2!$\\
22&2&$60 = 5!/2!$\\
(211)&2&$20 = 5!/3!$\\
1111&2&$5 = 5!/4!$\\
3&3&$60 = 5/2! / 1!$\\
(21)&3&$30 = 5!/2! / 2!$\\
111&3&$10 = 5!/2! / 3!$\\
2&4&$20 = 5!/3!/ 1!$\\
11&4&$10 = 5!/3! / 2!$\\
1&5&$5 = 5!/4! / 1!$\\
\end{tabular}\]
This is actually a pretty clear pattern. If I'm doing $m \to m+1$ (i.e. proving $\Z[X_m] = X_{m+1}$)
and I'm trying to synthesize $G_{\lambda n}$ then I think I have to do it with multiplicity
\[m! \over |\lambda|!(n-1)!\]
\subsection{Understanding $G_{[1n]}$ in rules}
Ok I notice that we have things like
\[6G_3 = \cdots + G_{[12]} + \cdots\]
\[24G_4 = \cdots + 6G_{[13]} + \cdots\]
\[120G_5 = \cdots + 36G_{[14]} + \cdots\]
\[720G_6 = \cdots + 240G_{[15]} + \cdots\]
How do I continue this sequence? Might be oeis sequence {\tt A001286}: $(n-1)n!/2$.
In the $2\to3$ move, I have $\Z[X_2] = 2\Z[G_2] + \Z[G_{11}]$ and I need to eventually make $3G_{21} + 3G_{12}$.
But I know synthesis counts: $G_{21}$ gets synthesized $2!\over 1!0!$ times, and $G_{12}$ gets synthesized $2!\over 1!1!$ times,
but $G_2$ synthesis creates a factor of 2, so I get $2G_{21} +4G_{12}$. So that means the total migration I need is $(4-2)/2$ copyies of $G_{[12]}$
to balance things out.

For a bigger example, let's say I'm doing $5\to 6$. Where do $G_{51}$ and $G_{15}$ come from? From 1- and 5-synthesis, respectively.
How many get synthesized? $5!/1!0! = 120$ and $5!/1!4! = 5$ times, respectively, but the latter comes with a built-in factor of $120$.
So I get $120G_{51} + 600G_{15}$. So I have to use $(600-120)/2 = 240$ copies of $G_{[15]}$. That checks out ok, good.
And indeed this is $(n-1)n!/2 = {n\choose 2}(n-1)!$ in general. (e.g. when $n=5$, I get ${5 \choose 2}4! = 10 \cdot 24 = 240$).
\subsection{Understanding $G_{[m_1m_2]}$ in rules}
What about that $120G_{[2,4]}$ that occurs in the order-6 rule? Let's say I'm doing $n \to n+1$ and I'm trying to balance $G_{(m_1m_2)}$.
When I do $m_1$-synthesis, I synthesize $n!/1!(m_1 - 1)!$ times, leading to $n!m_1!/(m_1 - 1)! = n!m_1$ copies of $G_{m_2m_1}$.
And I get $n!m_2$ copies of $G_{m_1m_2}$. So my rebalancing needs to have $(n!/2)(m_2-m_1)$ copies of $G_{[m_1m_2]}$.

Alternatively --- and I think this may be important for understanding `screened' terms ---
I could think of this as $(n!/2)m_2G_{[m_1m_2]} + (n!/2)m_1G_{[m_2m_1]}$.
\subsection{Understanding $G_{[(411)]}$ in rules}
Here's some synthesis counts, in the $5\to 6$ case. I'm aiming to explain that the coefficient of $G_{[141]}$ is 60.
\[\begin{tabular}{l|l|l|l}
$\lambda$&$n$&synthesis count&result\\
\hline
41&1&$60 = 5!/2!0!$&$60G_{411}$\\
14&1&$60 = 5!/2!0!$&$60G_{141}$\\
11&4&$ 10 = 5!/2!3!$&$240G_{114}$\\
\end{tabular}\]
Since I eventually want $6!/3! = 120$ copies of $G_{(411)}$ in my result, I need to migrate
$60G_{[14]1} + 120G_{1[14]}$, and I need to actually push the $[14]$ in $60G_{[14]1}$ to the right --- so that's where I get my
$60G_{[141]}$ from.

But here's a nother way of looking at this `balancing': I could try to
spread all the $60G_{411}$ out, independently of the $60G_{141}$ and
the $240G_{114}$.

This would mean
\[ 40G_{[41]1} + 20G_{1[41]} + 20G_{[14]1} + 20G_{1[41]} + 160G_{1[14]} + 80G_{[14]1} \]
\[ = 40G_{[411]} + 100G_{[141]}  + \cdots\]
which does net the right result at least.
\subsection{Understanding $G_{[(abc)]}$ in rules}
 Let's suppose we're doing an $n \to n+1$ step, so $a + b + c = n+1$.
\[\begin{tabular}{l|l|l|l}
$\lambda$&$m$&synthesis count&result\\
\hline
$ab$&$c$&$ n!/2!(c-1)!$&$(cn!/2)G_{abc}$\\
$ac$&$b$&$ n!/2!(b-1)!$&$(bn!/2)G_{acb}$\\
$ba$&$c$&$ n!/2!(c-1)!$&$(cn!/2)G_{bac}$\\
$ca$&$b$&$ n!/2!(b-1)!$&$(bn!/2)G_{cab}$\\
$bc$&$a$&$ n!/2!(a-1)!$&$(an!/2)G_{bca}$\\
$cb$&$a$&$ n!/2!(a-1)!$&$(an!/2)G_{cba}$\\
\end{tabular}\]
Let's check this is right with $G_{(321)}$. I should see in code
\[\begin{tabular}{l|l|l|l}
$\lambda$&$m$&synthesis count&result\\
\hline
$32$&$1$&$60= 5!/2!0!$&$60G_{321} = (1\cdot 5!/2)G_{321}$\\
$31$&$2$&$60= 5!/2!1!$&$120G_{312} = (2\cdot 5!/2)G_{312}$\\
$23$&$1$&$60= 5!/2!0!$&$60G_{231} = (1\cdot 5!/2)G_{231}$\\
$13$&$2$&$60= 5!/2!1!$&$120G_{132} = (2\cdot 5!/2)G_{132}$\\
$21$&$3$&$30= 5!/2!2!$&$180G_{213}= (3\cdot 5!/2)G_{213}$\\
$12$&$3$&$30= 5!/2!2!$&$180G_{123} = (3\cdot 5!/2)G_{123}$\\
\end{tabular}\]
And yeah, this is what I saw.

I can reason


\[ (n!/2) \left(\sum_{abc \in S_3(abc)} zG_{xyz}\right) \]
\[ {n!\over 3!} \left(\sum_{xyz \in S_3(abc)} 2zG_{xyz} +\sum_{xyz \in S_3(abc)}  zG_{xyz}\right) \]
\[ {n!\over 3!} \left(\sum_{xyz \in S_3(abc)} (2zG_{xzy} + 2zG_{x[yz]}) +\sum_{xyz \in S_3(abc)}  zG_{xyz}\right) \]
\[ {n!\over 3!} \left(\sum_{xyz \in S_3(abc)} (2yG_{xyz} + 2yG_{x[zy]}) +\sum_{xyz \in S_3(abc)}  zG_{xyz}\right) \]
\[ {n!\over 3!} \left(\sum_{xyz \in S_3(abc)} (yG_{xyz} + 2yG_{x[zy]}) +\sum_{xyz \in S_3(abc)}  (y+z)G_{xyz}\right) \]
\[ {n!\over 3!} \left(\sum_{xyz \in S_3(abc)} (yG_{yxz} + yG_{[xy]z} + 2yG_{x[zy]}) +\sum_{xyz \in S_3(abc)}  (y+z)G_{xyz}\right) \]
\[ {n!\over 3!} \left(\sum_{xyz \in S_3(abc)} (xG_{xyz} + xG_{[yx]z} + 2xG_{y[zx]}) +\sum_{xyz \in S_3(abc)}  (y+z)G_{xyz}\right) \]
\[ {n!\over 3!} \left(\sum_{xyz \in S_3(abc)} (xG_{[yx]z} + 2xG_{y[zx]}) +\sum_{xyz \in S_3(abc)}  (x+y+z)G_{xyz}\right) \]
\[ {n!\over 2!}{a+b+c\over 3} \left(G_{(abc)} + \sum_{xyz \in S_3(abc)} (xG_{[yx]z} + 2xG_{y[zx]})  \right) \]


I can do the same general trick with an arbitrary number of items:
\[ \sum_{abcd} 4dG_{abcd} \]
\[ \sum_{abcd} 3dG_{abcd} + \sum_{abcd} dG_{abcd} \]
\[ \sum_{abcd} 3dG_{abdc} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} dG_{abcd} \]
\[ \sum_{abcd} 3cG_{abcd} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} dG_{abcd} \]
\[ \sum_{abcd} 2cG_{abcd} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} (c+d)G_{abcd} \]
\[ \sum_{abcd} 2cG_{acbd} + \sum_{abcd} 2cG_{a[bc]d} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} (c+d)G_{abcd} \]
\[ \sum_{abcd} 2bG_{abcd} + \sum_{abcd} 2cG_{a[bc]d} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} (c+d)G_{abcd} \]
\[ \sum_{abcd} bG_{abcd} + \sum_{abcd} 2cG_{a[bc]d} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} (b+c+d)G_{abcd} \]
\[ \sum_{abcd} bG_{bacd} + \sum_{abcd} bG_{[ab]cd} + \sum_{abcd} 2cG_{a[bc]d} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} (b+c+d)G_{abcd} \]
\[ \sum_{abcd} aG_{abcd} + \sum_{abcd} bG_{[ab]cd} + \sum_{abcd} 2cG_{a[bc]d} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} (b+c+d)G_{abcd} \]
\[ \sum_{abcd} bG_{[ab]cd} + \sum_{abcd} 2cG_{a[bc]d} + \sum_{abcd} 3dG_{ab[cd]} + \sum_{abcd} (a+b+c+d)G_{abcd} \]


\subsection{Small Examples Again}
How does this aggressive general rebalancing look on small examples?
Start with $\Z[G_2] = 2\Z[G_2] + \Z[G_{11}] = 2G_{[02]} + 2G_{21} + G_{[01]1} + G_{1[01]} + G_{111}$.
Do motion of $[01]$ to get
\[ 2G_{[02]} + 2G_{21} + G_{[011]} + 2G_{1[01]} + G_{111}\]
Do $G_2$ synthesis to get
\[ 2G_{[02]} + 2G_{21} + G_{[011]} + 4G_{12} + G_{111}\]
Now I think general rebalancing says that we reason
\[2G_{21} + 2\cdot 2G_{12} \]
\[= G_{21} + G_{21} + 2G_{12} + 2G_{12} \]
\[= G_{[21]}  + 2G_{[12]} + 3G_{(12)} \]
So we conclude $6G_3 = 2G_{[02]} + G_{[21]}  + 2G_{[12]} + G_{[011]}$.

\end{document}
