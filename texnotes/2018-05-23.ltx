\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{stmaryrd}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\fdom{\mathbf{d}f}
\def\fcod{\mathbf{e}f}
\def\thn{\mathrel|}
\def\coe{\mathsf{coe}}
\def\bpush{\mathbf{push}}
\def\bpull{\mathbf{pull}}

\def\wo{\setminus}
\def\fA{\mathsf{A}}
\def\fC{\mathsf{C}}
\def\fX{\mathsf{X}}
\def\ff{\mathsf{f}}
\def\fm{\mathsf{m}}
\def\rspan{\mathsf{Span}}
% \def\El#1{\mathsf{El}({#1})}
\def\El#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}
\def\mor#1#2{#1 \to \underline{#2}}

\def\ridp{\mathsf{idp}}
\def\ssem#1{\langle\!\langle{#1}\rangle\!\rangle}

\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{orange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.9}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=orange,colback=orange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{\mathbin{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{{\mathsf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\G{\mathbf{G}}
\def\S{\mathbf{S}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}



\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\def\tensor{\otimes}
\def\htensor{\mathrel{\hat\otimes}}
\def\lol{\multimap}
\def\hlol{\mathrel{\hat\multimap}}
\def\wtf{{\color{red}???}}

\def\re{\mathbf{E}}
\def\sh{\sharp}
\def\shp{\mathrel{\sharp}}
\def\zero{\texttt{0}}
\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}

\section{Just Thinking About Notation}

\def\rs{{\sqsupset}}
\def\ls{{\sqsubset}}
\def\ll{\mathsf{L}}
\def\rr{\mathsf{R}}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\ccc{\mathsf{C}}
\def\ddd{\mathsf{D}}
\def\tw{{\bullet}}

What if, for
\[\tau \qquad = \qquad \begin{tikzcd}
  \delta' \ar[r, "\psi"]\ar[d, "\tau_1"'] & \epsilon'\ar[from=d, "\tau_2"']\\
  \delta \ar[r, "\phi"']& \epsilon
\end{tikzcd}\]
I define $\ll \tau = \tau_1$ and $\rr \tau = \tau_2$
and $\cc \tau = \phi$ and $\dd \tau = \psi$
and
\[\tw \tau =
\begin{tikzcd}
  \tw\delta' \ar[from=r, "\tw\psi"']\ar[from=d, "\tw{\tau_1}"] & \tw\epsilon'\ar[d, "\tw{\tau_2}"]\\
  \tw\delta \ar[from=r, "\tw\phi"]& \tw\epsilon
\end{tikzcd}\]
 \begin{defnbox}
   \(
   \ls \tau  = \begin{tikzcd}
     \delta' \ar[r, "\psi"]\ar[d, equal] & \epsilon'\ar[from=d, "\tau_2 \o \phi"']\\
     \delta' \ar[r, "\tau_1"']& \delta
   \end{tikzcd}
   \qquad
   \rs \tau  = \begin{tikzcd}
     \delta' \ar[r, "\psi"]\ar[d, "\phi \o \tau_1"'] & \epsilon'\ar[from=d, equal]\\
     \epsilon \ar[r, "\tau_2"']& \epsilon'
   \end{tikzcd}
\)
 \end{defnbox}
A general $\tau$ can be written
\[\tau \qquad = \qquad \begin{tikzcd}
  \ddd\dd\tau \ar[r, "\dd \tau"]\ar[d, "\ll \tau"'] & \ccc\dd\tau\ar[from=d, "\rr \tau"']\\
  \ddd\cc\tau \ar[r, "\cc \tau"']& \ccc\cc\tau
\end{tikzcd}\]
with $\ddd$ and $\ccc$ being domain and codomain in $\sem \Delta$.
\begin{thmbox}
$\ls \tau : \dd \tau \to \ll \tau  $\\
$\rs \tau : \dd \tau \to \rr \tau  $\\

\begin{tabular}{ll}
$\ll \ls \tau = \ddd \dd \tau  $&$ \rr \ls \tau = \rr \tau  \o \cc \tau$\\
$\ll \rs \tau = \cc \tau \o \ll \tau $&$ \rr \rs \tau = \ccc \dd \tau $\\
$\tw \ll \tau = \rr \tw \tau $&$ \tw \rr \tau = \ll \tw \tau$\\
$\tw \ls \tau = \rs \tw \tau $&$ \tw \rs \tau = \ls \tw \tau$\\
$\tw \ccc \tau = \ddd \tw \tau $&$ \tw \ddd \tau = \ccc \tw \tau$\\
$\tw \cc \tau = \cc \tw \tau $&$ \tw \dd \tau = \dd \tw \tau$\\
$\ll (\tau \o \sigma) = \ll \tau \o \ll \sigma$&
$\rr (\tau \o \sigma) = \rr \tau \o \rr \sigma$\\
\end{tabular}
\end{thmbox}
\[
\erule
{\ll x = \ll y\qquad \rr x = \rr y}
{x = y}
\]
Want to prove things like
\[{\ls \ll \tau} \o {\ls \tau}  = {\ls\dd \tau} \qquad
{\ls \cc \tau} \o \tau = {\rs \ll \tau } \o {\ls \tau}\]
Hm I don't think this is much easier than doing it diagrammatically.
\section{Working Out Duals}
\[(\Gamma, x - A)_\phi = (\Gamma^\op, x + A)^\op_\phi\]
\[ = (\Gamma^\op, x + A)_{\bar \phi} \]
\[ = (g : \Gamma^\op_{\bar \phi}) \x A_{\dd \bar \phi}( \Gamma^\op_{\ltri\bar\phi} g ) \]
\[ = (g : \Gamma_\phi) \x A_{\overline{\cc  \phi}}( \Gamma_{\rtri\phi} g ) \]
\[ (\Gamma, x - A)_\tau (g, a) = (\Gamma^\op, x + A)^\op_\phi \]
\[ = (\Gamma^\op_{\bar \tau} g, A_{\ll \bar \tau}(\Gamma^\op_{\ltri \bar \tau}g , a) ) \]
\[ = (\Gamma_\tau g, A_{\overline{\rr \tau}}(\Gamma_{ \rtri \tau}g , a) ) \]

\section{Are Signed Variables Necessary?}

If I have unsigned variables in $\Delta$, is there a way of
`automatically doing the right thing' with respect to variables in
$\Gamma$ without knowing a priori what sign they are?

%% Recall that it's the $\Pi$ and $\Sigma$ rules that motivated this marking in the first place.
%% $\alpha + \C ; \Gamma, x + A \prov B : \rtype$ has morphism interpretation
%% \[(\alpha : \C) : \Gamma\]

I think I can reduce confusion by being more explicit about how I've
really been treating variables up to this point. There is an operation
$\Delta\mapsto\Delta^\op$ which takes $\alpha : \C$ to $\alpha :
\C^\op$ (or, if you like, $\alpha + \C$ to $\alpha - \C$ and
vice-versa)

The operation $\Gamma \mapsto \Gamma^\op$ does
\begin{defnbox}
  \begin{tabular}{lll}
    $(\Gamma, x + A)^\op$&$=$&$\Gamma^\op, x - A$\\
    $(\Gamma, x - A)^\op$&$=$&$\Gamma^\op, x + A$\\
  \end{tabular}
\end{defnbox}
and satisfies
\begin{thmbox}
  If $\Delta \prov \Gamma \rctx$, then $\Delta^\op \prov \Gamma^\op \rctx$
\end{thmbox}
where context formation is given by
\[
\erule
{\Delta \prov \Gamma \rctx\qquad \Delta \thn \Gamma \prov A :\rtype}
{\Delta \prov \Gamma, x + A \rctx}
\qquad
\erule
{\Delta \prov \Gamma \rctx\qquad \Delta^\op \thn \Gamma^\op \prov A :\rtype}
{\Delta \prov \Gamma, x - A \rctx}
\]
But there's also a substitution operation on $\Delta$s.
We have
\[
\erule
{\alpha : \C \in \Delta}
{\Delta \prov \alpha : \C}
\qquad
\erule
{\alpha : \C \in \Delta}
{\Delta \prov \bar\alpha : \C^\op}
\qquad
\erule
{\Delta \prov t_i : \C_i \qquad F : \C_1 \x \cdots \C_n \to \C}
{\Delta \prov F(t_1, \ldots, t_n)  : \C}
\]
\[
\erule
{\Delta \prov \theta : \Delta' \qquad \Delta \prov t  : \C}
{\Delta \prov \theta[t / \alpha] : \Delta', \alpha : \C}
\]
so we expect a substitution theorem
\begin{thmbox}
  If $\Delta \prov \theta : \Delta'$ and $\Delta' \prov J$, then $\Delta \prov \theta J$.
\end{thmbox}
The thing we can do to variables $\bar \alpha$ extends to a general operation
 $t^\op$ on terms
\begin{defnbox}
  \begin{tabular}{lll}
    $ \alpha^\op$&$=$&$\bar\alpha$\\
    $ \bar\alpha^\op$&$=$&$\alpha$\\
    $(F(t_1, \ldots, t_n))^\op$&$=$&$F^\op(t_1^\op, \ldots, t_n^\op)$\\
  \end{tabular}
\end{defnbox}
which satisfies
\begin{thmbox}
  If $\Delta \prov t : \C$ then $\Delta \prov  t^\op : \C^\op$
\end{thmbox}

There's an operation we can do from the other side, which arises from a canonical
substitution $\Delta^\op \prov \mathsf{rev}_\Delta : \Delta$. For every $\alpha : C$
in $\Delta$, we have $[\bar\alpha / \alpha]$ in $\mathsf{rev}_\Delta$. We write
$\mathsf{rev_\Delta}$ applied to some thing $A$, $t$, etc. as
 $\bar A$, $\bar t$, etc. So the substitution theorem gives us that
\begin{thmbox}
  If $\Delta \prov t : \C$, then $\Delta^\op \prov \bar t : \C$\\
  If $\Delta \thn \Gamma \prov A : \rtype$, then $\Delta^\op \thn \bar \Gamma \prov  \bar A : \rtype$
\end{thmbox}

Ok, what then is the definition of substitution when we hit variables?
\[[t/\alpha]\bar\alpha =  ?\]
We have $\Delta \prov t : \C$ and $\alpha : \C \in \Delta'$, so
$\Delta \prov \bar \alpha : \C^\op$, so we need $\Delta \prov [t/\alpha]\bar \alpha : \C^\op$.
The sensible thing to do is
\[[t/\alpha]\bar\alpha =  t^\op\]
Apart from that, carrying out substitutions is the homomorphism we expect it to be.


\section{Major Worry About the Variable Rule}
Suppose I have
\[\alpha : \C \prov A(\alpha) : \rtype\]
\[\alpha : \C^\op ; x - A(\alpha) \prov B(\alpha^\op, x) : \rtype\]
\[\alpha : \C ; x - A(\alpha^\op) \prov B(\alpha, x) : \rtype\]
I should then be able to make something resembling
\[\alpha : \C ; x +  A(\alpha) , y -  B(\alpha^\op, x) \prov y : B(\alpha^\op, x)\]

assuming

\[
\erule
{\Delta^\op ; \Gamma^\op \prov A : \rtype}
{\Delta \prov \Gamma, x - A \rctx}
\]
But no way do we have
\[\alpha : \C ; x + A(\alpha) \prov B(\alpha^\op, x) : \rtype\]
but neither do we have
\[\alpha : \C ; x + A(\alpha) \prov B(\alpha, x) : \rtype\]
Maybe we need a notion of $x^\op$ at the term level to indicate use of negative
term variables.
\[
\erule
{}
{\Delta ; \Gamma, x - A \prov x^\dag : \dag \bar A}
\]

We know $\Delta^\op ; \Gamma^\op \prov A : \rtype$. And so
$\Delta ; \Gamma^\dag \prov \bar A : \rtype$. Is there, like...
a substitution $\Gamma^\dag \prov \omega_\Gamma : \Gamma$? That seems like
a lot to ask for.

Let's try this with different syntax.
% $\triangledown$ $\bigcirc$ $\downarrow$ $\sim$ $\lnot$
\noindent
\def\flip{{\sim}}
\def\opp{{-}}
\def\dag{{\dagger}}
\begin{tabbing}
$\flip \Delta$ means replace $\C$ with $\C^\op$.\\
Also $\flip$ is a substitution. $\flip \Delta \prov \flip : \Delta$.\\
$\flip\Gamma, \flip A, \flip t$ means carry out that substitution.\\
\\
If $\Delta \prov \Gamma \rctx$, then $\flip \Delta \prov \flip \Gamma  \rctx$\\
If $\Delta \prov J$, then $\flip \Delta \prov \flip J$\\
\\
$\opp \Gamma$ means flip the signs in $\Gamma$ everywhere\\
$\dag \Gamma = \opp \flip \Gamma = \flip \opp \Gamma$ \\
Also $\dag$ is a substitution. $\dag \Gamma \prov \dag : \Gamma$.\\
If $\Delta ; \Gamma \prov J$, then $\Delta; \dag \Gamma \prov \dag J$.\\
\end{tabbing}
Since we have
\[
\erule
{\alpha : \C \in \Delta}
{\Delta \prov \bar \alpha : \C^\op}
\]
we need to define $\bar t$, but we can.
The existence of the substitution $\dag$ means that we must be able to do
\[\Delta ; x - \flip A \prov \dag x : A\]
So I can make this my variable rule
\[
\erule
{x - A \in \Gamma }
{\Delta ; \Gamma \prov  x^* : \flip \dag A}
\]
and the context formation rule is
\[
\erule
{\flip \Delta; \opp \Gamma \prov A : \rtype}
{\Delta ; \Gamma, x - A \rctx}
\]
Let me really stare at the substitution formation rule to see if I believe it.
It's normally
\[
\erule
{\Gamma \prov \theta : \Gamma' \qquad \Gamma \prov M : \theta A}
{\Gamma \prov \theta[M/x] : \Gamma', x : A}
\]
and so here I have
\[
\erule
{\dag \Gamma \prov \theta : \dag_\Gamma \qquad \dag\Gamma, x - \flip A \prov x^* : \dag_\Gamma A}
{\dag \Gamma, x - \flip A \prov \dag_\Gamma[x^*/x] : \Gamma, x + A}
\]
Okay, it seems like the essence of this is that there is a
substitution that swaps $x$ for $x^*$ everywhere.

\subsection{Notation Churn wieder einmal}

\def\fls{{\sim}}
\def\flb{\lnot}
$\Delta^\op$ means exchange $\C$ and $\C^\op$.
$\Gamma^\op$ means exchange $+$ and $-$.
At the bottom of category expressions, you can say $\alpha$ or $\bar \alpha$.
At the bottom of term expressions, you can say $x$ or $x^*$. There's
a substitution that flips all $\alpha$ variables, called $\flb$.
There's a substitution that flips all $x$ variables to $x^*$, called $\fls$.
$\dag\Gamma$ abbreviates $\flb \Gamma^\op$.
\begin{thmbox}
  If $\Delta \prov \Gamma \rctx$, then $\Delta^\op \prov \Gamma^\op \rctx$\\
  If $\Delta \prov J$, then $\Delta^\op \prov \flb J$\\
  \textcolor{bluegray}{If $\Delta \prov \Gamma \rctx$, then $\Delta \prov \dag\Gamma \rctx$}\\
  If $\Delta; \Gamma \prov J$, then $\Delta; \dag \Gamma \prov \fls J$
\end{thmbox}
\[
\erule
{\Delta \prov \Gamma \rctx \qquad \Delta;\Gamma \prov A : \rtype}
{\Delta \prov \Gamma, x + A \rctx }
\qquad
\erule
{\Delta \prov \Gamma \rctx \qquad \Delta^\op;\Gamma^\op \prov A : \rtype}
{\Delta \prov \Gamma, x - A \rctx }
\]
\[
\erule
{ \alpha : \C \in \Delta}
{\Delta  \prov \alpha : \C}
\qquad
\erule
{ \alpha : \C \in \Delta}
{\Delta  \prov \bar\alpha : \C^\op}
\]
\[
\erule
{ x+ A \in \Gamma}
{\Delta ; \Gamma \prov x :  A}
\qquad
\erule
{ x- A \in \Gamma}
{\Delta ; \Gamma \prov x^* : \fls\flb A}
\]
Oberve that
\[x - A \in \Gamma\]
\[\imp \Delta^\op;\Gamma^\op \prov A : \rtype\]
\[\imp \Delta;\flb\Gamma^\op \prov \flb A : \rtype\]
\[\imp \Delta;\Gamma \prov \fls\flb A : \rtype\]
Category substitutions work like
\[
\erule
{\Delta \prov \theta : \Delta' \qquad \Delta \prov t : \C}
{\Delta \prov \theta[t/\alpha] : \Delta', \alpha : \C}
\]
Term substitutions work like
\[
\erule
{\Delta;\Gamma \prov \sigma : \Gamma' \qquad \Delta;\Gamma \prov M : \sigma A}
{\Delta;\Gamma \prov \sigma[M/x] : \Gamma', x + A}
\qquad
\erule
{\Delta;\Gamma \prov \sigma : \Gamma' \qquad \Delta;\Gamma \prov M : \sigma \fls\flb A}
{\Delta;\Gamma \prov \sigma[M/x^*] : \Gamma', x - A}
\]
The one-variable version of these substitution principles looks like
\begin{thmbox}
  If $\Delta \prov t : \C$, and $\Delta, \alpha : \C \prov J$, then $\Delta \prov [t/\alpha]J$.\\
  If $\Delta; \Gamma \prov M : A$, and $\Delta; \Gamma, x + A \prov J$,
then $\Delta; \Gamma\prov [M/x]J$.\\
  If $\Delta; \Gamma \prov M : \fls\flb A$, and $\Delta; \Gamma, x - A \prov J$,
then $\Delta; \Gamma\prov [M/x^*]J$.
\end{thmbox}

I should be able to construct concrete substitutions that realize $\flb$ and $\fls$.
Let's try.

\[
\erule
{\Delta^\op, \alpha: \C^\op \prov \theta : \Delta \qquad \Delta^\op, \alpha: \C^\op \prov \bar\alpha : \C}
{\Delta^\op, \alpha: \C^\op \prov \theta[\bar\alpha/\alpha] : \Delta, \alpha : \C}
\]
That works just fine. Then, with ambient $\Delta$, we can do the $\sigma$
that realizes $\fls$.
\[
\erule
{\dag\Gamma \prov \sigma : \Gamma \qquad \dag\Gamma, x + \lnot A \prov x : \sigma \fls \flb A}
{\dag\Gamma, x + \lnot A \prov \sigma[x^*/x] : \Gamma, x - A}
\]
\[
\erule
{\dag\Gamma \prov \sigma : \Gamma \qquad \dag\Gamma, x - \lnot A \prov x^* : \sigma A}
{\dag\Gamma, x - \lnot A \prov \sigma[x^*/x] : \Gamma, x + A}
\]
When substitutions reach the end, I need to actually do an operation on the term.
\[[t/\alpha](\bar\alpha) = \bar t\]
\[[M/x^*](x^*) = M\]
The contract of these is
\begin{thmbox}
  If $\Delta \prov t : \C$, then $\Delta\prov \bar t : \C^\op$.
\end{thmbox}
Wait, hm. This is making it seem like an assumption $x - A$ is really just the same
thing as an assumption $x + \fls\flb A$.
\subsection{Getting Rid of Signed $\Gamma$ After All?}
Maybe I can push most of the complication of the bubble all the way into $\Pi$ types.
The framework need only have a notion of $\Delta \mapsto \Delta^\op$ and $\flb$.
All assumptions in $\Gamma$ work like $x + A$, then.  The hope is that forward transport
in $A$ looks like backward transport in $\flb A$.

\begin{thmbox}
  If $\Delta \prov J$, then $\Delta^\op \prov \flb J$
\end{thmbox}
\[
\erule
{\Delta \prov \Gamma \rctx \qquad \Delta;\Gamma \prov A : \rtype}
{\Delta \prov \Gamma, x : A \rctx }
\qquad
\textcolor{bluegray}{
\erule
{\Delta \prov \Gamma \rctx \qquad \Delta^\op;\lnot \Gamma \prov A : \rtype}
{\Delta \prov \Gamma, x : \lnot A \rctx }
}
\]
\[
\erule
{ \alpha : \C \in \Delta}
{\Delta  \prov \alpha : \C}
\qquad
\erule
{ \alpha : \C \in \Delta}
{\Delta  \prov \bar\alpha : \C^\op}
\qquad
\erule
{ x: A \in \Gamma}
{\Delta ; \Gamma \prov x :  A}
\]
Category substitutions work like
\[
\erule
{\Delta \prov \theta : \Delta' \qquad \Delta \prov t : \C}
{\Delta \prov \theta[t/\alpha] : \Delta', \alpha : \C}
\]
Term substitutions work like
\[
\erule
{\Delta;\Gamma \prov \sigma : \Gamma' \qquad \Delta;\Gamma \prov M : \sigma A}
{\Delta;\Gamma \prov \sigma[M/x] : \Gamma', x + A}
\]
The one-variable version of these substitution principles looks like
\begin{thmbox}
  If $\Delta \prov t : \C$, and $\Delta, \alpha : \C \prov J$, then $\Delta \prov [t/\alpha]J$.\\
  If $\Delta; \Gamma \prov M : A$, and $\Delta; \Gamma, x + A \prov J$,
then $\Delta; \Gamma\prov [M/x]J$.
\end{thmbox}

I should be able to construct concrete substitutions that realize $\flb$.
Let's try.

\[
\erule
{\Delta^\op, \alpha: \C^\op \prov \theta : \Delta \qquad \Delta^\op, \alpha: \C^\op \prov \bar\alpha : \C}
{\Delta^\op, \alpha: \C^\op \prov \theta[\bar\alpha/\alpha] : \Delta, \alpha : \C}
\]
That works just fine.
When category substitution reaches a flipped variable,
 I need to actually do an operation on the term.
\[[t/\alpha](\bar\alpha) = \bar t\]
The contract of this is
\begin{thmbox}
  If $\Delta \prov t : \C$, then $\Delta\prov \bar t : \C^\op$.
\end{thmbox}

The $\Pi$ formation rule might look like
\[
\erule
{\Delta ; \Gamma \prov \flb A : \rtype \qquad \Delta ; \Gamma, x : \flb A \prov B : \rtype}
{\Delta ; \Gamma \prov (x : A) \to B : \rtype}
\]
\subsection{Then How Does the Semantics Look?}
We'd still have
\begin{declbox}
  $\Gamma_\phi : \rtype$.\\
  $\Gamma_\tau : \Gamma_{\dd \tau} \to \Gamma_{\cc \tau} $\\
  $A_\delta : \Gamma_\delta \to \rtype$\\
  $A_\phi : (g : \Gamma_\phi) \to A_{\dd \phi}(\Gamma_{\ltri\phi} g) \to A_{\cc \phi}(\Gamma_{\rtri\phi} g)$
\end{declbox}
and define:
\begin{defnbox}
 $(\cdot)_\phi = \bone$\\
 $(\Gamma, x + A)_\phi = (g : \Gamma_\phi) \x A_{\dd \phi}( \Gamma_{\ltri\phi} g )$\\
 $(\cdot)_\tau = {!}$\\
 $(\Gamma, x + A)_\tau (g, a) = (\Gamma_\tau g, A_{\ll \tau}(\Gamma_{\ltri \tau}g , a) ) $
\end{defnbox}
The real litmus test here is whether the morphism part of the semantics for $\Pi$
still can be made to have even the right type.

Let's try
\[
\erule
{\Delta ; \Gamma \prov  A : \rtype \qquad \Delta ; \Gamma, x :  A \prov B : \rtype}
{\Delta ; \Gamma \prov (x : A) \to B : \rtype}
\]



\[( (x : A) \to B)_\delta(g) = (x : \bar A_{\bar \delta}(g)) \to B_\delta(g, x) \]
This means I need
\[( (x : A) \to B)_\phi(g) :
((x : \bar A_{\bar \delta}(g)) \to B_\delta(g, x))
\to
(x : \bar A_{\bar \epsilon}(g)) \to B_\epsilon(g, x)\]
which means $B$ is receptive to
\[g : \Gamma_\delta, x : \bar A_{\bar \delta}(g) \prov B_\delta(g, x) \]
so I set
\[( (x : A) \to B)_\phi(g,f) : \lambda x . B_\phi(g, f (\bar A_{\bar \phi} (g,x)))\]


\begin{thmbox}
  $\bar \Gamma_{\bar\delta} = \Gamma_{ \delta}$\\
  If $\Delta;\Gamma \prov A : \rtype$, then $(g : \Gamma_{\delta}) \to \bar A_{\bar\delta}(g) = A_{ \delta}(g)$
\end{thmbox}

\section{Do I need types' object parts to equal their dual?}
I have $\Delta \mapsto \Delta^\op$.\\
I know that if $\Delta \prov J$, then $\Delta^\op \prov \bar J$.
\begin{declbox}
  $\Gamma_\phi : \rtype$.\\
  $\Gamma_\tau : \Gamma_{\psi} \to \Gamma_{\phi} $\\
  $A_\delta : \Gamma_\delta \to \rtype$\\
  $A_\phi : (g : \Gamma_\phi) \to A_{\delta}(\Gamma_{\ltri\phi} g) \to A_{\epsilon}(\Gamma_{\rtri\phi} g)$
\end{declbox}
\begin{defnbox}
 $(\Gamma, x + A)_\phi = (g : \Gamma_\phi) \x A_{\delta}( \Gamma_{\ltri\phi} g )$\\
 $(\Gamma, x + A)_\tau (g, a) = (\Gamma_\tau g, A_{\tau_1}(\Gamma_{\ltri \tau}g , a) ) $
\end{defnbox}
I think the object part of the interpretation of functions looks like
\[( (x : A) \to B)_\delta(g) = (x : \bar A_{\bar \delta}(g)) \to B_\delta(g, x) \]
What type is $\bar A_{\bar \delta}$? Well, $\Delta^\op; \bar \Gamma \prov \bar A : \rtype$, so
$\bar A_{\bar \delta} : \bar \Gamma_{\bar \delta} \to \rtype$. So I need
\begin{thmbox}
  $\bar \Gamma_{\bar\delta} = \Gamma_{ \delta}$
\end{thmbox}
How to prove this? I need
\[(g : \bar\Gamma_{\bar \delta}) \x \bar A_{\bar \delta}( \bar \Gamma_{\ltri\bar\delta} g ) = (g : \Gamma_\delta) \x A_{\delta}( \Gamma_{\ltri\delta} g )\]
Okay, so, yeah it does seem like I need
\[(g : \Gamma_{\delta}) \to \bar A_{\bar \delta}( g ) =  A_{\delta}(g )\]
to prove this. This weirds me out but maybe it's ok?

\section{How far can I get with that}
I have $\Delta \mapsto \Delta^\op$.\\
I know that if $\Delta \prov J$, then $\Delta^\op \prov \bar J$.
\begin{declbox}
  $\Gamma_\phi : \rtype$.\\
  $\Gamma_\tau : \Gamma_{\psi} \to \Gamma_{\phi} $\\
  $A_\delta : \Gamma_\delta \to \rtype$\\
  $A_\phi : (g : \Gamma_\phi) \to A_{\delta}(\Gamma_{\ltri\phi} g) \to A_{\epsilon}(\Gamma_{\rtri\phi} g)$
\end{declbox}
\begin{defnbox}
 $(\Gamma, x + A)_\phi = (g : \Gamma_\phi) \x A_{\delta}( \Gamma_{\ltri\phi} g )$\\
 $(\Gamma, x + A)_\tau (g, a) = (\Gamma_\tau g, A_{\tau_1}(\Gamma_{\ltri \tau}g , a) ) $
\end{defnbox}
\begin{thmbox}
  $\bar \Gamma_{\bar\delta} = \Gamma_{ \delta}$\\
  $(g : \Gamma_{\delta}) \to \bar A_{\bar \delta}( g ) =  A_{\delta}(g )$
\end{thmbox}
The object part of the interpretation of functions is

\[( (x : A) \to B)_\delta(g) = (x :  A_{ \delta}(g)) \to B_\delta(g, x)\]
And the morphism part needs to be
\[( (x : A) \to B)_\phi : (g : \Gamma_\phi)
  \to ((x : A) \to B)_{\delta}(\Gamma_{\ltri\phi} g) \to ((x : A) \to B)_{\epsilon}(\Gamma_{\rtri\phi} g)\]
i.e.
\[( (x : A) \to B)_\phi : (g : \Gamma_\phi)\]
\[  \to ( (x : A_\delta(\Gamma_{\ltri\phi }g)) \to  B_\delta(\Gamma_{\ltri\phi }g, x)) \]
\[  \to ( (x : A_\epsilon(\Gamma_{\rtri\phi }g)) \to  B_\epsilon(\Gamma_{\rtri\phi }g, x)) \]
So we're going to set
\[ ( (x : A) \to B)_\phi(g, f) = \lambda x . B_\phi((g, \bar A_{\bar \phi}(g, x)), f(\bar A_{\bar \phi}(g, x)))\]
and try to typecheck it.
Since I have
\[{\bar A}_{\bar \phi} : (g : {\bar \Gamma}_{\bar \phi}) \to {\bar A}_{\bar \epsilon}({\bar \Gamma}_{\ltri{\bar \phi}} g) \to {\bar A}_{\bar \delta}({\bar \Gamma}_{\rtri{\bar \phi}} g)\]
%% \[B_\delta : (\Gamma, x : A)_\delta \to \rtype\]
\[B_\delta : (g : \Gamma_\delta) (a :  A_{\delta}(  g )) \to \rtype\]
%% \[B_\phi : (g : (\Gamma, x : A)_\phi) \to B_{\delta}((\Gamma, x : A)_{\ltri\phi} g) \to B_{\epsilon}((\Gamma, x : A)_{\rtri\phi} g)\]
%% \[B_\phi : (g : \Gamma_\phi) (a : A_{\delta}( \Gamma_{\ltri\phi} g )) \to B_{\delta}((\Gamma, x : A)_{\ltri\phi} (g, a)) \to B_{\epsilon}((\Gamma, x : A)_{\rtri\phi} (g, a))\]
\[B_\phi : (g : \Gamma_\phi) (a : A_{\delta}( \Gamma_{\ltri\phi} g ))
 \to B_{\delta}(\Gamma_{\ltri\phi} g,  a ) \to B_{\epsilon}(\Gamma_{\rtri \phi} g, A_{\phi}(g , a) )\]

Ok, so $x : A_\epsilon(\Gamma_{\rtri \phi} g)$. I can form $\bar A_{\bar \phi}(g, x)$
if $\bar \Gamma_{\ltri \bar \phi} g = \Gamma_{\rtri \phi} g$ . The resulting type
is
\[\bar A_{\bar \phi}(g, x) : {\bar A}_{\bar \delta}({\bar \Gamma}_{\rtri{\bar \phi}} g)\]
We can plug this into $f$ if $\bar \Gamma_{\rtri \bar \phi} g = \Gamma_{\ltri \phi} g$.
The result is
\[f(\bar A_{\bar \phi}(g, x)) :  B_\delta(\Gamma_{\ltri\phi }g, \bar A_{\bar \phi}(g, x)))\]
So after plugging in the first two arguments to $B_\phi$ we have
\[B_\phi (g, \bar A_{\bar \phi}(g, x)):
  B_{\delta}(\Gamma_{\ltri\phi} g,  \bar A_{\bar \phi}(g, x) ) \to B_{\epsilon}(\Gamma_{\rtri \phi} g, A_{\phi}(g , \bar A_{\bar \phi}(g, x)) )\]
And the whole thing works... as long as transport is an isomorphism,
which it probably isn't. Darn.
\section{Picking up the Pieces}
Let's go back to something that at least conceptually held together.
Specifically, try to forget that I tried to invent any concept of $x^*$, and see if
that can pop out of the other things.

$\Delta^\op$ means exchange $\C$ and $\C^\op$.
$\Gamma^\op$ means exchange $+$ and $-$.
At the bottom of category expressions, you can say $\alpha$ or $\bar \alpha$.
There's
a substitution that flips all $\alpha$ variables, called $\flb$.
$\dag\Gamma$ abbreviates $\flb \Gamma^\op$.
\begin{thmbox}
  If $\Delta \prov \Gamma \rctx$, then $\Delta^\op \prov \Gamma^\op \rctx$\\
  If $\Delta \prov J$, then $\Delta^\op \prov \flb J$\\
  \textcolor{bluegray}{If $\Delta \prov \Gamma \rctx$, then $\Delta \prov \dag\Gamma \rctx$}
\end{thmbox}
\[
\erule
{\Delta \prov \Gamma \rctx \qquad \Delta;\Gamma \prov A : \rtype}
{\Delta \prov \Gamma, x + A \rctx }
\qquad
\erule
{\Delta \prov \Gamma \rctx \qquad \Delta^\op;\Gamma^\op \prov A : \rtype}
{\Delta \prov \Gamma, x - A \rctx }
\]
\[
\erule
{ \alpha : \C \in \Delta}
{\Delta  \prov \alpha : \C}
\qquad
\erule
{ \alpha : \C \in \Delta}
{\Delta  \prov \bar\alpha : \C^\op}
\]
\[
\erule
{ x+ A \in \Gamma}
{\Delta ; \Gamma \prov x :  A}
\]
Category substitutions work like
\[
\erule
{\Delta \prov \theta : \Delta' \qquad \Delta \prov t : \C}
{\Delta \prov \theta[t/\alpha] : \Delta', \alpha : \C}
\]
For a warm-up, let's see if we can confirm how the semantics of the variable
rule works. The semantics should be like
\begin{declbox}
  $\Gamma_\phi : \rtype$.\\
  $\Gamma_\tau : \Gamma_{\psi} \to \Gamma_{\phi} $\\
  $A_\delta : \Gamma_\delta \to \rtype$\\
  $A_\phi : (g : \Gamma_\phi) \to A_{\delta}(\Gamma_{\ltri\phi} g) \to A_{\epsilon}(\Gamma_{\rtri\phi} g)$
\end{declbox}
\begin{defnbox}
 $(\Gamma, x + A)_\phi = (g : \Gamma_\phi) \x A_{\delta}( \Gamma_{\ltri\phi} g )$\\
 $(\Gamma^\op)_\phi = \Gamma_{\bar\phi}$\\
 $(\Gamma, x + A)_\tau (g, a) = (\Gamma_\tau g, A_{\tau_1}(\Gamma_{\ltri \tau}g , a) ) $\\
 $(\Gamma^\op)_\tau = \Gamma_{\bar\tau}$
\end{defnbox}
And the term condition is
that for any $g : \Gamma_{ff}$, we have
\[ A_{fd}(\Gamma_{\rtri \fdom}g, M_d(\Gamma_{\fdom}g )) \equiv A_{ef}(\Gamma_{\rtri \fcod} g, M_e( \Gamma_{\fcod} g))\]

So let's take
\[
\erule
{ }
{\Delta ; \Gamma, x + A \prov x :  A}
\]
And see what we have. The object part is
\[ x_d : (g : \Gamma_{dd}) (x : A_{dd}(g)) \to A_{dd}(g) \]
\[ x_d(g, x) = x \]
and we check the term condition by expanding (under the assumption
that for any $(g, a) = z \in (\Gamma, x + A)_{ff}$
$ = (g : \Gamma_{ff}) \x A_{de}(\Gamma_{\ltri ff} g)$)
\[ A_{fd}((\Gamma,x+A)_{\rtri \fdom}z, x_d((\Gamma,x+A)_{\fdom}z )) \equiv A_{ef}((\Gamma,x+A)_{\rtri \fcod} z, x_e( (\Gamma,x+A)_{\fcod} z))\]
\[
  A_{fd}(\Gamma_{\rtri \fdom} g,A_{df}(\Gamma_{\ltri \fdom} g , a)
\equiv A_{ef}(\Gamma_{\rtri \fcod} g,A_{fe}(\Gamma_{\ltri \fcod} g , a)
)\]
and then by functoriality this is just
\[
  A_{ff}( g, a) \equiv  A_{ff}( g, a)
\]
Ok, that's fine. Let me go over the reasoning in the $\Pi$ type formation rule
one more time to make sure the whole
edifice doesn't come crashing down.

\subsection{$\Pi$ types}
Observe that the premises of the formation rule
\[
\erule
{
\Delta^\op; \Gamma^\op \prov A : \rtype \qquad
\Delta; \Gamma, x - A  \prov B : \rtype
}
{\Delta ; \Gamma \prov (x : A) \to B : \rtype}
\]
 give us all of the following derived functions
to work with, for $\phi : \delta \to \epsilon \in \sem \Delta$:
Remember that $(\Gamma^\op)_{\bar\delta} = \Gamma_{ \delta}$
\[ A_{\bar\delta} : \Gamma_{ \delta} \to \rtype \]
\[B_\delta : (g : \Gamma_\delta) \to A_{\bar \delta}(g) \to \rtype \]
\[A_{\bar \phi} : (g : \Gamma_{ \phi}) \to A_{\bar \epsilon}(\Gamma_{\rtri\phi} g) \to A_{\bar \delta}(\Gamma_{\ltri\phi} g) \]
\[B_\phi : (g : \Gamma_\phi)(x : A_{\bar \epsilon}(\Gamma_{\rtri\phi}g)) \to B_\delta(\Gamma_{\ltri\phi}g, A_{\bar \phi}(g, x))
\to B_\epsilon(\Gamma_{\rtri\phi}g, x)\]

We define the object part of this (of type $((x : A) \to B)_\delta : \Gamma_\delta \to \rtype$) by
\begin{defnbox}
  $((x : A) \to B)_\delta (g) = (x : A_{\bar \delta}(g)) \to B_\delta(g, x) $
\end{defnbox}
and the morphism part needs to be
\[((x : A)\to B)_\phi : (g : \Gamma_\phi) \to ((x : A_{\bar\delta}(\Gamma_{\ltri\phi} g))
\to B_\delta(\Gamma_{\ltri\phi} g, x))\]
\[  \to (x : A_{\bar\epsilon}(\Gamma_{\rtri\phi} g)) \to B_\epsilon(\Gamma_{\rtri\phi} g, x) \]
and we define it
\begin{defnbox}
  $((x : A)\to B)_\phi(g, f) = \lambda x. B_\phi((g, x), f (A_{\bar \phi}(g, x)))$
\end{defnbox}
Let's check all this carefully now.
We have $x$ has type $A_{\bar\epsilon}(\Gamma_{\rtri\phi} g)$ so
\[ A_{\bar \phi}(g, x) : A_{\bar \delta}(\Gamma_{\ltri\phi} g) \]
and then
\[ f(A_{\bar \phi}(g, x)) : A_{\bar \delta}(\Gamma_{\ltri\phi} g)
: B_\delta(\Gamma_{\ltri\phi} g, A_{\bar \phi}(g, x))\]
That all seems to be fine.

 A critical thing seems to be that when computing
the meaning of $B_\phi$, I get that the second argument $(\_ : A_{\bar \epsilon}(\cdots))$
of it is at something $\epsilon$-like, so that I can plug in the naked variable $x$ that
I have, rather than some transport expression. When I substitute a transport expression,
then I get some constraint that has to be satisfied for the result to be well-typed.


\section{Factoring The Term Condition}
\def\Tw{\mathsf{Tw}}

If $F : \Tw(\C)^\op \to \rset$ (where $\Tw(\C)$ has morphisms
$f \to g$ where $f$ factors through $g$) then we say $\int F$
is the set of mappings $k : (c : \C_0) \to F(\rid_c)$ such that transport
along
\[
\begin{tikzcd}
  c \ar[r,equals] \ar[dr, phantom, "\ltri f"] \ar[from=d, "1_c"] & c \ar[d, "f"]\\
c \ar[dr, phantom, "\rtri f"] \ar[r, "f" description] & d\\
  d \ar[r,equals] \ar[from=u, "f"'] & d \ar[u, "1_d"']
\end{tikzcd}
\]
moving towards the middle row commutes, i.e. $F(\ltri f)(k(c)) = F(\rtri f)(k(d))$

A context is interpreted as a {\em covariant} functor $\Gamma : \Tw(\C) \to \rset$.
A type in a context $\Gamma$ is an object part $A_c : \Gamma_{1_c}$
and a morphism part
\[A_f : (g : \Gamma_f) \to A_c(\Gamma_{\ltri f} g) \to A_d(\Gamma_{\rtri f} g)\]

We construct $\Gamma \to A$ of type $\Tw(\C)^\op \to \rset$, like so.
Its object part for $f : c \to d \in \C$ is
\[(\Gamma \to A)_f = (g : \Gamma_{f}) \to A_d(\Gamma_{\rtri f}g)\]
% \[(\Gamma \to A)_f = (g : \Gamma_{f}) \to A_c(\Gamma_{\ltri f}g)\]
and its morphism part for $\phi : f' \to f \in \Tw(\C)$
\[
\begin{tikzcd}
  c' \ar[r,"f'"] \ar[d, "\phi_1"'] &d' \ar[from=d, "\phi_2"']\\
c \ar[r, "f"'] & d
\end{tikzcd}
\]
is
\[(\Gamma \to A)_{\phi} (h, g') = A_{\phi_2}(\Gamma_{\rtri \phi} g' , h(\Gamma_\phi g')) \]
Notes for typechecking:
\[(\Gamma \to A)_{\phi} : (h : (g : \Gamma_{f}) \to A_d(\Gamma_{\rtri f}g)) \to
(g' : \Gamma_{f'}) \to A_{d'}(\Gamma_{\rtri f'}g')\]
\[h(\Gamma_\phi g') : A_d(\Gamma_{\rtri f} \Gamma_\phi g')\]
\[A_{\phi_2} : (g : \Gamma_{\phi_2}) \to A_d(\Gamma_{\ltri \phi_2} g)
\to A_{d'}(\Gamma_{\rtri \phi_2} g)\]
\[A_{\phi_2}(\Gamma_{\rtri \phi} g') : A_d(\Gamma_{\ltri \phi_2} \Gamma_{\rtri \phi} g')
\to A_{d'}(\Gamma_{\rtri \phi_2} \Gamma_{\rtri \phi} g')\]
\[\ltri \phi_2 \o \rtri \phi = \rtri f \o \phi
\qquad \rtri \phi_2 \o \rtri \phi = \rtri f'\]

So what happens when I ask what's in $\int (\Gamma \to A)$? It should
be things that for every $c \in \C_0$, you have to give a member
\[M_c \in (\Gamma \to A)_{1_c} : (g : \Gamma_{c}) \to A_c(g)\]
subject to
\[(\Gamma \to A)_{\ltri f} (M_c) = (\Gamma \to A)_{\rtri f} (M_d) \]
i.e.
\[(g : \Gamma_f) \to (\Gamma \to A)_{\ltri f} (M_c, g) = (\Gamma \to A)_{\rtri f} (M_d, g) \]


\[M_c \in (\Gamma \to A)_{1_c} : (g : \Gamma_{c}) \to A_c(g)\]
\[(g : \Gamma_f) \to A_{f}( g , M_c(\Gamma_{\ltri f} g)) =   M_d(\Gamma_{\rtri f} g)\]

\section{Trying To See What I Can Do For Negative Assumptions}

Suppose I have a type $P$ with
\[\alpha : \C \prov P(\alpha) : \rtype \]
Can I find a semantics for
\[\alpha : \C; x - P(\bar \alpha) \prov x^* : P(\alpha)\]
?
Semantically, I have
\[P_\delta : \rtype \qquad P_\phi :  P_{\delta} \to P_{\epsilon}\]
and I want to build something where the object part is
\[(x^*)_d : (g : (x - P(\bar \alpha))_{dd} \to P_{dd}\]
And if I'm careful I say
\[
\erule
{\Delta \prov \Gamma \rctx}
{\Delta^\op \prov \Gamma^\op \rctx}
\]
and $\Gamma_\delta : \rtype$
and $(\Gamma^\op)_{\bar\delta} = \Gamma_\delta$
So that's probably fine and I can say
\[\alpha : \C; x - P(\bar \alpha) \prov x^* : P(\alpha)\]
safely. At least as far as the object part's concerned. But what if I have
now another type that depends negatively on an $x$ like this? Suppose I have
\[\alpha : \C^\op ; x - P(\alpha) \prov Q(x, \alpha) : \rtype\]
and I want to be assured that something like
\[\alpha : \C ; x + P( \alpha), y - Q(x, \alpha) \prov y : Q(x^*, \bar\alpha)\]
holds. What is $Q$, most readily? It has an object part
for any $\delta \in \C \x \C^\op$,
\[Q_{\bar\delta} : (p : P_\delta) \to \rtype\]
and a morphism part
\[Q_{\bar\phi} : (p : P_\delta) \to Q_{\bar\epsilon}(P_\phi(p)) \to Q_{\bar\delta}(p)\]
Then the object part of the term looks like
\[y_d : (g : (x + P(\alpha), y - Q(x, \alpha))_{dd}) \to Q_{dd}(g)\]
\[y_d : (p : P_{dd})(q : Q_{dd}(p)) \to Q_{dd}(p)\]
So I don't know if I'm going to detect any problems in the object part of terms this way.
It's got to be in the end-condition.

Suppose $\Delta^\op; \Gamma^\op \prov A : \rtype$.
I want to give some semantics to
\[\Delta; \Gamma, x - A \prov x^* : \dag A\]
where $\dag A$ is some alternate version of $A$ that makes sense in $\Delta;\Gamma$.
This means I'm saying something like
\[
\erule
{\Delta \prov J}
{\Delta^\op \prov \bar J}
\qquad
\erule
{\Delta; \Gamma \prov J}
{\Delta^\op ; \Gamma^\op \prov \dag J}
\]
Can I get a grip on what this operation is semantically?
If I have $A$, then I have
\[A_\delta : \Gamma_\delta \to \rtype\]
\[A_\phi : (g : \Gamma_\phi) \to A_{\delta}(\Gamma_{\ltri\phi} g) \to A_{\epsilon}(\Gamma_{\rtri\phi} g)\]
If I have $\dag A$ which makes sense in $\Delta^\op; \Gamma^\op$,
then
 \[(\dag A)_{\bar \delta} : \Gamma_\delta \to \rtype\]
(assuming $(\Gamma^\op)_{\bar\delta} = \Gamma_\delta$) and then  I conjecture
\begin{thmbox}
  $(\dag A)_{\bar \delta} = A_{\delta}$
\end{thmbox}
which means I would need
\[(\dag A)_{\bar \phi} : (g : \Gamma_\phi) \to  A_{\epsilon}(\Gamma_{\rtri\phi} g) \to  A_{\delta}(\Gamma_{\ltri\phi} g)\]
and such a thing is not at all forthcoming from $A$'s transport
structure. So this doesn't seem right.

Actually, wait, are the semantics of $\bar \Gamma$ and $\Gamma^\op$ identical?
Do they at least both satisfy the same dualization identities?
They're both valid in $\Delta^\op$, so the question at least makes sense.
What if I say
\[
\erule
{\Delta \prov J}
{\Delta^\op \prov \bar J}
\qquad
\erule
{\Delta; \Gamma \prov J}
{\Delta ; \bar \Gamma^\op \prov \dag J}
\]
Then I start with
\[A_\delta : \Gamma_\delta \to \rtype\]
\[A_\phi : (g : \Gamma_\phi) \to A_{\delta}(\Gamma_{\ltri\phi} g) \to A_{\epsilon}(\Gamma_{\rtri\phi} g)\]
and try to build, uh,
\[(\dag A) : \Gamma_\delta \to \rtype\]
\[(\dag A)_\phi : (g : \Gamma_\phi) \to A_{\delta}(\Gamma_{\ltri\phi} g) \to A_{\epsilon}(\Gamma_{\rtri\phi} g)\]
so that seems perfectly easy and nice. The semantics of $\dag A$ and $A$ are basically identical. So this means what, that if I can do
\[\Delta; \Gamma \prov  P  : \rtype\]
which licenses asking if I can do
\[\Delta; \Gamma, x + P  \prov ? : P\]
I can also do
\[\Delta; \bar\Gamma^\op \prov  \dag P  : \rtype\]
thence
\[\Delta^\op; \Gamma^\op \prov  \dag \bar P  : \rtype\]
which licenses asking if I can do
\[\Delta; \Gamma, x - \dag \bar P  \prov ? : P\]

\section{Thinking Hard about what dualization means}

No, I'm probably wrong to think that semantics are invariant under
$\dag$. It's the operation I'm calling ${}^\op$ in
\texttt{syntax-first} and it does a swap. And the question of what I
can do with $x - A$ already comes up even in the simply-typed case.
Let me make sure I understand that, first.

There the meaning of $\Gamma$ is a functor $\sem \Delta \to \rset$, as is
the meaning of a type $A$. If $\Gamma^\op$ means just swap signs and $\bar \Gamma$ means
swap variables, then I think

\[ (\Gamma^\op)_\delta = \Gamma_{\bar \delta}\]
\[ (\bar\Gamma)_\delta = \Gamma_{ \delta}\]
\end{document}
