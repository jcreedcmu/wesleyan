\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{stmaryrd}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usepackage{tikz-cd}
\usetikzlibrary{arrows}
\tikzset{
commutative diagrams/.cd,
arrow style=tikz,
diagrams={>=stealth}}

\usepackage{tcolorbox}
\tcbuselibrary{breakable}

\def\celse{\mathrel |}
\def\bcase{\mathop{\bf case}\nolimits}
\def\bof{\mathop{\bf of}}
\def\bif{\mathop{\bf if}}
\def\bthen{\mathop{\bf then}}
\def\belse{\mathop{\bf else}}
\def\binl{\mathbf{inl}}
\def\binr{\mathbf{inr}}
\def\rnone{\mathsf{none}}
\def\rsome{\mathsf{some}}
\def\rtrue{\mathsf{true}}
\def\rfalse{\mathsf{false}}

\def\x{\times}
\def\rid{\mathsf{id}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\wat{\mathbin{@}}
\def\cn{{:}}

\def\tensor{\otimes}
\def\lol{\multimap}
\def\wtf{{\color{red}???}}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{orange}{rgb}{0.95,0.90,0.80}
\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{lgray}{gray}{0.7}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

\newtcolorbox{calldefn}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{callout}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{callout2}{colframe=orange,colback=orange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}



\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\author{Jason Reed}



\begin{document}


\section{Notes on Cache Types}

A {\em cache-type} is a diagram
\[\begin{tikzcd}
  C \ar[r, two heads, shift left, "p"]\ar[from=r, tail, shift left, "g"]
& G\ar[r, two heads, shift left, "\pi"]\ar[from=r, tail, shift left, "\iota"]
 & B
\end{tikzcd}\]
such that $pg = \rid_G$ and $\pi \iota = \rid_B$. A morphism between cache types
is a map $f : C_1 \to C_2$ such that there exists $f'$ and $f''$ completing
\[
\begin{tikzcd}
  C_1 \ar[from=r, tail,  "g_1"'] \ar[d, "f"']
& G_1\ar[r, two heads,  "\pi_1"]\ar[d, "f'"]
 & B_1\ar[d, "f''"]
\\
  C_2 \ar[from=r, tail,  "g_2"]
& G_2\ar[r, two heads,  "\pi_2"']
 & B_2
\end{tikzcd}
\]
Such $f'$ and $f''$, when they exist, are determined uniquely.
If $g_2 f' = f g_1$, then $f' = p_2 g_2 f' = p_2 f g_1$.
If $\pi_2 f' = f'' \pi_1$, then
$f'' = f'' \pi_1 \iota_1 = \pi_2 f' \iota_1 $.

So in the definition of morphism, we might as well ask for an $f : C_1 \to C_2$ such that
$g_2 p_2 f g_1 = f g_1$ and $\pi_2 p_2 f g_1 = \pi_2 p_2 f g_1 \iota_1 \pi_1$.
\subsection{Example}
Let $z : B \to D$ be given. This function is a computation we use to
obtain a {\em Derived} value of type $D$ from our
 {\em Base} type $B$, while keeping the value of the {\em Cache}
type $C$ in a specified subset of {\em Good} cache states $G$.

We set

\begin{itemize}
\item $C = B \x (D + 1)$. When we include the state of the cache, we
have a base value and an optional cache value of type $D$. When we're in the
$\rnone$ branch of the option type, it means the cache is dirty.
\item $G = B \x 2$.
The type of $G$ simply tracks {\em whether} the cache is clean (true) or dirty (false),
without storing the value of the cache.
\item $\iota(b) = (b, \rfalse)$.
\item $\pi(b, t) = b$.
\item $g(b, t) = \bif t \bthen \rsome(z(b)) \belse \rnone$.
\item $p(b, d) = \bcase d \bof \rsome\ \_ \mapsto \rtrue \celse  \rnone \mapsto \rfalse$.
\end{itemize}

Let $k : B \to B$ be given. Here are some morphisms from this cache type to itself.

\begin{itemize}
\item $f_1(b, \chi) = (k(b), \rnone)$. Compute a new value and clear the cache.
\item $f_2(b, \chi) = (k(b), \bif b = k(b) \bthen \chi \belse \rnone)$. Compute a new value and clear the cache if the value has changed.
\item $f_3(b, \chi) = (b, \rsome(z(b)))$. Make sure cache is full.
\end{itemize}
Here are some {\color{red}non}-morphisms.
\begin{itemize}
\item $\textcolor{red}{f_4}(b, \chi) = \bcase \chi \bof \rsome\ \_ \mapsto b \celse \rnone \mapsto k(b)$. Leaks cache state.
\item $\textcolor{red}{f_5}(b, \chi) = (k(b), \chi)$. Doesn't update cache.
\end{itemize}

\subsection{Another Maybe Equivalent Formulation}

A {\em simple cache type} is a type $X$ with two idempotent maps
$r : X \to X$ `rectify the cache' and $e : X \to X$ `erase the cache', such that
$r e = e r = e$.
A morphism from $X_1 \to X_2$ being a function $f : X_1 \to X_2$ such that
\[
\begin{tikzcd}
  X_1\ar[rr, "e_1"] \ar[d, "f"']&& X_1 \ar[d, "f"]\\
  X_2\ar[dr, "e_2"'] && X_2\ar[dl, "e_2"]\\
& X_2
\end{tikzcd}
\qquad
\begin{tikzcd}
&X_1\ar[dr, "r_1"]\ar[dl, "r_1"']\\
  X_1 \ar[d, "f"']&& X_1 \ar[d, "f"]\\
  X_2\ar[rr, "r_2"'] && X_2\\
\end{tikzcd}
\]

To construct a cache type from a simple cache type $(X, e, r)$ set
$C = X$ and $g : G \to C$ to the equalizer of $\rid_X$ and $r$ and $b : B \to C$ to the equalizer
of $\rid_X$ and $e$. The morphisms come from the equalizer UMP:
We $p : C \to G$ as the unique morphism such that $g p = r$.
We get $\bar b : C \to B$ as the unique morphism such that $b \bar b = e$.
Now we define $\pi = \bar b g$ and $\iota = p b$.

We know $r g = g$, so $gpg = g$, which forces $pg = \rid$ by equalizer uniqueness.
We can diagram chase
\[
\begin{tikzcd}
B\ar[d, "b"']\ar[rr, "b"]&& C\\
C \ar[urr, "e"] \ar[d, "p"'] \ar[dr, "r"]\\
G \ar[r, "g"'] & C \ar[uur, "e"] \ar[r, "\bar b"']& B \ar[uu, "b"']
\end{tikzcd}
\]
And then conclude by equalizer uniqueness that  $\pi \iota = \bar b g p b = \rid$.


To construct a simple cache type from a cache type, set $X = C$ and
$r = gp$ and $e = g\iota \pi p$. We can check that the appropriate equations
are satisfied. For sure $r$ and $e$ are idempotent. Also $r$ is absorbed on either
side of an $e$, because $pg = \rid$.

Can we see that these constitute an equivalence? Let's try to see that the
CT $\to$ SCT direction is full and faithful. Let two CTs
$(C_1, G_1, B_1, p_1, g_1, \pi_1, \iota_1)$ and $(C_2, G_2, B_2, p_2, g_2, \pi_2, \iota_2)$
be given. Suppose we have a CT morphism $f : C_1 \to C_2$. Is this still an SCT
morphism when we set $X_1 = C_1$ and $X_2 = C_2$ and so on? We must check

\[
\begin{tikzcd}
& X_1\ar[dl, "r_1"']\ar[dr, "e_1"]\\
  X_1 \ar[d, "f"']&& X_1 \ar[d, "f"]\\
  X_2\ar[dr, "e_2"'] && X_2\ar[dl, "e_2"]\\
& X_2
\end{tikzcd}
\qquad
\begin{tikzcd}
&X_1\ar[dr, "r_1"]\ar[dl, "r_1"']\\
  X_1 \ar[d, "f"']&& X_1 \ar[d, "f"]\\
  X_2\ar[rr, "r_2"'] && X_2\\
\end{tikzcd}
\]
so this expands to
\[
\begin{tikzcd}
  C_1\ar[r, "p_1"] &G_1\ar[ddd, "g_1"]\ar[r, "\pi_1"] &B_1\ar[r, "\iota_1"] &G_1\ar[r, "g_1"] &C_1\ar[d, "f"]\\
&&&& C_2\ar[d, "p_2"]\\
&&&& G_2\ar[d, "\pi_2"]\\
&C_1\ar[r, "f"]&C_2\ar[r, "p_2"]&G_2 \ar[r, "\pi_2"]& B_2\ar[d, "\iota_2"]\\
&&&& G_2\ar[d, "g_2"]\\
&&&& C_2\\
\end{tikzcd}
\]
and
\[
\begin{tikzcd}
C_1\ar[dd, "f"']\ar[from=r, "g_1"']&G_1 \ar[dr, "g_1"'] \ar[from=r, "p_1"']&C_1\ar[r, "p_1"]&G_1\ar[r, "g_1"]&C_1\ar[dd, "f"]\\
&&C_1\ar[drr, "f"']\\
C_2 \ar[rr, "p_2"']&&G_2\ar[rr, "g_2"']&& C_2
\end{tikzcd}
\]
Now we want to show SCT morphism implies CT morphism.
We have
\[
\begin{tikzcd}
  C_1\ar[d, "p_1"']\ar[r, "p_1"] &G_1\ar[r, "\pi_1"] &B_1\ar[r, "\iota_1"] &G_1\ar[r, "g_1"] &C_1\ar[d, "f"]\\
G_1\ar[dr, "g_1"']&&&& C_2\ar[d, "p_2"]\\
&C_1\ar[dr, "f"']&&& G_2\ar[d, "\pi_2"]\\
&&C_2\ar[d, "p_2"']&& B_2\ar[d, "\iota_2"]\\
&&G_2\ar[d, "\pi_2"']&& G_2\ar[d, "g_2"]\\
&&B_2\ar[r, "\iota_2"']&G_2\ar[r, "g_2"']& C_2\\
\end{tikzcd}
\]
and because we have $pg = \rid$ and $\pi \iota = \rid$ we can reduce this to
\[
\begin{tikzcd}
   G_1\ar[dd, "g_1"']\ar[r, "\pi_1"] &B_1\ar[r, "\iota_1"] &G_1\ar[r, "g_1"] &C_1\ar[d, "f"]\\
&&& C_2\ar[d, "p_2"]\\
C_1\ar[dr, "f"']&&& G_2\ar[d, "\pi_2"]\\
&C_2\ar[d, "p_2"']&& B_2\\
&G_2\ar[rru, "\pi_2"']&& \\
\end{tikzcd}
\]
as required. And similarly staring with
\[
\begin{tikzcd}
C_1\ar[dd, "f"']\ar[from=r, "g_1"']&G_1  \ar[from=r, "p_1"']&C_1\ar[r, "p_1"]&G_1\ar[r, "g_1"]&C_1\ar[dd, "f"]\\
&&\\
C_2 \ar[rr, "p_2"']&&G_2\ar[rr, "g_2"']&& C_2
\end{tikzcd}
\]
we can feed it $g_1$ on the input side and get
\[
\begin{tikzcd}
C_1\ar[dd, "f"']\ar[from=rr, "g_1"']&  &G_1\ar[rr, "g_1"]&&C_1\ar[dd, "f"]\\
&&\\
C_2 \ar[rr, "p_2"']&&G_2\ar[rr, "g_2"']&& C_2
\end{tikzcd}
\]
as required.

Now we just need to show essential surjectivity.
\end{document}
