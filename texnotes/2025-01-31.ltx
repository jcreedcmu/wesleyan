\documentclass{article}
\usepackage[tmargin=0.15in, bmargin=0.15in]{geometry}
\input{theorem}
\input{prooftree}
\usepackage{relsize}
\usepackage{latexsym}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\usepackage{stackengine}
\newcommand\oast{\stackMath\mathbin{\stackinset{c}{0ex}{c}{0ex}{\ast}{\bigcirc}}}

\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\wt{\widetilde}
\def\tel{\mathsf{T}}
\def\bdot{\mathrel{\bar\cdot}}
\def\bodot{\mathrel{\bar\odot}}
\def\dec{\mathsf{\downarrow}}
\def\enc{\mathsf{\uparrow}}
\def\I{\mathbb{I}}
\def\bget{\mathop\mathbf{get}}
\def\bGet{\mathop\mathbf{Get}}
\def\dapt#1#2{#1[\![#2]\!]}
\def\dap#1#2{#1\{#2\}}
\def\ll{\langle\!\langle}
\def\rr{\rangle\!\rangle}
\def\rshape{\ {\mathsf{shape}}}
\def\rrefl{{\mathsf{refl}}}
\def\bd{\mathsf{Bd}}
\def\bdd{\mathsf{Bdd}}
\def\rset{\mathsf{U}}
\def\rid{\mathsf{id}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\prequiv{\dashv\vdash}

\definecolor{blu}{rgb}{0.1,0.5,1}
\definecolor{orng}{rgb}{1,0.5,0.3}

\def\nameof#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}



\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{lorange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.8}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=lorange,colback=lorange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\N{{\mathbb N}}
\def\Z{{\mathbb Z}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\tw{\mathsf{Tw}}
\def\sw#1{^{#1}_{#1}}
\def\TP{\mathbf{TPre}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{\textsf{\textbf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
%\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\A{\mathbf{A}}
\def\B{\mathbf{B}}
\def\C{\mathbf{C}}
\def\S{\mathbf{S}}
\def\G{\mathbf{G}}
\def\D{\mathbf{D}}
\def\DD{\mathbb{D}}
\def\E{\mathcal{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\tri{\rhd}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}

% https://tex.stackexchange.com/questions/716631/curved-arrows-from-tikz-cd-do-not-work
\tikzset{
  curve/.style={
    settings={#1},
    to path={
      (\tikztostart)
      .. controls ($(\tikztostart)!\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      and ($(\tikztostart)!1-\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      .. (\tikztotarget)\tikztonodes
    },
  },
  settings/.code={%
    \tikzset{quiver/.cd,#1}%
    \def\pv##1{\pgfkeysvalueof{/tikz/quiver/##1}}%
  },
  quiver/.cd,
  pos/.initial=0.35,
  height/.initial=0,
}

\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\tikzset{shorten <>/.style={shorten >=#1,shorten <=#1}}

\section{Parametricity and Comma Categories}
Say $G : \D \to \C$ is a {\em shape over $\C$} when $G$ is a finite-product preserving functor between two categories with finite products. We say $G$ has a {\em partner} when there exists $(H, \eta)$ such that
\begin{enumerate}
\item $H : \C \to \D$ is a functor that `preserves everything I care about'.
      Probably finite products, coproducts, exponentials, etc.
\item $\eta$ is a `unit of the almost adjunction'
\begin{tikzcd}
 \C\ar[d,equal] \ar[r,"H"]&\D\ar[d, "G"]\\
\C\ar[r,equal] \ar[ur,shorten <>=10pt,Rightarrow, "\eta"]&\C
\end{tikzcd}
\end{enumerate}
I'm going to be sloppy and assume that when structure is preserved, it's preserved strictly.

A partner for $G$ is kind of like a left adjoint to $G$.

Sometimes we write $F$ for $GH$. I think it's not necessarily a monad, but it is an applicative functor.

The running examples I have in mind are particularly
$H = \Delta  : \rset \to \rset^2$ and $G = \_\x\_ : \rset^2 \to \rset$.
Thus $FX = X \x X$ and $\eta_X : X \to FX$ is $\eta_X(a) = \langle a,a\rangle$.

Slightly more generally, for a set $S$,
$H = \Delta  : \rset \to \rset^S$ and $G = \prod : \rset^S \to \rset$.
Thus $FX = S \to X$ and $\eta_X : X \to FX$ is $\eta_X(a) = \lambda s . a$.


\subsection{Shape Morphisms}
A shape morphism $S' \to S$ between two shapes over $\C$,
 i.e.  $(\D', H',G',\eta') \to (\D, H,G,\eta)$ consists of
 a finite-product-preserving functor $\partial : \D' \to \D$
and a natural transformation $\gamma$
\[\begin{tikzcd}
  \D' \ar[d, "G'",swap]\ar[r,"\partial"]&  \D\ar[d, "G"]\\
\C\ar[r,equal]\ar[ur,shorten <>=10pt,Rightarrow, "\gamma"]&\C
\end{tikzcd}
\]
such that the following diagrams commute:
\[
\begin{tikzcd}
  \D' \ar[from=d, "H'"]\ar[r,"\partial"]&  \D\ar[from=d, "H",swap]\\
\C\ar[r,equal]&\C
\end{tikzcd}
\qquad
\begin{tikzcd}
	{ C} & { G'H'C} \\
	{GH C} & {G\partial H' C}
	\arrow["{{\eta'_C}}", from=1-1, to=1-2]
	\arrow["{{\eta_{ C}}}"', from=1-1, to=2-1]
	\arrow["{{\gamma_{H'C}}}", from=1-2, to=2-2]
	\arrow[equal, from=2-1, to=2-2]
\end{tikzcd}\]

\subsection{Relational Lift}
\def\L{\mathcal{L}}
Suppose $G : \D \to \C$ is a shape over $\C$.
We define another shape $\L G$ over $\C$, the `relational lift' of $G$.
Consider the comma category $(\rid_\C, G)$. Its objects are tuples
\[(C : \C, D : \D, f : C \to GD)\]
and its morphisms are pairs $(c,d)$ that make commutative diagrams
\[
\begin{tikzcd}
  C_1\ar[d, "c"']\ar[r, "f_1"] & GD_1\ar[d, "Gd"]\\
  C_2\ar[r,"f_2"'] & GD_2\\
\end{tikzcd}
\]
We set $\L G$ to be the evident projection functor
\[(\rid_\C, G) \to \C\]
which takes $(C,D,f)$ to $C$ and $(c,d)$ to $c$.

There is a shape morphism $\L G \to G$. We take
the functor
\[\partial : (\rid_\C, G) \to \D\]
to be that which takes $(C,D,f)$ to $D$ and $(c,d)$ to $d$.
We take $\gamma$ to be the natural transformation that takes
$(C,D,f)$ to $f$.



\subsection{Parametricity}
A category $\C$ is said to be {\em parametric} when,
for all shapes $G$ over $\C$, if $G$ has a partner
then $\L G$ has a partner.
\subsection{Consequences of Parametricity}
Suppose I have some parametric category $\C$.
I consider the binary relation shape $G = \prod : \C^2 \to \C$. Then there
exists the relational shape $\L G : (\rid_\C, G) \to \C$. I'm going
to name $\D' = (\rid_\C, G)$. Also name the projections $G', \partial$.
Now $G$ has a partner $H = \Delta : \C \to \C^2$. It
preserves everything I care about, and has a $\eta$. By assumption that $\C$ is
parametric, $\L G$ has a partner, call it $H' : \C \to \D'$ and $\eta'_C : C \to G'H'C$.

Now suppose I have an internal hom object $A \imp B$ in $\C$.
Then I have $\eta' : (A \imp B) \to G' H'(A \imp B)$.
Since `$H'$ preserves everything I care about', this is equivalently
\[\eta' : (A \imp B) \to G' (H'A \imp H'B)\]
This is saying ``for every function, we have the raw data that says this function belongs
to some relation''. I want to see that the endpoints of this relation really are the original
function. What do we get out of $\gamma$? $\gamma$ says for any object $D' \in \D'$
we have $\gamma : G'D' \to  G\partial D'$. So in particular we have
\[G' (H'A \imp H'B) \to G (\partial (H'A \imp H'B))\]
It seems safe to believe that we can at least prove $\partial$ lax-preserves exponentials.
 We at least would get a morphism
\[\partial (H'A \imp H'B) \to \partial H'A \imp \partial H'B = HA \imp HB\]
So overall I have
\[? \o \eta' : (A \imp B) \to G(HA \imp HB)\]
\subsection{The Universe}
What does it mean for an $H$ to `preserve universe structure'?
If I have $A \imp B$ in $\C$, then I trust that exponentials in $\D'$
are such that $HA \imp HB$ is correctly the functions that take related
things in $A$ to related things in $B$, so $H(A \imp B) = HA \imp HB$ coverse what I want.

I don't have a way of naming {\em the} universe via UMP in $(\rid_C, G)$, but
as part of the definition of $\L$ I could decide that structure. Suppose
that I have $e : \E \to \rset$ in $\C$. I have $G : \D \to \C$.
I have
% https://q.uiver.app/#q=WzAsNCxbMCwwLCJcXEQnIl0sWzIsMCwiXFxEIl0sWzAsMSwiXFxDIl0sWzIsMSwiXFxDIl0sWzIsMywiIiwwLHsibGV2ZWwiOjIsInN0eWxlIjp7ImhlYWQiOnsibmFtZSI6Im5vbmUifX19XSxbMCwyLCJHJyIsMix7Im9mZnNldCI6MX1dLFsxLDMsIkciLDIseyJvZmZzZXQiOjF9XSxbMCwxLCJcXHBhcnRpYWwiXSxbMiwxLCJcXGdhbW1hIiwwLHsic2hvcnRlbiI6eyJzb3VyY2UiOjMwLCJ0YXJnZXQiOjMwfSwibGV2ZWwiOjJ9XSxbMiwwLCJIJyIsMix7Im9mZnNldCI6MX1dLFszLDEsIkgiLDIseyJvZmZzZXQiOjF9XV0=&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F529c435990e05c1b2f1013d2d584a2a8b2bd7880%2Fquiver-macros.tex
\[\begin{tikzcd}
	{\D'} && \D \\
	\C && \C
	\arrow["\partial", from=1-1, to=1-3]
	\arrow["{G'}"', shift right, from=1-1, to=2-1]
	\arrow["G"', shift right, from=1-3, to=2-3]
	\arrow["{H'}"', shift right, from=2-1, to=1-1]
	\arrow["\gamma", shorten <=14pt, shorten >=14pt, Rightarrow, from=2-1, to=1-3]
	\arrow[equals, from=2-1, to=2-3]
	\arrow["H"', shift right, from=2-3, to=1-3]
\end{tikzcd}\]
I know $\D'$ is the category $(\rid_\C, G)$. So to name an object in it I need to name
$(C, D, f : C \to GD)$.
What is $\rset$ in $\D'$? That is, what {\em should} $H\rset$ be?
My first thought was
\[(\rset, H\rset, \eta_\rset)\]
since that's something well-typed I can construct, but I'm skeptical. How
do I think about $H'C$ in general, when $C$ is some type in $\rset$?
For the example where $HA = \langle A, A\rangle$
and $G\langle A, B\rangle = A \x B$? I think it should land
on
\[(\Sigma\ (C\x C)\ \bd_C, \langle C, C\rangle, \pi_1)\]
The $C$-component of this tuple is the total space of the bridges in
$C$. The $D$-component is the constantly-$C$ tuple, i.e. $HC$. This is
necessarily the case, because $\partial H' C = HC$.
The $f$-component says how the total space behaves as a relation over the boundary.
I could also write this more generally as
\[(\Sigma\ GHC\ \bd_C, HC, \pi_1)\]
This is right; $\bd_C$ is a proof-relevant predicate on $FC$.
So what's the total space for $\bd_\rset$?
I want to say something like
\[\Sigma\ GH\rset\ (\lambda B \to B \to \rset)\]
but $B$ isn't a set, it's a $GH\rset$. I actually need something else to behave like $G$,
to tell me how to turn a tuple of types back into a type. Can I say anything like
\[\Sigma\ H\rset\ (\lambda B \to GB \to \rset)\]
? Hmm something about this seems suspicious.
\subsection{Internalizing $G$}
If I take $e : \E \to \rset$ and I hit it with the functor $GH$
I get $GHe : GH\E \to GH\rset$. In my running example, this means
a thing that lives in $GH\E$ is a pair of elements of any nameable type,
and the projection $GHe$ tells me which pair of types they came from.
Now if this map has sufficiently small fibers, which I think it ought to,
 then there is a pullback diagram
% https://q.uiver.app/#q=WzAsNCxbMCwwLCJHSHtcXG1hdGhjYWwgRX0iXSxbMCwxLCJHSHtcXG1hdGhzZiBVfSJdLFsxLDAsIntcXG1hdGhjYWwgRX0iXSxbMSwxLCJ7XFxtYXRoc2YgVX0iXSxbMCwyLCJlXipnIl0sWzIsMywiZSJdLFsxLDMsImciLDJdLFswLDEsIkdIZSIsMl0sWzAsMywiIiwxLHsic3R5bGUiOnsibmFtZSI6ImNvcm5lciJ9fV1d
\[\begin{tikzcd}
	{GH{\mathcal E}} & {{\mathcal E}} \\
	{GH{\mathsf U}} & {{\mathsf U}}
	\arrow["{e^*g}", from=1-1, to=1-2]
	\arrow["GHe"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["e", from=1-2, to=2-2]
	\arrow["g"', from=2-1, to=2-2]
\end{tikzcd}\]
And the map $g = \ulcorner{GHe}\urcorner$ should be very useful to me: in the example, it takes a pair of types
and gives me the {\em name} of the type that consists of all pairs of elements that
live over that pair of types. In other words, it takes a pair of types and yields their
product. It is the thing I was calling $G$, the global sections functor, in my previous
purely type-theory thinking before switching to using more categories.
\subsection{Being Explicit about Universe Levels}
Maybe what I actually have is $\C_0\subseteq \C_1\subseteq \ldots$. There exists
a morphism $e_i : \E_i \to \U_i \in \C_{i+1}$ that is an object classifier for all of $\C_i$.
This means that for every map $f : A \to B$ in $\C_i$, there is a map $\nameof f : B \to \U_i$
in $\C_{i+1}$ such that
\[\begin{tikzcd}
	{A} & {{\mathcal E_i}} \\
	{B} & {{\mathsf U_i}}
	\arrow["{e_i^*\nameof f}", from=1-1, to=1-2]
	\arrow["f"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["e_i", from=1-2, to=2-2]
	\arrow["\nameof f"', from=2-1, to=2-2]
\end{tikzcd}\]
So in particular I'd always know that
\[\begin{tikzcd}
	{GH{\mathcal E}_i} & {{\mathcal E}_{i+1}} \\
	{GH{\mathsf U}_i} & {{\mathsf U}_{i+1}}
	\arrow["{e_i^*\nameof{GHe_i}}", from=1-1, to=1-2]
	\arrow["GHe_i"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["e_{i+1}", from=1-2, to=2-2]
	\arrow["\nameof{GHe_i}"', from=2-1, to=2-2]
\end{tikzcd}\]
Oh hmm that isn't what I want. I guess it's a nontrivial fact that I need to assume that
I get this same diagram at the {\em same} level. That amounts to supposing that $GH$
doesn't somehow blow up the small-fiber-ness of $e$.

Although maybe this isn't so big a loss? The thing I want to do right after getting
the type of global sections is consider its maps into a universe, which is one
level up, so maybe if the global sections are already up one, it's no harm.

I should have an internal name $u_i : 1 \to \U_{i+1}$, and internal hom on names should
be like $\imp_i : \U_{i} \x \U_i \to \U_i$, with some diagrams like

\[\begin{tikzcd}
	{\U_i} & {\E_{i+1}} \\
	{1} & {\U_{i+1}}
	\arrow["{}", from=1-1, to=1-2]
	\arrow["!"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["e_{i+1}", from=1-2, to=2-2]
	\arrow["u_i"', from=2-1, to=2-2]
\end{tikzcd}
\qquad
% https://q.uiver.app/#q=WzAsNSxbMCwwLCJBXFxpbXAgQiJdLFsyLDAsIlxcRV97aX0iXSxbMCwxLCIxIl0sWzIsMSwiXFxVX3tpfSJdLFsxLDEsIlxcVV9pIFxceCBcXFVfaSJdLFswLDEsInt9Il0sWzAsMiwiISIsMl0sWzAsMywiIiwwLHsic3R5bGUiOnsibmFtZSI6ImNvcm5lciIsImJvZHkiOnsibmFtZSI6Im5vbmUifSwiaGVhZCI6eyJuYW1lIjoibm9uZSJ9fX1dLFsxLDMsImVfe2l9Il0sWzIsNCwiXFxsYW5nbGVcXG5hbWVvZiBBLCBcXG5hbWVvZiBCXFxyYW5nbGUiLDJdLFs0LDMsIlxcaW1wIiwyXV0=&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F9777f5b407fb5613a8b8143c2666a48fbe6e5a44%2Fquiver-macros.tex
\begin{tikzcd}
	{A\imp B} && {\E_{i}} \\
	1 & {\U_i \x \U_i} & {\U_{i}}
	\arrow["{{}}", from=1-1, to=1-3]
	\arrow["{!}"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["{e_{i}}", from=1-3, to=2-3]
	\arrow["{\langle\nameof A, \nameof B\rangle}"', from=2-1, to=2-2]
	\arrow["\imp"', from=2-2, to=2-3]
\end{tikzcd}
\qquad\]
So then if I note that $\pair \rid !  : GH\U_i \to GH\U_i \x 1 $ then  I'm interested in investigating
\[\imp \o (\nameof{GHe_i} \x u_i) \o \pair\rid ! : GH\U_i  \to \U_{i+1}\]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{A Universal Property}
\def\cset{\mathsf{Set}}
\def\fset{\mathsf{FinSet}}
\def\fiber{\mathbf{fiber}}
Here's a universal property for universes.

Say I have a category $\C$ with a subcategory $\C_0$ of
of morphisms considered `small'.

A small morphism $m : \E \to \U$ in $\C_0$ is
called a {\em small object classifier} if, for
any small $f : A \to B$ in $\C_0$, there is
a unique pair of $e_f, u_f$ that make the diagram
\[\begin{tikzcd}
	{A} & {\E} \\
	{B} & {\U}
	\arrow["{e_f}", from=1-1, to=1-2]
	\arrow["f"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["m", from=1-2, to=2-2]
	\arrow["u_f"', from=2-1, to=2-2]
\end{tikzcd}\]
a pullback.

\subsection{Exercise}

We work in $\C = \cset$. A morphism is small if it has finite fibers.
 $\U$ is $\fset$ and $\E = (F : \fset) \x F$. I expect $m = \pi_1 : \E \to \U$ is an object
classifier.

For any map $f : A \to B$ between finite
sets, I set
\[u_f = \lambda x . \fiber_f (x)\]
\[e_f = \lambda y . \langle \fiber_f (f(y)), y\rangle\]
Now suppose we have $h,g$ in
% https://q.uiver.app/#q=WzAsNSxbMSwxLCJBIl0sWzIsMSwiXFxFIl0sWzEsMiwiQiJdLFsyLDIsIlxcVSJdLFswLDAsIkMiXSxbMCwxLCJ7ZShmKX0iXSxbMCwyLCJmIiwyXSxbMCwzLCIiLDAseyJzdHlsZSI6eyJuYW1lIjoiY29ybmVyIiwiYm9keSI6eyJuYW1lIjoibm9uZSJ9LCJoZWFkIjp7Im5hbWUiOiJub25lIn19fV0sWzEsMywibSJdLFsyLDMsInUoZikiLDJdLFs0LDEsImgiLDAseyJjdXJ2ZSI6LTN9XSxbNCwyLCJnIiwyLHsiY3VydmUiOjN9XSxbNCwwLCIiLDIseyJzdHlsZSI6eyJib2R5Ijp7Im5hbWUiOiJkYXNoZWQifX19XV0=&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F9777f5b407fb5613a8b8143c2666a48fbe6e5a44%2Fquiver-macros.tex
\[\begin{tikzcd}
	C \\
	& A & \E \\
	& B & \U
	\arrow[dashed, from=1-1, to=2-2]
	\arrow["h", bend right=-40, from=1-1, to=2-3]
	\arrow["g"', bend right=40, from=1-1, to=3-2]
	\arrow["{{e_f}}", from=2-2, to=2-3]
	\arrow["f"', from=2-2, to=3-2]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=2-2, to=3-3]
	\arrow["m", from=2-3, to=3-3]
	\arrow["{u_f}"', from=3-2, to=3-3]
\end{tikzcd}\]
This is enough information that the $\pi_2 \o h$ uniquely tells us which element of $A$ to go into via
the pullback UMP map.
\subsection{Uniqueness}
Suppose two small object classifiers $m : \E \to \U$ and $m' : \E' \to \U'$.
Then we immediately get
\[\begin{tikzcd}
	{\E} & {\E'} \\
	{\U} & {\U'}
	\arrow["{e_0}", from=1-1, to=1-2]
	\arrow["m"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["m'", from=1-2, to=2-2]
	\arrow["u_0"', from=2-1, to=2-2]
\end{tikzcd}
\qquad
\begin{tikzcd}
	{\E'} & {\E} \\
	{\U'} & {\U}
	\arrow["{e_1}", from=1-1, to=1-2]
	\arrow["m'"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["m", from=1-2, to=2-2]
	\arrow["u_1"', from=2-1, to=2-2]
\end{tikzcd}
\]
Combining pullbacks, we see, e.g.
\[\begin{tikzcd}
	{\E} & {\E} \\
	{\U} & {\U}
	\arrow["{e_1 \o e_0}", from=1-1, to=1-2]
	\arrow["f"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-2]
	\arrow["f", from=1-2, to=2-2]
	\arrow["u_1 \o u_0"', from=2-1, to=2-2]
\end{tikzcd}\]
And similarly in the other direction.
By uniqueness in the definition of object classifier, we conclude
the two classifiers are isomorphic.

\subsection{Preservation of Universes}
Every category $\C$ I'm working with in the parmetricity discussion above
has subcategories $\C_0 \subseteq \C_1 \subseteq\C_2 \subseteq\cdots$ and
classifiers $m_i : \E_i \to \U_i \in \C_i$. Notice these $\C_i$ aren't the same thing
as `the types that are definable in universe level $i$', they're wide subcategories
whose morphisms have {\em fibers} all that belong in universe level $i$. This is why
$\U_i \in \C_i$, and not $\C_{i+1}$.

For any set $X$, the functor $G = \prod : \C^X \to \C$ should have
 $H = \Delta : \C \to \C^X$ as a partner, and $H$ should preserve universes.
Let's take $X=2$ as an example, and  check that
\[(m, m) : ( \E_0, \E_0) \to ( \rset_0, \rset_0)\]
is the $0$-small object classifier for $\C \x \C$. This makes sense. First
of all, this morphism itself is $0$-small, since it's the pair of two $0$-small
morphisms from $\C$. Second, for any pair of $0$-small morphisms $f, f'$, there
is a unique quadruple of morphisms completing a pair of independent pullback squares,
exactly because $m$ is the small object classifier in $\C$.

\subsection{Universes in $(\rid_C, G)$}
First I need to define the comma construction on categories with a notion of smallness.
The comma construction requires functors $F : \B\to  \C$ and $G :  \D \to \C$.
I guess to be a functor between categories-with-smallness requires preservation of smallness.
I presume I have
\[\B_0 \subseteq \B_1 \subseteq \cdots \qquad
\C_0 \subseteq \C_1 \subseteq \cdots \qquad
\D_0 \subseteq \D_1 \subseteq \cdots\]
An object of $(F, G)$ is to be a tuple $(B, D, f : FB \to GD \in \C)$.
A morphism between these looks like
% https://q.uiver.app/#q=WzAsNCxbMCwwLCJGQl8xIl0sWzAsMSwiR0RfMSJdLFsxLDAsIkZCXzIiXSxbMSwxLCJHRF8yIl0sWzAsMSwiZl8xIiwyXSxbMCwyLCJGYiJdLFsxLDMsIkZkIiwyXSxbMiwzLCJmXzIiXV0=&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F9777f5b407fb5613a8b8143c2666a48fbe6e5a44%2Fquiver-macros.tex
\[\begin{tikzcd}
	{FB_1} & {FB_2} \\
	{GD_1} & {GD_2}
	\arrow["Fb", from=1-1, to=1-2]
	\arrow["{f_1}"', from=1-1, to=2-1]
	\arrow["{f_2}", from=1-2, to=2-2]
	\arrow["Fd"', from=2-1, to=2-2]
\end{tikzcd}\]
I guess I'd say $(b,d)\in (F,G)_i$ if $b \in \B_i$ and $d\in \D_i$.
This leaves no role for the smallness data in $\C$ to matter, but maybe that's ok.
Maybe it's not even needed for the construction. Actually, in my case, it's moot
because one of the functors is the identity functor, so I need it in $\C$ and $\D$
anyhow.

Thus I'm contemplating
\[\begin{tikzcd}
	{\D' = (\rid_\C, G)} && \D = \C \x \C\\
	\C && \C
	\arrow["\partial", from=1-1, to=1-3]
	\arrow["{G'}"', shift right, from=1-1, to=2-1]
	\arrow["G"', shift right, from=1-3, to=2-3]
	\arrow["{H'}"', shift right, from=2-1, to=1-1]
	\arrow["\gamma", shorten <=14pt, shorten >=14pt, Rightarrow, from=2-1, to=1-3]
	\arrow[equals, from=2-1, to=2-3]
	\arrow["H"', shift right, from=2-3, to=1-3]
\end{tikzcd}\]
for example, where all categories depicted are size-stratified categories in a known way.
I'm hunting for a description of the level-0 universe in $\D'$. It should react
by creating pullbacks whenever I have a small morphism between any two objects of
$\D'$. That is, I'm trying to find a suitable $\E_\star$ and $\U_\star$ to fit in the diagram
\[\begin{tikzcd}
	{(C_1,D_1,f_1:C_1\to GD_1)} & {(\E_\star,(\E,\E),\ell:\E_\star \to\E\x\E)} \\
	{(C_2,D_2,f_2:C_2\to GD_2)} & {(\U_\star,(\U,\U),k:\U_\star\to\U\x\U)}
	\arrow[from=1-1, to=1-2]
	\arrow["{(c,d)}"', from=1-1, to=2-1]
	\arrow["{(m_\star,m\x m)}", from=1-2, to=2-2]
	\arrow[""{name=0, anchor=center, inner sep=0}, from=2-1, to=2-2]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=0]
\end{tikzcd}\]
Or expanding this out in 3d, I'm hoping that for every $(c,d)$ there are unique fillers
for the dashed lines in
% https://q.uiver.app/#q=WzAsOCxbMCwwLCJDXzEiXSxbMywxLCJHRF8xIl0sWzAsMiwiQ18yIl0sWzMsMywiR0RfMiJdLFsyLDAsIlxcRV9cXHN0YXIiXSxbNSwxLCJHSFxcRSJdLFsyLDIsIlxcVV9cXHN0YXIiXSxbNSwzLCJHSFxcVSJdLFswLDEsImZfMSIsMix7ImxhYmVsX3Bvc2l0aW9uIjozMH1dLFsyLDMsImZfMiIsMl0sWzAsMiwiYyIsMl0sWzEsMywiR2QiLDAseyJsYWJlbF9wb3NpdGlvbiI6MzB9XSxbMCw0LCIiLDIseyJzdHlsZSI6eyJib2R5Ijp7Im5hbWUiOiJkYXNoZWQifX19XSxbNCw1LCJcXGVsbCJdLFs0LDYsIm1fXFxzdGFyIiwyLHsibGFiZWxfcG9zaXRpb24iOjcwfV0sWzUsNywiR0htIl0sWzYsNywiayIsMV0sWzMsNywiIiwwLHsic3R5bGUiOnsiYm9keSI6eyJuYW1lIjoiZGFzaGVkIn19fV0sWzIsNiwiIiwwLHsic3R5bGUiOnsiYm9keSI6eyJuYW1lIjoiZGFzaGVkIn19fV0sWzEsNSwiIiwwLHsic3R5bGUiOnsiYm9keSI6eyJuYW1lIjoiZGFzaGVkIn19fV0sWzAsNiwiIiwwLHsic3R5bGUiOnsibmFtZSI6ImNvcm5lciJ9fV0sWzEsNywiIiwwLHsic3R5bGUiOnsibmFtZSI6ImNvcm5lciJ9fV1d&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F9777f5b407fb5613a8b8143c2666a48fbe6e5a44%2Fquiver-macros.tex
\[\begin{tikzcd}
	{C_1} && {\E_\star} \\
	&&& {GD_1} && {GH\E} \\
	{C_2} && {\U_\star} \\
	&&& {GD_2} && {GH\U}
	\arrow[dashed, from=1-1, to=1-3]
	\arrow["{f_1}"'{pos=0.3}, from=1-1, to=2-4]
	\arrow["c"', from=1-1, to=3-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=3-3]
	\arrow["\ell", from=1-3, to=2-6]
	\arrow["{m_\star}"'{pos=0.7}, from=1-3, to=3-3]
	\arrow[dashed, from=2-4, to=2-6]
	\arrow["Gd"{pos=0.3}, from=2-4, to=4-4]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=2-4, to=4-6]
	\arrow["GHm", from=2-6, to=4-6]
	\arrow[dashed, from=3-1, to=3-3]
	\arrow["{f_2}"', from=3-1, to=4-4]
	\arrow["k"{description}, from=3-3, to=4-6]
	\arrow[dashed, from=4-4, to=4-6]
\end{tikzcd}\]
that result in the indicated pullback squares.

After I stare at this diagram a while I realize that $\U_\star$ must in some sense
be the type of names of relations. For the binary relation example,
I can use informal dependent record notation to suggestively explain what's going on.
The entire rightmost parallelogram is all just record projections.
\[\begin{array}{ll}
\E_\star = &\{ A : \rset, B : \rset, R : A \to B \to \rset, a : A, b : B, r : R\ a\ b\}\\
GH\E = &\{ A : \rset, B : \rset, {\color{white}R : A \to B \to \rset}, a : A, b : B{\color{white}, r : R\ a\ b}\}\\
\U_\star = &\{ A : \rset, B : \rset, R : A \to B \to \rset{\color{white}, a : A, b : B, r : R\ a\ b}\}\\
GH\U = &\{ A : \rset, B : \rset {\color{white},R : A \to B \to \rset, a : A, b : B, r : R\ a\ b}\}\\
\end{array}
\]
To get from $GD_2 = A_2 \x B_2$ to $GH\U$, we take as input $\langle a_2, b_2\rangle$
and look at the fibers along $Gd$ to give us $A \subseteq A_1$ and $B \subseteq B_1$.
To get from $GD_1 = A_1 \x B_1$ to $GH\E$, we take $Gd$ downstairs, and then take the fibers
back up to discover that the $\langle a_1, b_1 \rangle$ we started with does live in
the fiber of its image.

To map $c_2 \in C_2$ to $\U_\star$, we travel along $f_2$, and take fibers up $Gd$ again
 to find out what our $A, B$ must be. We take the fiber of $c_2$ along $c$ to find out
what $R$ must be. Every preimage of $c$ really does represent points of $A$ and $B$ that are $R$-related,
 because $f_1$ maps it back to points of $GD_1$ that are in the fiber of $f_2(c)$.

Finally, to map $c_1 \in C_1$ to $\E_\star$, again our $A$ and $B$ are the
$Gd$-fibers over $f(c(c_1))$, the $R$ is the fiber of $c$ over $c(c_1)$,
the $a, b$ come from the element $f_1(c)$, and the $r$ is the element $c_1$
itself, construed as being in the $c$-fiber of its own image under $c$.
\subsection{Why not Adjunctions?}
When I set up
\[\begin{tikzcd}
  \D' \ar[d, "G'",swap]\ar[r,"\partial"]&  \D\ar[d, "G"]\\
\C\ar[r,equal]\ar[ur,shorten <>=10pt,Rightarrow, "\gamma"]&\C
\end{tikzcd}
\]
with $\D' = (\rid_\C, G)$, I don't believe that $H'$ is going to be left adjoint
to $G'$, creating an adjunction between $\D'$ and $\C$. Why? Because $\D'$
is the category of $G$-ary relations in $\C$, and $G'$ only projects out the
total space. So given a relation $D' = (R, (A,B), f: R \to A \x B) \in \D'$ and an object $C \in \C$,
I don't believe there's a homset bijection
\[\D'(H'C, D') \cong \C(C, R)\]
because maybe $H'C$ has extra stuff.
\subsection{Construction}
I believe the above is the appropriate intuition. What explicitly is $\rset_\star$, as an object of $\C$?
In the special case of binary relations, I can form $\U \x \U$ no problem. How do I make the Sigma
type $\Sigma (\U \x \U) (\lambda x . \E(x_1) \x \E(x_2) \to \U)$?
Whenever I have $a : \Gamma,A \to \Gamma$ and $b : \Gamma,A,B \to \Gamma,A$ the sigma type
is just the composition $b \o a : \Gamma,\Sigma A B$.

So how do I construct $(A:\U,B:\U,A \x B \to \U) \to (A:\U,B:\U)$? Well, first of all, how do
I get from $a:\Gamma,A \to \Gamma$ and $b:\Gamma,B \to \Gamma$ to $\Gamma, A \imp B$?
I guess this should come from the lccc structure on $\C$. The category $\C/\Gamma$ should
be ccc. Its products are pullbacks. So $a \imp b : \Gamma,A\imp B \to \Gamma$ exists.
The evaluation map runs like
\[\begin{tikzcd}
  \Gamma,A\imp B,A \ar[dr, "ev"]\ar[dd]\pbck\ar[rr]&&  \Gamma,A\imp B\ar[dd, "a\imp b"] \\
&\Gamma,B \ar[dr, "b"]\\
\Gamma,A \ar[rr,"a"']&&\Gamma
\end{tikzcd}
\]
Ok, now the only task is to construct $(A:\U,B:\U, x : A \x B) \to (A : \U, B: \U)$.
This is $GHm : GH\E \to GH\U$ is $(A: \U, B : \U, a : A, b : B) \to (A: \U, B : \U)$.
The type that is constantly $\U$ regardless of the $\U \x \U$ context is
$\pi_\U: GH\U \x \U \to GH\U$. So I think

Define
\[\pi_\U : GH\U \x U \to GH\U = \pi_1\]
\[\wt{GH\E} = GHm\]
\[ \wt{\U_\star} : \U_\star \to GH\U =  \wt{GH\E} \imp \pi_U\]
Then I think $E_\star$ is constructed like
% https://q.uiver.app/#q=WzAsOSxbMCwwLCJcXEVfXFxzdGFyIl0sWzIsMCwiR0hcXFVcXHhcXEUiXSxbMiwxLCJHSFxcVVxceFxcVSJdLFswLDIsIlxcYnVsbGV0Il0sWzEsMiwiR0hcXEUiXSxbMCwzLCJcXFVfXFxzdGFyIl0sWzEsMywiR0hcXFUiXSxbMCwxLCJcXGJ1bGxldCJdLFsyLDMsIkdIXFxVIl0sWzAsMV0sWzEsMiwiR0hcXFVcXHggbSJdLFszLDRdLFszLDVdLFs1LDYsImsiLDJdLFs0LDYsIkdIbSJdLFszLDYsIiIsMix7InN0eWxlIjp7Im5hbWUiOiJjb3JuZXIifX1dLFswLDcsIlxcbGFuZ2xlIG1fXFxzdGFyLFxcZWxsXFxyYW5nbGUiLDJdLFs3LDMsIiIsMix7ImxldmVsIjoyLCJzdHlsZSI6eyJoZWFkIjp7Im5hbWUiOiJub25lIn19fV0sWzcsMiwiZXYiLDJdLFsyLDgsIlxccGlfVSJdLFs2LDgsIiIsMCx7ImxldmVsIjoyLCJzdHlsZSI6eyJoZWFkIjp7Im5hbWUiOiJub25lIn19fV0sWzAsMTgsIiIsMix7ImxldmVsIjoxLCJzdHlsZSI6eyJuYW1lIjoiY29ybmVyIn19XV0=&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F9777f5b407fb5613a8b8143c2666a48fbe6e5a44%2Fquiver-macros.tex
\[\begin{tikzcd}
	{\E_\star} && {GH\U\x\E} \\
	\E' && {GH\U\x\U} \\
	\E' & {GH\E} \\
	{\U_\star} & {GH\U} & {GH\U}
	\arrow[from=1-1, to=1-3]
	\arrow["{\langle m_\star,\ell\rangle}"', from=1-1, to=2-1]
	\arrow["{GH\U\x m}", from=1-3, to=2-3]
	\arrow[""{name=0, anchor=center, inner sep=0}, "ev"', from=2-1, to=2-3]
	\arrow[equals, from=2-1, to=3-1]
	\arrow["{\pi_U}", from=2-3, to=4-3]
	\arrow[from=3-1, to=3-2]
	\arrow[from=3-1, to=4-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=3-1, to=4-2]
	\arrow["GHm", from=3-2, to=4-2]
	\arrow["k"', from=4-1, to=4-2]
	\arrow[equals, from=4-2, to=4-3]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=0]
\end{tikzcd}\]
My intuition for what data is present in each object of this diagram is something like
\[\begin{tikzcd}
	{\{ABRabr\}} && {\{ABR_0r\}} \\
	{\{ABRab\}} && {\{ABR_0\}} \\
	{\{ABRab\}} & {\{ABab\}} \\
	{\{ABR\}} & {\{AB\}} & {\{AB\}}
	\arrow[from=1-1, to=1-3]
	\arrow[from=1-1, to=2-1]
	\arrow[from=1-3, to=2-3]
	\arrow[from=2-1, to=2-3]
	\arrow[equals, from=2-1, to=3-1]
	\arrow[from=2-3, to=4-3]
	\arrow[from=3-1, to=3-2]
	\arrow[from=3-1, to=4-1]
	\arrow[from=3-2, to=4-2]
	\arrow[from=4-1, to=4-2]
	\arrow[equals, from=4-2, to=4-3]
\end{tikzcd}\]
where $R : A \to B \to \U$ but simply $R_0 : \U$.
\subsection{Construction, Take 2}
Set $\wt{GH\E} = GHm$. Let $[\dash]$ be the functor $\C \to \C/GH\U$ that takes an object $C$ to
the projection $\pi_1 : GH\U \x C \to GH\U$
and a morphism $m$ to $\rid_{GH\U} \x m$.
Then define $\wt{U_\star} = \wt{GH\E} \imp [\U]$ and define $\E_\star$ by the pullback
\[\begin{tikzcd}
	{\E_\star} && {[\E]} \\
	{\widetilde{\U_\star} \x\widetilde{GH\E}} && {[\U]}
	\arrow[from=1-1, to=1-3]
	\arrow["{{\langle m_\star,\ell\rangle}}"', from=1-1, to=2-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=2-3]
	\arrow["{[m]}", from=1-3, to=2-3]
	\arrow["ev"', from=2-1, to=2-3]
\end{tikzcd}\]
\subsection{Checking Object Classifier Property}
Suppose we have $c, d, f_1, f_2$ in
\[\begin{tikzcd}
	{C_1} && {\E_\star} \\
	&&& {GD_1} && {GH\E} \\
	{C_2} && {\U_\star} \\
	&&& {GD_2} && {GH\U}
	\arrow["c_1", dashed, from=1-1, to=1-3]
	\arrow["{f_1}"'{pos=0.3}, from=1-1, to=2-4]
	\arrow["c"', from=1-1, to=3-1]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=1-1, to=3-3]
	\arrow["\ell", from=1-3, to=2-6]
	\arrow["{m_\star}"'{pos=0.7}, from=1-3, to=3-3]
	\arrow["Gd_1"', dashed, from=2-4, to=2-6]
	\arrow["Gd"{pos=0.3}, from=2-4, to=4-4]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=2-4, to=4-6]
	\arrow["GHm", from=2-6, to=4-6]
	\arrow["c_2", dashed, from=3-1, to=3-3]
	\arrow["{f_2}"', from=3-1, to=4-4]
	\arrow["\wt{\U_\star}"{description}, from=3-3, to=4-6]
	\arrow["Gd_2"', dashed, from=4-4, to=4-6]
\end{tikzcd}\]
How do we construct $c_1, c_2, d_1, d_2$?
The maps $d_1, d_2$ should be easy: $H$ preserves universes, so $Hm$ is the
universe in $\D$. We take the name of
$d$ in the category $\D$ to get unique $d_1, d_2$ yielding a pullback in $\D$. Then I suppose we ask for $G$
to preserve all finite limits as well, so the pullback diagram is carried to $\C$.

Now define some names for maps in the slice over $GH\U$:
\[\wt{C_1} = Gd_2 \o f_2 \o c\]
\[\wt{C_2} = Gd_2 \o f_2 \]
\[\wt{GD_1} = Gd_2 \o Gd \]
\[\wt{\E_\star} = GHm \o \ell \]
Reimagine the above diagram in that slice category:
% https://q.uiver.app/#q=WzAsNyxbMSwwLCJcXHdpZGV0aWxkZXtcXEVfXFxzdGFyfSJdLFszLDAsIlxcd2lkZXRpbGRle0dIXFxFfSJdLFswLDIsIlxcd2lkZXRpbGRle0dIXFxFfVxcaW1wIFtcXFVdIl0sWzIsMiwiXFx3aWRldGlsZGV7Q18xfSJdLFs0LDIsIlxcd2lkZXRpbGRle0dEXzF9Il0sWzEsNCwiXFx3aWRldGlsZGV7Q18yfSJdLFszLDQsIlxcd2lkZXRpbGRle0dEXzJ9Il0sWzAsMSwiXFxlbGwiXSxbMCwyLCJ7e21fXFxzdGFyfX0iLDIseyJsYWJlbF9wb3NpdGlvbiI6NzB9XSxbMywwLCJ7Y18xfSIsMCx7InN0eWxlIjp7ImJvZHkiOnsibmFtZSI6ImRhc2hlZCJ9fX1dLFszLDIsIiIsMCx7InN0eWxlIjp7Im5hbWUiOiJjb3JuZXIiLCJib2R5Ijp7Im5hbWUiOiJub25lIn0sImhlYWQiOnsibmFtZSI6Im5vbmUifX19XSxbMyw0LCJ7e2ZfMX19IiwyLHsibGFiZWxfcG9zaXRpb24iOjMwfV0sWzMsNSwiYyIsMl0sWzQsMSwie0dkXzF9IiwyXSxbNCw2LCJHZCIsMCx7ImxhYmVsX3Bvc2l0aW9uIjozMH1dLFs1LDIsIntjXzJ9IiwwLHsic3R5bGUiOnsiYm9keSI6eyJuYW1lIjoiZGFzaGVkIn19fV0sWzUsNiwie3tmXzJ9fSIsMl1d&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F27e801532261f2b430d0e7cd890483119d74deb2%2Fquiver-macros.tex
\[\begin{tikzcd}
	& {\widetilde{\E_\star}} && {\widetilde{GH\E}} \\
	\\
	{\widetilde{GH\E}\imp [\U]} && {\widetilde{C_1}} && {\widetilde{GD_1}} \\
	\\
	& {\widetilde{C_2}} && {\widetilde{GD_2}}
	\arrow["\ell", from=1-2, to=1-4]
	\arrow["{{{m_\star}}}"'{pos=0.7}, from=1-2, to=3-1]
	\arrow["{{c_1}}", dashed, from=3-3, to=1-2]
	\arrow["\lrcorner"{anchor=center, pos=0.125, rotate=-135}, draw=none, from=3-3, to=3-1]
	\arrow["{{{f_1}}}"'{pos=0.3}, from=3-3, to=3-5]
	\arrow["c"', from=3-3, to=5-2]
	\arrow["{{Gd_1}}"', from=3-5, to=1-4]
	\arrow["Gd"{pos=0.3}, from=3-5, to=5-4]
	\arrow["{{c_2}}", dashed, from=5-2, to=3-1]
	\arrow["{{{f_2}}}"', from=5-2, to=5-4]
\end{tikzcd}\]
Define $\wt P = \wt{C_2} \x \wt{GH\E}$
and note there is a map $u = \langle c, Gd_1\o f_1\rangle : \wt{C_1} \to \wt P$.
Hence also $u : C_1 \to P$. This has a name $\nameof {u} : P \to \U$.
 Further, $\wt P : P \to GH\U$. Hence
\[\langle \wt P, \nameof{u}\rangle : P \to GH\U \x \U\]
and since its first component is just $\wt P$, we find
\[\langle \wt P, \nameof{u}\rangle : \wt P \to [\U]\]
hence
\[ \langle \wt P, \nameof{u}\rangle : \wt{C_2} \x \wt{GH\E} \to [\U]\]
thus we can set
\[c_2 = \lambda \langle \wt P, \nameof{u}\rangle : \wt{C_2} \to  \wt{GH\E} \imp [\U]\]


Now to get $c_1$, we need some pullback pair components. We can start with defining
\[c_L: \wt{C_1} \to \wt{\U_\star} \x \wt{GH\E}\]
\[c_L = \langle c_2 \o c, Gd_1 \o f_1\rangle\]
\[= \langle (\lambda \langle \wt P, \nameof{u}\rangle) \o c, Gd_1 \o f_1\rangle \]
\[= \langle \lambda (\langle \wt P, \nameof{u}\rangle \o (c \x \rid_{\wt{GH\E}})) , Gd_1 \o f_1\rangle \]
Now note that
\[ev \o c_L = \langle \wt P , \nameof{u} \rangle \o (c \x \rid_{\wt{GH\E}}) \o \langle id_{\wt{C_1}}, Gd_1 \o f_1\rangle : \wt{C_1} \to [\U]\]

\[ = \langle \wt P , \nameof{u} \rangle  \o \langle c, Gd_1 \o f_1\rangle\]
\[ = \langle \wt P , \nameof{u} \rangle  \o u \]
\[ = \langle \wt P \o u , \nameof{u} \o u \rangle  \]
\[ = \langle \wt{C_1}, m \o \bar u \rangle : \wt{C_1} \to [\U]  \]
where $\bar u$ is the projection from the diagram

\[\begin{tikzcd}
	{C_1} & \E \\
	P & \U
	\arrow["{\bar u}", from=1-1, to=1-2]
	\arrow["u"', from=1-1, to=2-1]
	\arrow["m", from=1-2, to=2-2]
	\arrow["{\nameof u}"', from=2-1, to=2-2]
\end{tikzcd}\]
Therefore our goal is to come up with some $c_R : \wt{C_1} \to [\E]$ such that
\[[m] \o c_R = ev \o c_L = \langle \wt{C_1}, m \o \bar u\rangle\]
But this is easy given what we have: we set
\[c_R = \langle\wt{C_1}, \bar u\rangle : C_1 \to [\E]\]
This means we can set
\[c_1 = \langle c_L, c_R \rangle = \langle \langle c_2 \o c, Gd_1 \o f_1 \rangle,\langle\wt{C_1}, \bar u\rangle\rangle\]
%%  Since $k : \U_\star \to GH\U$ is an internal hom, I expect $c_2$ to be an internal lambda. To carry out that
%% $\lambda$, I need a map in the slice over $GH\U$ that goes $(Gd_2 \o f_2) \x GHm \to \pi_U$.
%% The pullback of those two maps $(Gd_2 \o f_2)$ and $GHm$ is going to be the composite
%% of two pullback squares:
%% \[\begin{tikzcd}
%% 	{C_1} \\
%% 	& P & {GD_1} & {GH\E} \\
%% 	& {C_2} & {GD_2} & {GH\U}
%% 	\arrow["u"{description}, dashed, from=1-1, to=2-2]
%% 	\arrow["{f_1}", curve={height=-12pt}, from=1-1, to=2-3]
%% 	\arrow["c"', curve={height=12pt}, from=1-1, to=3-2]
%% 	\arrow["{p_1}", from=2-2, to=2-3]
%% 	\arrow["{p_2}"', from=2-2, to=3-2]
%% 	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=2-2, to=3-3]
%% 	\arrow["{Gd_1}", from=2-3, to=2-4]
%% 	\arrow["Gd"{description}, from=2-3, to=3-3]
%% 	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=2-3, to=3-4]
%% 	\arrow["GHm", from=2-4, to=3-4]
%% 	\arrow["{{f_2}}"', from=3-2, to=3-3]
%% 	\arrow["{Gd_2}"', from=3-3, to=3-4]
%% \end{tikzcd}\]
%% Then $\nameof u : P \to \U$ and $\langle Gd_2 f_2 p_2, \nameof u \rangle : P \to GH\U \x \U$
%% and really therefore
%% \[\langle Gd_2 f_2 p_2, \nameof u \rangle : (Gd_2 \o f_2) \x GHm \to \pi_U\]
%% and so we can set
%% \[c_2 = \lambda\langle Gd_2 f_2 p_2, \nameof u \rangle : (Gd_2 \o f_2) \to k\]
%% Now to get $C_1 \to \E_\star$ we need to come up with some pullback pair components.
%% It's easy to come up with
%% \[c_2\o c : C_1 \to \U_\star \qquad Gd_1 \o f_1 : C_1 \to GH\E \]
%% and based on the fact that we just constructed $c_2$ so that $kc_2 = Gd_2 \o f_2$,
%% we can be assured that $k \o (c_2\o c) = GHm \o (Gd_2 \o f_1)$ because both of them
%% are equal to $Gd_2 \o f_2 \o c$. Therefore we construct
%% \[\langle c_2\o c, Gd_1 \o f_1\rangle : C_1 \to \E'\]


%% By uniqueness, we can push the precomposition of $c$ under the lambda, so this is
%% the same as
%% \[\langle \lambda \langle Gd_2 \o f_2 \o  p_2 \o c, \nameof u \rangle , Gd_1 \o f_1\rangle : C_1 \to \E'\]

%% Now we want some map
%% \[z : \qquad C_1 \to GH\U \x \E\]
%% such that



\subsection{Exercise}
The typical $\beta$ diagram for exponentials is, for $f : A \x B \to C$ and $M : A \to B$,
% https://q.uiver.app/#q=WzAsNCxbMCwxLCIgKEJcXGltcCBDKVxceCBCIl0sWzEsMSwiQyJdLFswLDAsIkEiXSxbMSwwLCJBXFx4IEIiXSxbMCwxLCJldiIsMl0sWzIsMCwiXFxsYW5nbGVcXGxhbWJkYSBmLCBNXFxyYW5nbGUiLDJdLFsyLDMsIlxcbGFuZ2xlIFxccmlkLCBNXFxyYW5nbGUiXSxbMywxLCJmIl1d&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F27e801532261f2b430d0e7cd890483119d74deb2%2Fquiver-macros.tex
\[\begin{tikzcd}
	A & {A\x B} \\
	{ (B\imp C)\x B} & C
	\arrow["{\langle \rid, M\rangle}", from=1-1, to=1-2]
	\arrow["{\langle\lambda f, M\rangle}"', from=1-1, to=2-1]
	\arrow["f", from=1-2, to=2-2]
	\arrow["ev"', from=2-1, to=2-2]
\end{tikzcd}\]
If we have a slice category over $D$, and $A : A_0 \to D, B : B_0 \to D, C : C_0 \to D$, this is
% https://q.uiver.app/#q=WzAsMTAsWzAsMiwiKChCXFxpbXAgQykgXFx4IEIpXzAiXSxbNCwyLCJDXzAiXSxbMCwwLCJBXzAiXSxbNCwwLCIoQSBcXHggQilfMCJdLFsyLDEsIkQiXSxbNiwyLCJBXzAiXSxbNywxLCJCXzAiXSxbNywyLCJEIl0sWzYsMSwiKEFcXHggQilfMCJdLFs1LDAsIkFfMCJdLFswLDEsImV2IiwyXSxbMiwwLCJcXGxhbmdsZVxcbGFtYmRhIGYsIE1cXHJhbmdsZSIsMl0sWzIsMywiXFxsYW5nbGUgXFxyaWQsIE1cXHJhbmdsZSJdLFszLDEsImYiXSxbMiw0LCJBIiwxXSxbMCw0LCIoQlxcaW1wIEMpIFxceCBCIiwxXSxbMSw0LCJDIiwxXSxbMyw0LCJBIFxceCBCIiwxXSxbNSw3LCJBIiwyXSxbNiw3LCJCIl0sWzgsNl0sWzgsNV0sWzksNSwiIiwyLHsiY3VydmUiOjIsImxldmVsIjoyLCJzdHlsZSI6eyJoZWFkIjp7Im5hbWUiOiJub25lIn19fV0sWzksNiwiTSIsMCx7ImN1cnZlIjotMn1dLFs5LDgsIlxcbGFuZ2xlXFxyaWQsTVxccmFuZ2xlIiwxXSxbOCw3LCJBXFx4IEIiLDFdLFs4LDcsIiIsMSx7InN0eWxlIjp7Im5hbWUiOiJjb3JuZXIifX1dXQ==&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F27e801532261f2b430d0e7cd890483119d74deb2%2Fquiver-macros.tex
\[\begin{tikzcd}
	{A_0} &&&& {(A \x B)_0} & {A_0} \\
	&& D &&&& {(A\x B)_0} & {B_0} \\
	{((B\imp C) \x B)_0} &&&& {C_0} && {A_0} & D
	\arrow["{\langle \rid, M\rangle}", from=1-1, to=1-5]
	\arrow["A"{description}, from=1-1, to=2-3]
	\arrow["{\langle\lambda f, M\rangle}"', from=1-1, to=3-1]
	\arrow["{A \x B}"{description}, from=1-5, to=2-3]
	\arrow["f", from=1-5, to=3-5]
	\arrow["{\langle\rid,M\rangle}"{description}, from=1-6, to=2-7]
	\arrow["M", curve={height=-12pt}, from=1-6, to=2-8]
	\arrow[curve={height=12pt}, equals, from=1-6, to=3-7]
	\arrow[from=2-7, to=2-8]
	\arrow[from=2-7, to=3-7]
	\arrow["{A\x B}"{description}, from=2-7, to=3-8]
	\arrow["\lrcorner"{anchor=center, pos=0.125}, draw=none, from=2-7, to=3-8]
	\arrow["B", from=2-8, to=3-8]
	\arrow["{(B\imp C) \x B}"{description}, from=3-1, to=2-3]
	\arrow["ev"', from=3-1, to=3-5]
	\arrow["C"{description}, from=3-5, to=2-3]
	\arrow["A"', from=3-7, to=3-8]
\end{tikzcd}\]
Now precomposition of a lambda with some other morphism works like this.
If $q : Q \to A$ and $f : A \x B \to C$, then we have
% https://q.uiver.app/#q=WzAsNSxbMCwwLCJRXFx4IEIiXSxbMSwwLCJBXFx4IEIiXSxbMiwwLCIoQlxcaW1wIEMpIFxceCBCIl0sWzIsMSwiQyJdLFswLDEsIihCXFxpbXAgQylcXHggQiJdLFswLDEsInFcXHggXFxyaWRfQiJdLFsxLDIsIlxcbGFtYmRhIGZcXHggXFxyaWRfQiJdLFsyLDMsImV2Il0sWzAsNCwiXFxsYW1iZGEoZlxcbyhxXFx4IFxccmlkX0IpKSBcXHggXFxyaWRfQiIsMl0sWzQsMywiZXYiLDJdLFsxLDMsImYiLDFdXQ==&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F27e801532261f2b430d0e7cd890483119d74deb2%2Fquiver-macros.tex
\[\begin{tikzcd}
	{Q\x B} & {A\x B} & {(B\imp C) \x B} \\
	{(B\imp C)\x B} && C
	\arrow["{q\x \rid_B}", from=1-1, to=1-2]
	\arrow["{\lambda(f\o(q\x \rid_B)) \x \rid_B}"', from=1-1, to=2-1]
	\arrow["{\lambda f\x \rid_B}", from=1-2, to=1-3]
	\arrow["f"{description}, from=1-2, to=2-3]
	\arrow["ev", from=1-3, to=2-3]
	\arrow["ev"', from=2-1, to=2-3]
\end{tikzcd}\]
and therefore
% https://q.uiver.app/#q=WzAsMyxbMSwwLCJBIl0sWzIsMSwiQyJdLFswLDEsIlEiXSxbMiwxLCJcXGxhbWJkYShmXFxvKHFcXHggXFxyaWRfQikpIiwyXSxbMiwwLCJxICJdLFswLDEsIlxcbGFtYmRhIGYiXV0=&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F27e801532261f2b430d0e7cd890483119d74deb2%2Fquiver-macros.tex
\[\begin{tikzcd}
	& A \\
	Q && C
	\arrow["{\lambda f}", from=1-2, to=2-3]
	\arrow["{q }", from=2-1, to=1-2]
	\arrow["{\lambda(f\o(q\x \rid_B))}"', from=2-1, to=2-3]
\end{tikzcd}\]
In a slice category this looks like
% https://q.uiver.app/#q=WzAsNixbMCwwLCIoUVxceCBCKV8wIl0sWzIsMCwiKEFcXHggQilfMCJdLFs0LDAsIigoQlxcaW1wIEMpIFxceCBCKV8wIl0sWzQsMywiQ18wIl0sWzAsMywiKChCXFxpbXAgQylcXHggQilfMCJdLFsxLDIsIkQiXSxbMCwxLCJxXFx4IFxccmlkX0IiXSxbMSwyLCJcXGxhbWJkYSBmXFx4IFxccmlkX0IiXSxbMiwzLCJldiJdLFswLDQsIlxcbGFtYmRhKGZcXG8ocVxceCBcXHJpZF9CKSkgXFx4IFxccmlkX0IiLDJdLFs0LDMsImV2IiwyXSxbMSwzLCJmIiwxLHsibGFiZWxfcG9zaXRpb24iOjIwfV0sWzAsNSwiUVxcdGltZXMgQiIsMV0sWzQsNSwiKEJcXGltcCBDKVxceCBCIiwxXSxbMyw1LCJDIiwxXSxbMSw1LCJBXFx4IEIiLDFdLFsyLDUsIihCXFxpbXAgQylcXHggQiIsMSx7ImxhYmVsX3Bvc2l0aW9uIjoyMCwiY3VydmUiOi0zfV1d&macro_url=https%3A%2F%2Fgist.githubusercontent.com%2Fjcreedcmu%2F2569f601862d86bd0523220cfd15f2c9%2Fraw%2F27e801532261f2b430d0e7cd890483119d74deb2%2Fquiver-macros.tex
\[\begin{tikzcd}
	{(Q\x B)_0} && {(A\x B)_0} && {((B\imp C) \x B)_0} \\
	\\
	& D \\
	{((B\imp C)\x B)_0} &&&& {C_0}
	\arrow["{q\x \rid_B}", from=1-1, to=1-3]
	\arrow["{Q\times B}"{description}, from=1-1, to=3-2]
	\arrow["{\lambda(f\o(q\x \rid_B)) \x \rid_B}"', from=1-1, to=4-1]
	\arrow["{\lambda f\x \rid_B}", from=1-3, to=1-5]
	\arrow["{A\x B}"{description}, from=1-3, to=3-2]
	\arrow["f"{description, pos=0.2}, from=1-3, to=4-5]
	\arrow["{(B\imp C)\x B}"{description, pos=0.2}, curve={height=-18pt}, from=1-5, to=3-2]
	\arrow["ev", from=1-5, to=4-5]
	\arrow["{(B\imp C)\x B}"{description}, from=4-1, to=3-2]
	\arrow["ev"', from=4-1, to=4-5]
	\arrow["C"{description}, from=4-5, to=3-2]
\end{tikzcd}\]
\end{document}
