\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{stmaryrd}
\usepackage{alltt}
\input{linear}
\def\merge{\star}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\bpush{\mathbf{push}}
\def\push{\circ}
\def\func#1{\overline{#1}}
\def\bpull{\mathbf{pull}}
\def\btriv{\mathbf{triv}}
\def\bas{\mathrel\mathbf{as}}
\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\o{\comp}
\def\ups#1{#1^G}
\def\dns#1{#1^B}
\def\rsn{\ \mathsf{sn}}
\def\rx{\mapsto}
\def\ep{\varepsilon}
\def\wat{{@}}
\def\sem#1{[\![#1]\!]}
\def\cn{{:}}
\def\rok{\mathrel\mathsf{ok}}
\def\rtype{\mathrm{type}}

\def\rset{\mathbf{Set}}
\def\rcat{\mathbf{Cat}}
\def\rid{\mathrm{id}}
\def\C{\mathbf{C}}
\def\E{\mathbf{E}}
\def\T{\mathbf{T}}
\def\B{\mathbf{B}}
\def\F{\mathbb{F}}
\def\H{\mathbf{H}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\tri{\triangleright}
\def\o{\circ}
\def\rctx{\,\mathrm{ctx}}
\def\cc{\mathrel{\mathring :}}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\usepackage{tikz}
\usepackage{tikz-cd}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}

\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\begin{document}

\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
% got this from
% https://tex.stackexchange.com/questions/169512/tikz-style-arrow-tips-missing-when-using-tikz-cd-crossing-over
% ???

\subsection*{Judgments}
$$\Gamma \prov M : A$$
$$\Gamma; \sharp n \prov M : A$$
\subsection*{$\sharp$-Substitution}
There is a syntactic substitution-esque operation $M[i]$ with admissible rule
\[
\erule
{\Gamma; {\sharp n} \prov  M : A \qquad i < n}
{\Gamma \prov  M[i] : A[i]}
\]
\subsection*{Typing}
\subsubsection*{Mix}
There's some `mix' rules like
\[
\erule
{\Gamma; {\sharp n_1} \prov  M_1 : A \qquad
\Gamma; {\sharp n_2} \prov M_2 : A}
{\Gamma; {\sharp (n_1 + n_2)} \prov M_1 \merge M_2 : A}
\qquad
\erule
{}
{\Gamma; {\sharp 0} \prov I : A}
\]
with substitution
\[
(M_1 \merge M_2)[i]  \equiv  \cases{ M_1[i] & $i < n_1$ \cr M_2[i-n_1] & otherwise.}
\]
\subsubsection*{Push}
Push (opreindexing, composition with map) works like
\[
\erule
{\Gamma; {\sharp m} \prov  M : A \qquad f : n \to m}
{\Gamma; {\sharp n} \prov M \push f : A}
\]
with substitution
\[
(M \push f)[i] \equiv M[f(i)]
\]
\subsubsection*{Pull}
Pull (reindexing, 2-pushout) works like
\[
\erule
{\Gamma; {\sharp n} \prov  N : A\qquad \Gamma \prov \bar M^m : \bar A^m \qquad f : n \to m
\qquad {A_{f(i)} \equiv A[i] \atop M_{f(i)} \equiv N[i]}}
{\Gamma; {\sharp m} \prov \bpull_f(\bar M, N) : A}
\]
with substitution
$$ {(\bpull_f(\bar M, N))[i] \equiv M_i} $$

\section{Examples}
Given $\Gamma; \sharp 2 \prov R : A$
and $\Gamma; \sharp 2 \prov S : A$, with $R[1] \equiv S[0]$, I can form
$$\Gamma; \sharp 4 \prov R \merge S : A$$
$$\Gamma; \sharp 3 \prov \bpull_{\func{0112}}(R[0], S[0], S[1], R \merge S) : A$$
$$\Gamma; \sharp 2 \prov (\bpull_{\func{0112}}(R[0], S[0], S[1], R \merge S)) \push \func{02} : A$$

\subsection*{Trivial Objects}
A special case of the $\bpull$ rule is
\[
\erule
{\Gamma; {\sharp 0} \prov  I : A\qquad \Gamma \prov \bar M^m : A }
{\Gamma; {\sharp m} \prov \bpull_{\func\cdot}(\bar M, I) : A}
\]
and so we define the abbreviation
$\btriv(\bar M) = \bpull_f(\bar M, I) : A$.

{\color{red} Oh no, what's the dependent version of this?}

{\color{gray} Oh, wait, maybe it's fine; I think it's
\[
\erule
{\Gamma; {\sharp 0} \prov  I : B\qquad \Gamma \prov \bar M^m : \bar A^m }
{\Gamma; {\sharp m} \prov \bpull_{\func\cdot}(\bar M, I) : \bpull_{\func\cdot}(\bar A, B)}
\]
The general version is actually maybe
\[
\erule
{\Gamma; {\sharp n} \prov  N : B\qquad \Gamma \prov \bar M^m : \bar A^m \qquad f : n \to m
\qquad {A_{f(i)} \equiv B[i] \atop M_{f(i)} \equiv N[i]}}
{\Gamma; {\sharp m} \prov \bpull_f(\bar M, N) : \bpull_f(\bar A , B)}
\]
\[
\erule
{\Gamma; {\sharp n} \prov  B : \rtype\qquad \Gamma \prov \bar A^m : \rtype \qquad f : n \to m
\qquad A_{f(i)} \equiv B[i]}
{\Gamma; {\sharp m} \prov  \bpull_f(\bar A , B) : \rtype}
\]
\[ \erule{}{\bpull_f(\langle B, \ldots, B\rangle, B) \equiv B }\]
}
\subsubsection*{Excercise 1}

Given $\Gamma; \sharp 1 \prov R : A$
and $\Gamma; \sharp 1 \prov S : A$, with $R[0] \equiv S[0] \equiv a : A$, I can form
$$\Gamma; \sharp 2 \prov R \merge S : A$$
$$\Gamma; \sharp 1 \prov \bpull_{\func{00}}(a, R \merge S) : A$$
Suppose $S = \btriv(a)$. How do we know that
$\bpull_{\func{00}}(a, R \merge \btriv(a)) \equiv R$?

\subsubsection*{Beck-Chevalley Condition}
Suppose we have a commutative square of functions on finite sets:
\[
\begin{tikzcd}
n \ar[r, "f"] \ar[d, "h" swap]& m \ar[d, "g"]\\
p \ar[r, "k" swap] & q
\end{tikzcd}
\]
And some $\Gamma \prov \bar Q : \bar A$ and $\bar M : \bar B$
 such that $B_{f(i)} \equiv A_{k(h(i))}$ and
$M_{f(i)} \equiv Q_{k(h(i))}$ for all $i < n$.

Start with $\Gamma; \sharp p \prov P : C$. Form
\[
\erule
{\Gamma; {\sharp p} \prov  P : C\qquad \Gamma \prov \bar Q^q : \bar A^q \qquad k : p \to q
\qquad {A_{k(i)} \equiv C[i] \atop Q_{k(i)} \equiv P[i]}}
{\Gamma; {\sharp q} \prov \bpull_k(\bar Q, P) : C}
\]
then form $\Gamma; \sharp m \prov (\bpull_k(\bar Q, P)) \push g : C \push g$.
In the other direction, form $\Gamma; \sharp n \prov P \push h : A$ then form
\[
\erule
{\Gamma; {\sharp n} \prov  P \push h : C \push h\qquad \Gamma \prov \bar M^m : \bar B^m \qquad f : n \to m
\qquad {B_{f(i)} \equiv C[h(i)] \atop M_{f(i)} \equiv P[h(i)]}}
{\Gamma; {\sharp m} \prov \bpull_f(\bar M, P \push h) : B}
\]

Well clearly I'm fucking up all the dependent types involved, but something like
$$\bpull_k(\bar Q, P) \push g \equiv \bpull_f(\bar M, P \push h)$$
 should hold under suitable
conditions on the $\bar M$ and $\bar Q$ matching up.

\vfil\eject
\section{Thinking}
In the general bifibration world, I have {\bf objects downstairs} with products,
and {\bf objects upstairs} with products, and
the operation of {\bf pushing} (i.e. opfibration reindexing) and I demand that
the product of opcartesian morphisms is opcartesian.

In the slightly more specific bifibration world, I'm going to take my
downstairs category to be specifically $(\FinSet / X)^\op$ for some
chosen base type $X$ which, in point of fact, {\em can} vary, but I'm
going to restrict attention to the special case where leave it fixed.
The bifibration I'm describing is the fact that {\em this particular
  set $X$} has an internal relation structure. The objects downstairs
are maps e.g. $f : A \to X, g : B \to X$ and a morphism $f \to g$ is a
map $h : B \to A$ that makes the triangle commute. The product of $f$
and $g$ is the copairing $(f, g) : A + B \to X$; projections are
coproduct injections.

When I have $R_1 \mapsto f_1$ and $R_2 \mapsto f_2$, I simply postulate the
existence of some product $R_1 \x R_2$ of $R_1$ and $R_2$ over $f_1\times f_2 = (f_1, f_2)$. This is
\begin{alltt}
  copair : \{A1 A2 X : Set\} \{f1 : A1 \(\to\) X\} \{f2 : A2 \(\to\) X\}
    (R1 : fib f1) (R2 : fib f2) \(\to\) fib (cpf f1 f2)
\end{alltt}
in agda. To be a product, it should be the case that for any other $g : B \to X$ and $S\mapsto g$,
we should have that
a pair of maps $S \to R_1, S \to R_2$ should correspond isomorphically to a map $S \to R_1 \x R_2$.
\[
\begin{tikzcd}
S \ar[rr] \ar[d] \ar[drr]&& R_2 \ar[from=d]\\
R_1 \ar[from=rr] && R_1 \x R_2 \\
B \ar[from=rr, "c_2" swap] \ar[from=d, "c_1"] \ar[ddr, "d" description, near start]
  && A_2 \ar[d] \ar[ddl]\\[2em]
A_1 \ar[rr, crossing over] \ar[dr]
  && A_1 + A_2 \ar[dl] \ar[ull, crossing over, "{(c_1, c_2)}" description]\\
& X
\end{tikzcd}
\]
In agda this is
{
\small
\begin{alltt}
  copair= : \{A1 A2 B X : Set\}  \{c1 : A1 \(\to\) B\} \{c2 : A2 \(\to\) B\} (d : B \(\to\) X)
    (R1 : fib (d \(\o\) c1)) (R2 : fib (d \(\o\) c2)) (S : fib d)
    \(\to\) (S \(\le\) pull c1 R1) \(\x\) (S \(\le\) pull c2 R2) \(\cong\)
      (S \(\le\) pull (cpf c1 c2) (transport fib (cpf-eq d) (copair R1 R2)))
\end{alltt}
}

Ok, now suppose I have $f_1 : R_1 \to S_1$ and $f_2 : R_2 \to S_2$ upstairs,
living over $c_1 : A_1 \to B_1$ and $c_2 : A_2 \to B_2$ respectively, which
actually means that I have inequalities $R_1 \le \bpull\ c_1\ S_1$ and
$R_2 \le \bpull\ c_2\ S_2$ in agda-land.
I should be able to form
$f_1 \times f_2 = \pair{f_1 \pi_1}{f_2 \pi_2} : R_1 \times R_2 \to S_1 \times S_2$.
Wait a minute, this seems like not what I'm after. This line of thinking will result
in an equality of morphisms upstairs, which is not the type of {\tt prod-pres-push} at all.

Let's instead start from this thought: the {\tt push} of the product of a pair of objects
should be the product of the {\tt push}es. In general a push looks like
\[
\begin{tikzcd}
R \ar[rr] && \mathtt{push}\ R\\
A \ar[from=rr, "g" swap] \ar[dr,"f" swap]&& B \ar[dl]\\
& X
\end{tikzcd}
\]
so we want to stare at the diagram
\[
\begin{tikzcd}
R_1 \x R_2 \ar[rr] && \mathtt{push}\ (g_1+g_2)\ (R_1 \x R_2)\\
A_1 + A_2 \ar[from=rr, "g_1 + g_2" swap] \ar[dr,"{(f_1, f_2)}" swap]&& B_1 + B_2 \ar[dl, "{(g_1 f_1, g_2 f_2)}"]\\
& X
\end{tikzcd}
\]
and arrive at
$$\mathtt{push}\ (g_1+g_2)\ (R_1 \x R_2) = \mathtt{push}\ g_1\ R_1 \x \mathtt{push}\ g_2\ R_2$$
and this is exactly what we say
{\small
\begin{alltt}
  prod-pres-push : \{A1 A2 B1 B2 X : Set\}
    (f1 : A1 \(\to\) X)  (f2 : A2 \(\to\) X)
    (g1 : B1 \(\to\) A1) (g2 : B2 \(\to\) A2)
    (R1 : fib f1)  (R2 : fib f2)
    \(\to\) push (cpf (inl \(\o\) g1) (inr \(\o\) g2)) (copair R1 R2) ==
      transport fib (cpf-eq (cpf f1 f2))
        (copair (push g1 R1) (push g2 R2))
\end{alltt}}
\noindent in agda.

What do I make of this in a world where `$R$ lives over $f : A \to X$' means
`$R$ is a map $\sharp A \to X$ such that $R \o \eta_A = f$'?
Oh, it just looks like
$$(R_1 \merge R_2)[g_1 + g_2] = R_1[g_1] \star R_2[g_2]$$
Nice! All the stray $\binl$ and $\binr$ dangling out there are just about
turning two functions $g_1: n_1 \to m_1, g_2 : n_2 \to m_2$ into a single function
$g_1+g_2 : (n_1+m_1) \to (n_2 + m_2)$.
\end{document}
