\documentclass{article}


\usepackage{amsmath}
\usepackage{amssymb}
\input{theorem}
\allowdisplaybreaks

\input{prooftree}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}

\usepackage{tikz}
\usepackage{tikz-cd}
\definecolor{green}{HTML}{007f00}
\definecolor{cyan}{HTML}{007f7f}
\definecolor{purple}{HTML}{af00af}
\def\rr#1{{\color{red}\mathbf {#1}}}
\def\bb#1{{\color{blue}\mathbf{#1}}}
\def\Z{\mathcal A}
\def\adjust{\big|}
\def\O{\mathcal{O}}
\def\rid{\mathsf{id}}
\def\int{\square}
\def\bd{\partial}
\def\prov{\vdash}
\def\prequiv{\dashv\vdash}
\def\imp{\Rightarrow}
\def\cqed{\hskip2mm{\vrule width .5em height .5em depth 0em}} % at the end of a |P.
\def\o{\circ}
\def\N{\mathbb{N}}
\def\R{\mathbb{R}}
\def\x{\times}
\def\st{\mathrel|}
\def\rset{\mathbf{Set}}
\def\op{\mathsf{op}}
\def\P{\mathbf{P}}
\def\dash{\hbox{---}}
\def\deg{\mathop{\mathsf{deg}}}
\def\celse{\mathrel{|}}
\def\cn{{:}}
\def\rok{\mathrel\mathsf{ok}}
\def\sub{\subseteq}
\newenvironment{nstabbing}
  {\setlength{\topsep}{-\parskip}%
   \setlength{\partopsep}{0pt}%
   \vskip-2em\hphantom{.}%
   \tabbing}
  {\endtabbing}



\title{Baker-Campbell-Hausdorff in a Semiring}
\begin{document}
\maketitle
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\section{Introduction}

The goal of this note is to state and prove a version of the Baker-Campbell-Hausdorff formula
in an arbitrary (not necessarily commutative) semiring, that is a set $R$ with $(+,0,\cdot,1)$,
where $+$ is required to be commutative but $\cdot$ is not, with $\cdot$ distributing over $+$,
and all the other usual laws.

What BCH traditionally says that if we seek $G_1, G_2, \ldots$ such that
\[ e^{tA} e^{tB} = e^{tG_1 + t^2G_2 + t^3G_3 + \cdots} \eqno(*)\]
holds, we find that we must set $G_1 = A + B$, and $G_2 = [A,B]/2$, and $G_3 = [A,[A,B]]/12 + [B,[B,A]]/12$,
and so on. The main fact is that all of the $G_2, G_3, \ldots$ can be represented solely
as iterated commutators of the $A$ and $B$.

Of course, the barriers to interpreting this theorem in a semiring include
\begin{enumerate}
\item the divisions in the  the exponential function's coefficients,
\item the divisions in the coefficients of the commutators occurring the right-hand side, and
\item the subtractions occurring because of the commutators themselves.
\end{enumerate}
The first of these issues can be by addressed by computing the
coefficients of both sides of $(*)$ as exponential generating
functions in $t$. The other issues can be solved by replacing divisions and subtractions
with {\em constraints} on $G_2, G_3, \ldots$ which can be stated in an
arbitrary semiring --- e.g. instead of $G_2 = [A,B]/2$, we take as an assumption
that $2G_2 + BA = AB$.

The theorem then takes the form: suppose that we have a collection of
semiring elements $G_n$ that satisfy certain conditions with respect
to $A$ and $B$, then a certain family of equations is guaranteed to
hold in the semiring.

An interesting consequence (other than this being simply another route
towards a proof of BCH itself) is that, in univalent homotopy type
theory, relations and relation composition do in fact form a
noncommutative semiring. This means that we obtain a family of ``BCH
isomorphisms'' between relations.

\subsection{Exponentials}
Here we calculate the exponential generating function coefficients of both sides of $(*)$,
by differentiating  $n$ times by $t$, and setting $t = 0$. First, a few definitions that
will prove convenient.
\subsubsection{Definitions}
Fix a (not necessarily commutative) semiring $R$, and $A, B \in R$.
When $X \in R$, define $\Z[X] = AX + XB$.

A {\em composition} with weight $n$ and $k$ parts is a sequence
$\lambda = \lambda(1),\ldots,\lambda(k)$ of positive integers, with $\sum_i \lambda(i) = n$.
Write the set of composition with weight $n$ and $k$ parts as $C^k_n$.
We say
 \[ C_n = \bigcup_{k\ge 0} C_n^k \qquad  C = \bigcup_{n\ge 0} C_n \qquad   C^+ = \bigcup_{n\ge 1} C_n \]
and  write $|\lambda|$ for the number of parts of a composition $\lambda$.
There is exactly one composition $\emptyset$ in $C_0$, and $|\emptyset| = 0$.

If $\lambda$ is a composition, then define
\[G_\lambda = \prod_{i = 1}^{|\lambda|} G_{\lambda(i)}\]
noting that $G_\emptyset = 1$. For example, $G_{2311} = G_2G_3G_1^2$.

%% Let $D^k_n$ be the set of `extended' compositions of weight $n$ and size $k$.
%% \[D^k_n = C^k_n \cup \{(0,\lambda) \st \lambda \in C^{k-1}_{n-1}\}\]

%% \[D^{\ge k}_n = \bigcup_{k' \ge k} D_n^{k'}  \qquad D^{\ge k} = \bigcup_{n} D_n^{\ge k} \]


\subsubsection{Left Side}
On the left, we see
\[ e^{tA} e^{tB}
=  \sum_{m=0}^{\infty} \sum_{p = 0}^\infty {t^mA^m\over m!}{t^pB^p\over p!}\]
\[=  \sum_{m=0}^{\infty} \sum_{p = 0}^\infty t^{m+p}{A^mB^p\over m!p!}\]
\[=  \sum_{m=0}^{\infty} t^{m} \sum_{p = 0}^m {A^pB^{m-p}\over p!(m-p)!}\]
so
\[\left(\partial \over \partial t\right)^n e^{tA} e^{tB}\Bigg|_{t=0}
=  \left(\sum_{m=n}^{\infty} t^{m-n}{m!\over (m-n)!}\sum_{p = 0}^m {A^pB^{m-p}\over p!(m-p)!}\right)\Bigg|_{t=0}\]
\[= \sum_{p = 0}^n {n\choose p} A^pB^{n-p} \]
\[= \Z^n[1] \]

\subsubsection{Right Side}


\[ \exp\left(\sum_{m = 1}^\infty t^mG_m \right) = \sum_{k=0}^\infty {1\over k!}\left(\sum_{m = 1}^\infty t^mG_m \right)^k\]
\[= \sum_{m=0}^\infty \sum_{\lambda \in C_m}{t^m\over |\lambda|!}G_\lambda\]
so
\[\left(\partial \over \partial t\right)^n \exp\left(\sum_{m = 1}^\infty t^mG_m \right)\Bigg|_{t=0} =
\left( \sum_{m=n}^\infty \sum_{\lambda \in C_m}{t^{m-n}m!\over (m-n)!|\lambda|!}G_\lambda\right)\Bigg|_{t=0}
\]
\[=  \sum_{\lambda \in C_n}{n!\over |\lambda|!}G_\lambda\]

\subsubsection{Together}
%Define \[X_n =  \sum_{\lambda \in C_n}{n!\over |\lambda|!}G_\lambda\]
Our task is to find a characterization of $(G_i)_{n  \ge 1}$ as nested commutators of $A$ and $B$ such that, for every $n \ge 1$,
\[\Z^n[1] =  \sum_{\lambda \in C_n}{n!\over |\lambda|!}G_\lambda \eqno(**)\]
Note that this equation makes sense in a semiring despite the apparent division, since always $n \ge |\lambda|$
and therefore  ${n!/|\lambda|!}$ is  an integer.

The full answer is given in Section~\ref{section.theorem}, but
first, to provide some guide-rails through technicalities that follow, we
walk through a few small examples to see how the statement of
Theorem~\ref{big} arises, and how its proof works.

\section{A Taste of the Theorem}
\subsection{Sorting with Swaps}
First of all, observe that if $n=1$, the equation $(**)$ becomes
\[A + B = \Z[1] = \sum_{\lambda \in {C_1}} {1!\over |\lambda|!} G_{\lambda} = G_1\]
So the value of $G_1$ is determined for us immediately.

Let's next set $n=2$ and see what we have to show. Equation $(**)$ becomes
\[AA + 2AB + BB = \Z^2[1] = \sum_{\lambda \in {C_2}} {2!\over |\lambda|!} G_{\lambda} = (A + B)^2 + 2G_2\]
The salient difference between the two sides of this equation (which will be the case for higher $n$ as well)
is that on the left, the occurrences of $A$ and $B$ are {\em sorted}, with the $A$s coming first, while on the right,
they occur unsorted: $(A + B)^2 = AA + AB + BA + BB$.
The $AA$ and $BB$ and one copy of $AB$ occur on both sides, but on
the left we have a copy of $AB$ which corresponds to a $BA$ on the right,
and we additionally have $2G_2$ on the right.

If we were working in a field, we would set $G_2 = [A,B]/2$ and be done; but since we're working in a semiring,
we instead want to take as an assumption that $2G_2 + BA = AB$. An $n=2$ special case of the theorem we eventually show
is that
\begin{theorem}
Let $R$ be a (not necessarily commutative) semiring.
 Suppose we're given $A, B,G_1,G_2 \in R$  such that
 \begin{enumerate}
\item $G_1 = A + B$
\item $2G_2 + BA = AB$.
 \end{enumerate}
Then
\[\Z^n[1] = \sum_{\lambda \in {C_n}} {n!\over |\lambda|!} G_{\lambda}\]
for $n=1,2$.
\end{theorem}

No huge labor so far. Let's look at $n=3$. Here we must show
\[\Z^3[1] = \sum_{\lambda \in {C_3}} {3!\over |\lambda|!} G_{\lambda}\]
or in other words
\[AAA + 3AAB + 3ABB + BBB = (A+B)^3 + 3G_1 G_2 + 3G_2 G_1 + 6G_3\]
Here the situation is a little less simple --- but let us state what tools seem to be available to us so far.
We keep the constraints that $G_1 = A + B$ and  $2G_2 + BA = AB$.
This tells us that any $2G_2$ we have is like a token that can be spent
to `swap' an unsorted copy of $BA$ into a sorted $AB$, towards the goal of
turning the unsorted
\[(A + B)^3 = AAA + AAB + ABA + ABB + BAA + BAB + BBA + BBB\]
into
\[AAA + 3AAB + 3ABB + BBB\]
There are a variety of embedded $BA$s that we need to swap. For example, we'd like to turn $ABA$ into $AAB$,
and so for that we'd need $2AG_2$; because, multiplying both sides of the $G_2$-constraint on the left by $A$,
we find that
\[2AG_2 + ABA = AAB\]
What else do we need to swap? We'd want to turn $BAA$ into $ABA$ (spending $2G_2A$) and then turn $ABA$ into
$AAB$ (spending another $2AG_2$). We'd want to turn $BAB$ into $ABB$ (spending $2G_2B$). And finally
we'd want to turn $BBA$ into $BAB$, and then subsequently into $ABB$, spending a total of $2G_2B + 2BG_2$.

Our total budget for all of these swaps is $2G_2A + 4AG_2 + 4G_2B + 2BG_2$. However, what we {\em have} on the
right-hand side of our goal for $n=3$ is
\[3G_1 G_2 + 3G_2 G_1 + 6G_3 = 3(A+B) G_2 + 3G_2(A+B) + 6G_3\]
\[ = 3G_2A + 3AG_2 + 3G_2B + 3BG_2 + 6G_3\]
Therefore we suppose the required role of $6G_3$ is that it is a `higher-order swap': it needs
to be a token that can be used to reconcile the difference
between $3(A+B) G_2$ and $2G_2A + 4AG_2 + 4G_2B + 2BG_2$, by swapping $G_2$ with $A$ or $B$.
Specifically, we could ask of $G_3$ that it satisfies
\[ 6G_3 + G_2A + BG_2 = AG_2 + G_2B \]
That is to say, it does hold that
\begin{theorem}
Let $R$ be a (not necessarily commutative) semiring.
 Suppose we're given $A, B,G_1,G_2,G_3 \in R$  such that
 \begin{enumerate}
\item $G_1 = A + B$
\item $2G_2 + BA = AB$.
\item $6G_3 + G_2A + BG_2 = AG_2 + G_2B$.
 \end{enumerate}
Then
\[\Z^n[1] = \sum_{\lambda \in {C_n}} {n!\over |\lambda|!} G_{\lambda}\]
for $n=1,2,3$.
\end{theorem}

Therefore, in some sense, we aim to find a systematic way of stating
constraints on the $G_n$ that permit them to swap smaller $G_n$, so
that we have just enough of them to swap yet smaller $G_n$, and so on,
until at the very end we have just the right tools to sort $(A+B)^n$
into $\Z^n[1]$.

\subsection{The Inductive Proof}

Two things are worth noting about the actual proof below. The first is that
it proceeds by induction on $n$: We define
\[X_n =  \sum_{\lambda \in C_n}{n!\over |\lambda|!}G_\lambda\]
and show that $\Z[X_n] = X_{n+1}$, from which it easily follows that $\Z^n[1] = X_n$.

The second fact is that instead of starting from the unsorted $(A +
B)^n$ and incrementally taking steps toward $\Z^n[1]$, spending tokens
along the way, we actually do the reasoning in reverse: we start with
$\Z[X_n]$, and progressively rearrange semiring elements in the
`unsorted' direction, which conversely {\em produces} the tokens that
would have been necessary to sort them. This makes some of the
bookkeeping conceptually easier, since we can more or less follow the
same paradigm of rearrangements of steps for each $n$, and find out
what our token budget must be simply by counting up the tokens that
are produced in the course of `unsorting'.

Let's look at how the $n=2$ case of this version of the theorem works.
We want to show that
\[\Z\left[ \sum_{\lambda \in C_2}{2!\over |\lambda|!}G_\lambda\right] =  \sum_{\lambda \in C_3}{3!\over |\lambda|!}G_\lambda\]
or in other words we're trying to show
\[\Z\left[ G_{11} + 2G_2 \right] = \]
\[ AG_{11} + G_{11}B + 2AG_2 + 2G_2B =  G_{111} + 3G_{21} + 3G_{12} + 6G_{3}\]

There will now be several phases to solving this particular case where $n=3$.
We given them the following abbreviations and descriptive names as follows:
\begin{enumerate}
\item[Am.] Moving $A$ to the right
\item[0m.] Moving $[0 \dash]$ to the right
\item[1s.] Synthesizing $G_1$
\item[1r.] Rebalancing synthesized $G_1$s
\item[1m.] Moving $[\dash 1]$ to the right
\item[2s.] Synthesizing $G_2$
\item[2r.] Rebalancing synthesized $G_2$s
\item[3s.] Synthesizing $G_3$
\end{enumerate}
For larger $n$ we use the same general plan; the middle of the proof ends up being a repetition of
synthesis/rebalancing/movement sections for each $i \in 1,\ldots, n-1$:
\begin{enumerate}
\item[$\cdots$]
\item[$i$s.] Synthesizing $G_i$
\item[$i$r.] Rebalancing synthesized $G_i$s
\item[$i$m.] Moving $[\dash i]$ to the right
\item[$(i+1)$s.] Synthesizing $G_{i+1}$
\item[$(i+1)$r.] Rebalancing synthesized $G_{i+1}$s
\item[$(i+1)$m.] Moving $[\dash (i+1)]$ to the right
\item[$\cdots$]
\end{enumerate}

Here is how these phases play out for $n=3$:
\subsubsection{Move $A$ to the right}
We start with
\[\Z[X_2] =  AG_{11} + G_{11}B + 2AG_2 + 2G_2B\]
We want to do some swaps to move the $A$ in $AG_{11}$ and $2AG_2$ all the way to the right
so that it can `join up' with the $B$ and produce $A+B =G_1$. To do this, we need
to postulate the existence of some commutator-like semiring elements that would let us perform these swaps.

If we suppose that
\begin{enumerate}
\item there exists $G_{[01]} \in R$ with the property that $G_{[01]} + G_1A = AG_1$
\item there exists $G_{[02]} \in R$ with the property that $G_{[02]} + G_2A = AG_2$
\end{enumerate}
then
\[AG_{11} = G_{[01]}G_1 + G_{1}AG_1 = G_{[01]}G_1 + G_1G_{[01]} + G_{11}A\]
\[2AG_{2} = 2G_{[02]} + 2G_2A\]
and then we note that (highlighting parts of expressions in {\color{blue} blue}
to show what has recently changed)

\[ \Z[X_2] = G_{11}({\color{blue} A} + B) + 2G_2({\color{blue} A} + B) + {\color{blue}G_{[01]}G_1 + G_1G_{[01]} + 2G_{[02]}}\]
We've moved all the $A$s to the right, creating the swap tokens
$G_{[01]}G_1 + G_1G_{[01]} + 2G_{[02]}$.
\subsubsection{Move $[0\dash]$ to the right}
Suppose there exists $G_{[011]} \in R$ such that $G_{[011]} + G_1G_{[01]} = G_{[01]}G_1$.
Then we have
\[ \Z[X_2] = G_{11}(A+B) + 2G_{2}(A+B) + {\color{blue} G_{[011]} + 2G_1G_{[01]}} + 2G_{[02]}\]
\subsubsection{Synthesize $G_1$}
From before, we know that $G_1 = A+ B$, so we've shown that
\[ \Z[X_2] = {\color{blue} G_{111} + 2G_{21}} + G_{[011]} + 2G_1G_{[01]} + 2G_{[02]}\]
This is pretty good progress. We already have the $G_{111}$ that's required in the final
$X_3$.
\subsubsection{Rebalancing synthesized $G_1$s}
We have a lopsided amount of $G_{21}$s versus $G_{12}$s, however. To make the general case of the proof work out more uniformly,
we `rebalance' terms after every synthesis. In this case, it means supposing that there exists a $G_{[21]} \in R$ such
that $G_{[21]} + G_{12} = G_{21}$, and observing that that
\[ \Z[X_2] = G_{111} + {\color{blue} G_{21} + G_{12} + G_{[21]}} + G_{[011]} + 2G_1G_{[01]} + 2G_{[02]}\]

\subsubsection{Synthesize $G_2$}
Suppose that $2G_2 = G_{[01]}$. This is fairly close to our earlier assumption that $2G_2 + BA = AB$ ---
because of our assumption on $G_{[01]}$, we're effectively assuming that $2G_2 + G_1A = AG_1$, which
is the same as $2G_2 + AA + BA = AA + AB$. So $2G_2$ still allows a swap of $BA \to AB$, it just requires
the presence of a copy of $AA$ as well. It turns out this extra requirement is not a problem, and imposing it
makes the structure of the proof simpler.

In any case, with the assumption that $2G_2 = G_{[01]}$, we have
\[ \Z[X_2] = G_{111} + G_{21} + G_{12} + G_{[21]} + G_{[011]} + {\color{blue}4G_{12}} + 2G_{[02]}\]

\subsubsection{Rebalancing synthesized $G_2$s}
Now we want to do a similar rebalancing to the $G_2$s we just synthesized. Suppose
$G_{[12]} \in R$ such that $G_{[12]} + G_{21} = G_{12}$, and find
\[ \Z[X_2] = G_{111} + {\color{blue}3G_{21} + 3G_{12}} + G_{[21]} + {\color{blue} 2G_{[12]}} + G_{[011]}  + 2G_{[02]}\]
Now we have exactly the correct number of $G_{21}$ and $G_{12}$ that we need in $X_3$.
\subsubsection{Synthesize $G_3$}
Finally, we assume that
\[ 6G_3 = G_{[21]} +  2G_{[12]} + G_{[011]}  + 2G_{[02]}\]
so that we have
\[ \Z[X_2] = G_{111} + 3G_{21} + 3G_{12} +{\color{blue} 6G_{3}} = X_3\]
as required.

This means we've effectively proven
\begin{theorem}
Let $R$ be a (not necessarily commutative) semiring.
 Suppose we're given $A, B,G_1,G_2,G_3, G_{[01]}, G_{[21]}, G_{[12]}, G_{[011]}, G_{[02]} \in R$  such that
\begin{enumerate}
\item
 \begin{enumerate}
\item $G_{[01]} + G_{1}A = AG_{1}$.
\item $G_{[21]} + G_{12} = G_{21}$.
\item $G_{[12]} + G_{21} = G_{12}$.
\item $G_{[011]} + G_{1}G_{01} = G_{[01]}G_{1}$.
\item $G_{[02]} + G_{2}A = AG_{2}$.
 \end{enumerate}
\item
 \begin{enumerate}
\item $G_1 = A + B$
\item $2G_2 = G_{[01]}$.
\item $6G_3 = G_{[21]} +  2G_{[12]} + G_{[011]}  + 2G_{[02]}$.
 \end{enumerate}
\end{enumerate}
Then
\[\Z^n[1] = \sum_{\lambda \in {C_n}} {n!\over |\lambda|!} G_{\lambda}\]
for $n=1,2,3$.
\end{theorem}

Note that this appears more complicated than the previous theorem,
even though we're still only reaching up to the $n=3$ case --- but
this longer list of assumptions more accurately reflects the structure
of the theorem below, which uniformly works for all $n$.

Note that the assumptions come in two types, the first class being the {\em commutator conditions}
such as $G_{[011]} + G_{1}G_{01} = G_{[01]}G_{1} $ which asserts that $G_{[011]}$ behaves as if it
is the commutator $[G_{[01]}, G_1]$, and the second class being {\em synthesis recipes}, which tell
us how $n!G_n$ is equivalent to a sum of commutators.

\section{Theorem}
Finally is the general theorem we aim to show.
\label{section.theorem}
\begin{theorem}
Let $R$ be a (not necessarily commutative) semiring.
Suppose we're given $A, B \in R$,
two functions $(\lambda \mapsto G_{[\lambda]})$ and $(\lambda \mapsto G_{[0\lambda]})$
both of which are of type $C^+ \to R$.
For every $m\ge 1$, define $G_m = G_{[m]}$.
Define
\[X_n = \sum_{\lambda \in C_n}{n!\over |\lambda|!}G_\lambda\]
Assume that
\begin{enumerate}
\item (Commutator Conditions) For every $\lambda \in C^+$ and $m \ge 1$,
\[ G_{[\lambda m]} + G_{m} G_{[\lambda]}  =  G_{[\lambda]} G_{m} \eqno(\dagger_{\lambda m})\]
\[ G_{[0 \lambda m]} + G_{m} G_{[0 \lambda]}  =  G_{[0 \lambda]} G_{m} \eqno(\dagger_{0\lambda m})\]
\[ G_{[0  m]} + G_{m} A  =  A G_{m} \eqno(\dagger_{0 m})\]
%% {\color{gray} If we weren't in a semiring, this would be equivalent to
%% \[ G_{[\lambda]} = [[\cdots [G_{\lambda(1)}, G_{\lambda(2)}], \cdots], G_{\lambda(k)}]\]}
\item (Synthesis Recipes) %\vskip-2em
  $G_1 = A + B$, and for $n\ge 2$, \[n!G_{n} = \sum_{k = 1}^{n-1}{(n-1)!\over k! }\left(\left(\sum_{\lambda\in C^k_{n-1}} G_{[0\lambda]}\right) +
  \left(\sum_{\lambda\in C^k_n} \lambda(2)G_{[\lambda]}\right)\right)\]
This is meaningful in a semiring because $(n-1)!/k!$ is an integer.
We assume for the sake of the above expression that $\lambda(2) = 0$ when $k=1$.
\end{enumerate}

Then for all $n \ge 1$,
\[ \Z^n[1] = X_n\]
%% {\color{gray} If we weren't in a semiring, this would be equivalent to
%% \[\exp(at)\exp(bt) = \exp\left(\sum_{k \ge 1} G_kt^k \right)\]}
\label{big}
\end{theorem}
\begin{proof}
We carry out the proof `top-down', showing how various lemmas are
used, and then proving them afterwards.

Let $R, A, B, (\lambda \mapsto G_{[\lambda]}), (\lambda \mapsto G_{[0\lambda]})$ be given,
satisfying the assumptions of the theorem as stated.

We proceed by induction on $n$. The base case is trivial: $X_1 = G_1 = \Z[1]$.
For the induction step, we rely on Lemma~\ref{induction.step} to see that
$\Z[X_{n}] = X_{n+1}$, for then $\Z^{n+1}[1] = \Z[\Z^n[1]] = \Z[X_{n}] = X_{n+1}$. \cqed
\end{proof}


\section{Proof}
In this section our goal is to prove Lemma~\ref{induction.step}, which
is where most of the interesting work of Theorem~\ref{big} is.
For the remainder of the proof, we may assume that a particular $n \ge 1$ has been fixed.

\subsection{Definitions}
In order to carry out the synthesis/rebalancing/movement plan sketched above, we want
to have some convenient names for semiring expressions that describe the our state before
and after taking such steps.


For $\lambda \in C$, define
\[\Delta_{\lambda} = \sum_{\lambda_1,\lambda_2\in C, m\in \N\atop \lambda_1 m \lambda_2 = \lambda} G_{\lambda_1}G_{[0m]}G_{\lambda_2} \]
These are all of the swap tokens that exist immediately after we do the {\em Move $A$ to the right} step.

%%% zeroSwaps(n, m)
The sum of all `right-aligned {\bf Z}ero-swaps' (which exist after the {\em Move $[0\dash]$ to the right} step) is given by
\[ Z_m = \sum_{\substack{\lambda_1 \in C_{n-m+1} \\ \lambda_2 \in C_{m-1}}} {n! \over |\lambda_1|!|\lambda_2|! }G_{\lambda_1} G_{[0\lambda_2]} \]

%% Alternatively, I think this is equivalent:
%% \[ B_m = \sum_{\lambda \in C_{n+1-m}} \sum_{\substack{\lambda_1, \lambda_2 \in C \\ \lambda_1\lambda_2 = \lambda \\ |\lambda|  \ne n}}
%% m {n! \over (|\lambda| + 1)!} G_{\lambda_1}G_m G_{\lambda_2}
%%  \]


The `{\bf S}ynthesis products' created during synthesis steps are
\[ S_m = \sum_{\substack{\lambda \in C_{n+1-m} \\ |\lambda|  \ne n}}m{n!\over k!} G_{\lambda m}\]

%%% swapss(n, m)
There is a collection of s{\bf W}aps created during each {\em Move $[\dash i]$ to the right} step, which is given by
\[ W_m = \sum_{\substack{b= 1\\(b \ne m)}}^{n+1-m} \sum_{n_1 = 0}^{n+1-m-b}
\sum_{\substack{\lambda_1 \in C_{n_1} \\ \lambda_2 \in C_{n+1-m-b-n_1} }} m (|\lambda_1| + 1) {n!\over (|\lambda_1| + |\lambda_2| + 2|)!} G_{\lambda_1} G_{[bm]} G_{\lambda_2}\]
%% or alternatively
%% \[ W_m = \sum_{\substack{b= 1\\(b \ne m)}}^{n+1-m} \sum_{\lambda \in C_{n+1-m-b}}
%% \sum_{\substack{\lambda_1, \lambda_2 \in C \\ \lambda_1\lambda_2 = \lambda }}  m (|\lambda_1| + 1) {n!\over (|\lambda| + 2|)!} G_{\lambda_1} G_{[bm]} G_{\lambda_2}\]


%%% balanceds(n, m)
The sum of all `{\bf B}alanced synthesis products' (which exist after rebalancing steps) are
\[ B_m = \sum_{n_1 = 0}^{n+1-m}\sum_{\substack{\lambda_1 \in C_{n_1} \\ \lambda_2 \in C_{n+1-m-n_1} \\ |\lambda_1| + |\lambda_2| \ne n}}
m {n! \over (|\lambda_1| + |\lambda_2| + 1)!} G_{\lambda_1}G_m G_{\lambda_2}
 \]
and the `{\bf R}ight-aligned swaps', also created during rebalancing, are
%%% rightSwaps(n, m, s)
\[ R_m^s = \sum_{\substack{b= 1\\(b \ne s)}}^{m-s} \sum_{n_1 = 0}^{n+1-s-b}
\sum_{\substack{\lambda_1 \in C_{n+1-m} \\ \lambda_2 \in C_{m-b-s} }} s  {n!\over |\lambda_1|!  |\lambda_2 +2| !} G_{\lambda_1} G_{[bs \lambda_2]} \]

Finally, we can define a semiring expression which captures the state we want to be in just before $s$-synthesis,
for $s \ge 2$. We define
\[H_s = G_1^{n+1} + \left(\sum_{i = 1}^{s-1} B_i\right) +  \left(\sum_{m = s}^{n+1}\sum_{i = 1}^{s-1} R_m^i\right) + \left(\sum_{m=s}^{n+1} Z_{m}\right)\]

\subsection{Induction Step}

\begin{lemma}
For all $n \ge 1$, we have $\Z[X_n] = X_{n+1}$.
\label{induction.step}
\end{lemma}

\begin{proof}
We observe
\[ \Z[X_n] = \Z\left[  \sum_{k = 1}^n\sum_{\lambda \in C^k_n}{n!\over k!}G_\lambda\right]  \]
\[=\sum_{k = 1}^n\sum_{\lambda \in C^k_n}{n!\over k!} \Z[G_\lambda]\]
Move $A$ to the right, by Lemma~\ref{zero.init}:
\[=\sum_{k = 1}^n\sum_{\lambda \in C^k_n}{n!\over k!} (G_{\lambda 1} + \Delta_{\lambda})\]
Move $[0\dash]$ to the right, by Lemma~\ref{zero.motion}:
\[=\left(\sum_{k = 1}^n\sum_{\lambda \in C^k_n}{n!\over k!} G_{\lambda 1}\right) + \left(\sum_{m=2}^{n+1} Z_m\right)\]
Synthesize $G_1$:
\[=G_{1}^{n+1} + S_1 + \left(\sum_{m=2}^{n+1} Z_m\right)\]
Rebalance $G_1$, by Lemma~\ref{rebalance}:
\[=G_{1}^{n+1} + B_1 + W_1 + \left(\sum_{m=2}^{n+1} Z_m\right)\]
Move $[\dash 1]$ to the right, by Lemma~\ref{motion}:
\[=G_{1}^{n+1} + B_1 + \left(\sum_{m = 2}^{n+1} R_m^1\right) + \left(\sum_{m=2}^{n+1} Z_m\right)\]
Now this is a standard state, just before $G_2$-synthesis:
\[=H_2 \]
Turn the crank by repeatedly using Lemma~\ref{h.step} until we're ready for $G_{n+1}$-synthesis:
\[= \cdots = H_{n+1} \]
Unpacking the definition of $H_{n+1}$ we get:
\[= G_1^{n+1} + \left(\sum_{i = 1}^{n} B_i\right) +  \left(\sum_{i = 1}^{n} R_{n+1}^i\right) + Z_{n+1}\]
Synthesize $G_{n+1}$, by Lemma~\ref{synth}:
\[= G_1^{n+1} + \left(\sum_{i = 1}^{n} B_i\right) + S_{n+1} \]
Finally, by Lemma~\ref{finalize}, we see that we've shown
$\Z[X_n] = X_{n+1}$, as required. \cqed
\end{proof}

\begin{lemma}
$H_s = H_{s+1}$ for any $2 \le s \le n$.
\label{h.step}
\end{lemma}

\begin{proof}
Unpacking the definition of $H_s$, we have
\[H_s = G_1^{n+1} + \left(\sum_{i = 1}^{s-1} B_i\right) +  \left(\sum_{m = s}^{n+1}\sum_{i = 1}^{s-1} R_m^i\right) + \left(\sum_{m=s}^{n+1} Z_{m}\right)\]
Synthesize $G_s$, by Lemma~\ref{synth}:
\[= G_1^{n+1} + \left(\sum_{i = 1}^{s-1} B_i\right) + S_s + \left(\sum_{m = s+1}^{n+1}\sum_{i = 1}^{s-1} R_m^i\right) + \left(\sum_{m=s+1}^{n+1} Z_{m}\right)\]
Rebalance $G_s$, by Lemma~\ref{rebalance}:
\[= G_1^{n+1} + \left(\sum_{i = 1}^s B_i\right) + W_s + \left(\sum_{m = s+1}^{n+1}\sum_{i = 1}^{s-1} R_m^i\right) + \left(\sum_{m=s+1}^{n+1} Z_{m}\right)\]
Move $[s\dash]$ to the right, by Lemma~\ref{motion}:
\[= G_1^{n+1} + \left(\sum_{i = 1}^s B_i\right) +  \left(\sum_{m = s+1}^{n+1}\sum_{i = 1}^{s} R_m^i\right) + \left(\sum_{m=s+1}^{n+1} Z_{m}\right)\]
Finally observe that this is the definition of $H_{s+1}$, as required.\cqed
\end{proof}



%% \begin{corollary}
%% Let $A$ be an algebra over a vector space $V$. Suppose we're given $a,b \in A$.
%% Define
%% \begin{enumerate}
%% \item $G_0 =a$
%% \item $G_1 =a+b$
%% \item For $n\ge 2$,
%% \[G_{n} = {1\over n!}\sum_{k = 1}^{n-1}{(n-1)!\over k! }\left(\left(\sum_{\lambda\in C^k_{n-1}} G_{[0\lambda]}\right) +
%%   \left(\sum_{\lambda\in C^k_n} \lambda(2)G_{[\lambda]}\right)\right)\]
%% \item $G_{[\lambda]} = [[\cdots [G_{\lambda(1)}, G_{\lambda(2)}], \cdots], G_{\lambda(k)}]$ for any $\lambda \in D$.
%% \end{enumerate}
%% Then
%% \[\exp(a)\exp(b) = \exp\left(\sum_{k \ge 1} G_k \right)\]
%% \end{corollary}

\section{More Lemmas}

\begin{lemma}
Suppose $\lambda \in C$. Then
\[AG_{\lambda} = G_{\lambda} A + \Delta_{\lambda}  \]
\end{lemma}
\begin{proof}
By induction on the length of $\lambda$. If $\lambda$ is empty, then the sum defining $\Delta_{\lambda}$ is
empty, and the equation trivially holds.

Otherwise, we are trying to show
\[AG_{\lambda}G_p = G_{\lambda}G_p A + \Delta_{\lambda p}  \]
for some $p \ge 1$. By i.h. it suffices to show
\[(G_{\lambda} A + \Delta_{\lambda})G_p = G_{\lambda}G_p A + \Delta_{\lambda p}  \]
or in other words
\[G_{\lambda} AG_p + \Delta_{\lambda}G_p = G_{\lambda}G_p A + \Delta_{\lambda p}  \]
By  $(\dagger_{0 p})$ we have that $AG_p = G_{[0p]} + G_pA $, so now we need merely
\[G_{\lambda} G_{[0p]} + \Delta_{\lambda}G_p = \Delta_{\lambda p}  \]
But this easily follows from the definition of $\Delta$. \cqed
\end{proof}


\begin{lemma}
Suppose $\lambda \in C_n^k$. Then
\[\Z[G_\lambda] = G_{\lambda 1} + \Delta_{\lambda}\]
\label{zero.init}
\end{lemma}

\begin{proof}
\[\Z[G_\lambda] = AG_\lambda + G_\lambda B\]
\[= G_\lambda A + \Delta_{\lambda}+ G_\lambda B \]
\[= G_\lambda(A +B) + \Delta_{\lambda}\]
\[= G_{\lambda 1} + \Delta_{\lambda}\]
\cqed
\end{proof}



\begin{lemma}[Zero-Movement]
\[\sum_{\lambda \in C_n} {n! \over |\lambda|!} \Delta_{\lambda} = \sum_{m=2}^{n+1} Z_m\]
\label{zero.motion}
\end{lemma}

\begin{proof}
Define
\[ \zeta_{m,k_2,k_3} = \sum_{\substack{\lambda_1, \lambda_2, \lambda_3 \in C \\\|\lambda_1\| +  \|\lambda_2\| + \|\lambda_3\| = n\\ |\lambda_2| =k_2 \\  |\lambda_3| = k_3 }} {n! \over (|\lambda_1|+|\lambda_2|+|\lambda_3|)! }
{\color{red}???}
% {|\lambda_1| + |\lambda_2| \choose |\lambda_1|, |\lambda_2| }
G_{\lambda_1} G_{[0\lambda_2]} G_{\lambda_3}\]
\[ Z_{m,j,\ell} = \sum_{k_2 = 1}^{j} \sum_{k_3 =0}^{n-\ell} \zeta_{m,k_2,k_3}\]

\[ Z_{m,1,1} =  \sum_{k_3 =0}^{n-1} \zeta_{m,1,k_3}\]
\[  =  \zeta_{m,1,n-1} + \left( \sum_{k_3 =0}^{n-2} \zeta_{m,1,k_3}\right)\]
\[  =  \zeta_{m,1,n-1} + Z_{m,1,2}\]
\[  = \left( \sum_{p\ge1} \sum_{\substack{\lambda_1, \lambda_2, \lambda_3 \in C \\\|\lambda_1\| +  p + \|\lambda_3\| = n\\   |\lambda_3| = n-1 }} {n! \over (|\lambda_1|+1+|\lambda_3|)! } G_{\lambda_1} G_{[0p]} G_{\lambda_3}\right) + Z_{m,1,2}\]

\[  = \left( \sum_{p\ge1}\sum_{q\ge 1} \sum_{\substack{\lambda_1, \lambda_2, \lambda_3 \in C \\\|\lambda_1\| +  p + q +  \|\lambda_3\| = n\\   |\lambda_3| = n-2 }} {n! \over (|\lambda_1|+2+|\lambda_3|)! } G_{\lambda_1} G_{[0p]} G_qG_{\lambda_3}\right) + Z_{m,1,2}\]

\[  = \left( \sum_{p\ge1}\sum_{q\ge 1} \sum_{\substack{\lambda_1, \lambda_2, \lambda_3 \in C \\\|\lambda_1\| +  p + q +  \|\lambda_3\| = n\\   |\lambda_3| = n-2 }} {n! \over (|\lambda_1|+2+|\lambda_3|)! } G_{\lambda_1} (G_{[0pq]} + G_qG_{[0p]})G_{\lambda_3}\right) + Z_{m,1,2}\]

\[ =   \sum_{p \ge 1} \sum_{\substack{\lambda_1,\lambda_2\in C \\ \|\lambda_1\| +  p + \|\lambda_2\| = n}} {n! \over (|\lambda_1| + 1 + |\lambda_2|)!} G_{\lambda_1}G_{[0p]}G_{\lambda_2}\]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\hrule




By definition of $\Delta$, we know
\[ \sum_{\lambda \in C_n} {n! \over |\lambda|!} \Delta_{\lambda}
 = \sum_{\lambda \in C_n} {n! \over |\lambda|!} \sum_{p \ge 1} \sum_{\lambda_1,\lambda_2\in C \atop \lambda_1 p \lambda_2 = \lambda} G_{\lambda_1}G_{[0p]}G_{\lambda_2}\]
\[ =   \sum_{p \ge 1} \sum_{\substack{\lambda_1,\lambda_2\in C \\ \|\lambda_1\| +  p + \|\lambda_2\| = n}} {n! \over (|\lambda_1| + 1 + |\lambda_2|)!} G_{\lambda_1}G_{[0p]}G_{\lambda_2}\]


%% \hrule


%% \[ = \sum_{m = 1}^{n} \sum_{n_1 = 0}^{n-m}\sum_{n_2 = 0}^{n-m-m_1} \sum_{\substack{\lambda_1 \in C_{n_1} \\ \lambda_2\in C_{n_2}  \\ \lambda_3 \in C_{n-m - n_1-n_2}}} {n! \over (|\lambda_1| + |\lambda_2| + |\lambda_3|)!}{(|\lambda_2| + |\lambda_3|)! \over |\lambda_2|!|\lambda_3|!}  G_{\lambda_1} G_{\lambda_2}G_{[0m\lambda_3]}\]
%% and using Lemma~\ref{merge.sums}:
%% \[ = \sum_{m = 1}^{n} \sum_{n_1 = 0}^{n-m}\sum_{n_2 = 0}^{n-m-m_1} \sum_{\substack{\lambda_1 \in C_{n_1} \\ \lambda_2\in C_{n_2}  \\ \lambda_3 \in C_{n-m - n_1-n_2}}} {n! \over (|\lambda_1| + |\lambda_2| + |\lambda_3|)!}{(|\lambda_2| + |\lambda_3|)! \over |\lambda_2|!|\lambda_3|!}  G_{\lambda_1} G_{\lambda_2}G_{[0m\lambda_3]}\]

%% so...

%% \[= \sum_{m=2}^{n+1} \sum_{\substack{\lambda_1 \in C_{n-m+1} \\ \lambda_2 \in C_{m-1}}} {n! \over (|\lambda_1| + |\lambda_2|)!} {|\lambda_1|+|\lambda_2| \choose |\lambda_1|,|\lambda_2|}G_{\lambda_1} G_{[0\lambda_2]} \]

%% \[\color{green} \sum_{\substack{\lambda \in C \\ \|\lambda\| = n \\ |\lambda| \ge 1}} f(\lambda) = \sum_m \sum_{\substack{\lambda_1 \in C \\ \|\lambda_1\| + m = n}}   f(m\lambda_1 )\]

\hrule

\[= \sum_{p\ge 1} \sum_{\substack{\lambda_1,\lambda_2,\lambda_3 \in C \\ \|\lambda_1\| + \|\lambda_2\| + \|\lambda_3\| + p = n \\ \|\lambda_3\| + p \ge 1} } {n! \over (|\lambda_1| + |\lambda_2| + 1)!(|\lambda_3| + 1)! }G_{\lambda_1}G_{\lambda_2} G_{[0p\lambda_3]} \]
\[= \sum_{p\ge 1} \sum_{\substack{\lambda_1,\lambda_3 \in C \\ \|\lambda_1\| + \|\lambda_3\| + p = n \\ \|\lambda_3\| + p \ge 1} } {n! \over |\lambda_1|!(|\lambda_3| + 1)! }G_{\lambda_1} G_{[0p\lambda_3]} \]
\[=  \sum_{\substack{\lambda_1,\lambda_2 \in C \\ \|\lambda_1\| + \|\lambda_2\|= n \\ \|\lambda_2\| \ge 1} } {n! \over |\lambda_1|!|\lambda_2|! }G_{\lambda_1} G_{[0\lambda_2]} \]
\[= \sum_{m=2}^{n+1} \sum_{\substack{\lambda_1 \in C_{n-m+1} \\ \lambda_2 \in C_{m-1}}} {n! \over |\lambda_1|!|\lambda_2|! }G_{\lambda_1} G_{[0\lambda_2]} \]





\cqed
\end{proof}


\begin{lemma}[Synthesis]
\[ \left(\sum_{i=1}^{s-1} R^i_s\right) + Z_s = S_s \]
\label{synth}
\end{lemma}

\begin{proof}

\cqed
\end{proof}

\begin{lemma}[Rebalancing]
\[S_s = B_s + W_s \]
\label{rebalance}
\end{lemma}

\begin{proof}

\cqed
\end{proof}

\begin{lemma}[Movement]
\[W_s = \sum_{m=s+1}^{n+1} R_m^s\]
\label{motion}
\end{lemma}

\begin{proof}

\cqed
\end{proof}



\begin{lemma}
\[G_1^{n+1} + \left(\sum_{i = 1}^{n} B_i\right) + S_{n+1} = X_{n+1}\]
\label{finalize}
\end{lemma}

\begin{proof}

\cqed
\end{proof}

\section{Little Lemmas}
If $\lambda$ is a composition, and $S\subseteq \{1,\ldots,|\lambda|\}$,
then write
\[\lambda_S = (\lambda(s) \st s \in S)\]
\[\lambda_{\bar S} = (\lambda(s) \st s \not \in S)\]
where the $s \in S$ are taken in sorted order. For example, suppose $\lambda = 43112$,
and $S = \{1,3,4\} \subseteq {1,2,3,4,5}$. Then $\lambda_S = 411$ and $\lambda_{\bar S} = 32$.
% This definition goes with
\begin{lemma}[Little Movement Lemma]
\label{little.movement}
Let $a \ge 0, b \ge 1$ be given. Then
\[G_{[ab]}G_\lambda = \sum_{S \subseteq \{1,\ldots,|\lambda|\}} G_{\lambda_{\bar S}}G_{[ab\lambda_S]}\]
\end{lemma}
\begin{proof}
By induction on the length of $\lambda$. If $\lambda$ is the empty composition, then
the equality holds trivially. Otherwise $\lambda = \lambda p$, and we reason that
\[G_{[ab]}G_{\lambda p} = G_{[ab]} G_\lambda G_p\]
and by the i.h. this is
\[ \left(\sum_{S \subseteq \{1,\ldots,|\lambda|\}} G_{\lambda_{\bar S}}G_{[ab\lambda_S]}\right) G_p \]
\[= \sum_{S \subseteq \{1,\ldots,|\lambda|\}} G_{\lambda_{\bar S}}G_{[ab\lambda_S]}G_p  \]
But by $(\dagger_{ab\lambda_S})$ we know this is
\[= \sum_{S \subseteq \{1,\ldots,|\lambda|\}}\left( G_{\lambda_{\bar S}}G_pG_{[ab\lambda_S]} + G_{\lambda_{\bar S}}G_{[ab\lambda_S p]}\right)  \]
\[= \sum_{S \subseteq \{1,\ldots,|\lambda p|\}} G_{(\lambda p)_{\bar S}}G_{[ab(\lambda p)_S]}   \]
as required. \cqed
\end{proof}

\begin{lemma}[Subset Rearrangement]
\label{subset.rearrange}
\[\sum_{\lambda\in C_n} \sum_{S \subseteq \{1,\ldots,|\lambda|\}} f(G_{\lambda_{\bar S}}, G_{\lambda_{S}}) = \sum_{\lambda_1, \lambda_2 \in C} {|\lambda_1| + |\lambda_2| \choose |\lambda_1|,|\lambda_2|} [\|\lambda_1\| + \| \lambda_2 \| = n] f(\lambda_1, \lambda_2)\]

\end{lemma}

\begin{proof}
Given a $\lambda \in C_n$, and an $S \subseteq 1, \ldots, |\lambda|$, we compute
$\lambda_1 := \lambda_{\bar S}$ and $\lambda_2 := \lambda_S$, and an element of the
set of size ${|\lambda_1| + |\lambda_2| \choose |\lambda_1|,|\lambda_2|}$ simply by reading off the subset $S$.
This process is clearly invertible, so the two sums are equal.
\cqed
\end{proof}

\begin{lemma}[Merge Composition Sums]
\label{merge.sums}
\[\sum_{\substack{\lambda \in C \\ \|\lambda\| = n}} (|\lambda| + 1) f(\lambda) = \sum_{\substack{\lambda_1, \lambda_2 \in C \\ \|\lambda_1\| + \| \lambda_2 \| = n}}   f(\lambda_1 \lambda_2)\]

\end{lemma}

\begin{proof}
There are $|\lambda|+1$ ways to divide $\lambda$ into two subsequences.
\cqed
\end{proof}

\begin{lemma}[Merge Composition with Numeric Sum]
\label{merge.sums}
\[ \sum_{\substack{\lambda \in C \\ \|\lambda\| = n \\ |\lambda| \ge 1}} f(\lambda) = \sum_m \sum_{\substack{\lambda_1 \in C \\ \|\lambda_1\| + m = n}}   f(m\lambda_1 )\]

\end{lemma}


%% \appendix
%% \section{Misc Obsolete Material}
%% \subsection{Subtraction and Division of Lie Brackets}

%% Instead of using subtraction and division directly, we simply ask for solutions to particular equations
%% in a semiring which imply subtraction and division indirectly. Much like how particular cartesian
%% products may or may not exist in a category, we define what it means for a semiring element
%% to `be a fractional Lie bracket' of two other semiring elements.

%% \begin{definition}
%% Suppose $a, b, c\in R$. We say $c$ a Lie bracket of $a,b$ (i.e. ``$c = [a,b]$'')
%% if $c + ba = ab$.
%% \end{definition}




%% \begin{definition}
%%  A {\em candidate} for $a,b$ is a sequence $(G_n \in R)_{n\in \N} $ and
%% a map $G_{[\dash]}: D^{\ge 1} \to R$, such that
%% \begin{enumerate}
%% \item $G_0 = a$ and $G_1 = a + b$
%% \item $G_{[n]} = G_n$ for every $n$
%% \item $ G_{[\lambda, n]}$ is a Lie bracket of $G_{[\lambda]}, G_n$ for all $n\in \N,\lambda\in D^1$
%% \end{enumerate}
%% \end{definition}


%% \begin{definition}
%% A  map $c : D^{\ge 2} \to \N$ {\em is a solution to the BCH problem} if
%% for every $a,b\in R$, we have that every candidate $G,f$ for $a,b$ that satisfies
%% \[\forall n\ge 2 .\left( n! G_n = \sum_{\lambda\in D^{\ge 2}_n} c(\lambda) G_{[\lambda]}\right)\]
%% also satisfies
%% \[\forall n .\left( \Z_{ab}^n[1] = \sum_{\lambda \in C_n}{n!\over |\lambda|!}G_\lambda\right)\]
%% \end{definition}

%% \section{Finding Coefficients}
%% \subsection{What I know about 0-coefficients}
%% I believe I know the coefficients of all extended compositions that start with zero.
%% For example,
%% \[120G_5 = 24G_{[04]} + 12G_{[0(31)]}  + 12G_{[022]} + 4G_{[0(211)]} + G_{[01111]} + \cdots\]
%% In general,
%% \[n!G_n = \left(\sum_{\lambda \in C_{n-1}} {(n-1)!\over |\lambda|!}G_{[0\lambda]}\right) + \cdots\]
%% \subsection{What I know about Synthesis Multiplicity}
%% Suppose $\lambda \in C_n^k$.
%% I believe the number of times that we do synthesis of $G_{m}$ in the environment $G_{\lambda m}$
%%  is
%% \[(n+m-1)!\over k!(m-1)!\]
%%  Since the synthesis rule for $G_{m}$ involves an $m!$, this results in
%% \[{m (n+m-1)!\over k!}G_{\lambda m}\]

%% For example, $G_{[01]11} + G_{1[01]1} + G_{11[0]1}$ gets moved to
%% $3G_{11[01]}$, and then we synthesize $G_2$ three times, yielding
%% $6G_{112}$. Here $\lambda = (1,1)$ so $n=2$ and $k=2$ and $m = 2$, and
%% we compute that synthesis occurs $3!\over 2!1! = 3$ times, and we get
%% a result of $(2\cdot 3!/2!)G_{112} = 6G_{112}$.

%% For another example, $5G_{[02]111} + 5G_{1[02]11} + 5G_{11[02]1} + 5G_{111[02]}$ gets moved to
%% $20G_{111[02]}$. We know that $G_{3}$ requires $2G_{[02]}$ to synthesize, so we should
%% synthesize $10$ times, leading to $60G_{1113}$. And indeed we compute for $\lambda = (1,1,1)$ and $n=3$ and
%% $k=3$ and $m=3$ that $5!/(3!2!) = 10$ and $3\cdot 5! / 3! = 60$.

%% For another example, $20G_{[02]21} + 20G_{2[02]1} + 20G_{21[02]}$ gets moved to
%% $60G_{21[02]}$. We know that $G_{3}$ requires $2G_{[02]}$ to synthesize, so we should
%% synthesize $30$ times, leading to $180G_{213}$. And indeed we compute for $\lambda = (2,1)$ and $n=3$ and
%% $k=2$ and $m=3$ that $5!/(2!2!) = 30$ and $3\cdot 5! / 2! = 180$.

%% For another example, $120G_{[03]21} + 120G_{2[03]1} + 120G_{21[03]}$ gets moved to
%% $360G_{21[03]}$. We know that $G_{4}$ requires $6G_{[03]}$ to synthesize, so we should
%% synthesize $60$ times, leading to $1440G_{214}$. And indeed we compute for $\lambda = (2,1)$ and $n=3$ and
%% $k=2$ and $m=4$ that $6!/(2!3!) = 60$ and $4\cdot 6! / 2! = 1440$.

%% \subsection{What I think I know about Rebalancing}
%% Let's think about what happens in the $5\to 6$ case when we synthesize the various $G_{(321)}$.
%% The expression $X_5$ contains $60G_{(32)} + 20G_{(221)} + 20G_{(311)}$.
%% Therefore  $\Z[X_5]$ contains $60G_{(32)1} + 20G_{([02]21)} + 20G_{(3[01]1)}$.
%% Pushing things to the right will yield
%% $60G_{(32)1} + 60G_{(21)[02]} + 60G_{(31)[01]}$.
%% Now we do synthesis of $G_2$ and $G_3$ and we obtain
%% $60G_{(32)1} + 180G_{(21)3} + 120G_{(31)2}$.
%% This is a general case of the post synthesis situation. Let's say we have a collection $\Lambda \subseteq C_n^k$
%% closed under permutation. Then we have a collection of synthesis products
%% \[ \sum_{\lambda \in \Lambda} {\lambda(k) (n-1)!\over (k-1)!}G_{\lambda}\]
%% In our special case, we have $\Lambda = (321)$ so $n=6$ and $k=3$. In this case we know $3$ divides $(n-1)!/(k-1)!$,
%% but why generally? Let's try some examples.
%% \subsubsection{Rebalancing $(2111)$}
%%  In the $4\to 5$ case of synthesizing $(2111)$, our post-synth products are
%% \[4G_{(211)1} + 8G_{1112}\]
%% There are four things I need to spread values across; each of these coefficients is a multiple of 4. Fine.
%% \subsubsection{Rebalancing $(2211)$}
%%  In the $5\to 6$ case of synthesizing $(2211)$, our post-synth products are
%% \[ 20G_{(221)1} + 40G_{(211)2} \]
%% for a total of $3\cdot 20 + 3 \cdot 40 = 180$. Each of these gets spread over the 4 rotations of its rightmost
%% element. Every coefficient is a multiple of 4, this is fine.

%% Concretely what did my recipe from before suggest? For $k=4$ I got
%% \[ \sum_{\lambda\in\Lambda} \lambda(4) G_{\lambda} = \]
%% \[ {1\over 4} \sum_{\lambda\in\Lambda}\left( G_\lambda\left(\sum_i \lambda(i) \right)
%% + \left( \lambda(2)G_{\lambda([12]34)} \right)
%% + \left( 2 \lambda(3)G_{\lambda(1[23]4)}\right)
%% + \left( 3\lambda(4)G_{\lambda(12[34])} \right)\right)\]

%% Ah! I can see why I'm  licensed to divide by $4$ here. My synthesis coefficient
%% is always a multiple of $(n-1)!/(k-1)!$, and I'm just additionally dividing by $k$.
%% But $(n-1)!/k!$ is always an integer unless I'm dealing with the $11\cdots 11$ case, in which
%% no rebalancing is necessary.
%% \subsubsection{Rebalancing $(3211)$}
%% In the $6\to 7$ (!) case of synthesizing $(3211)$, our post-synth products are
%% \[ = 120G_{(321)1} + 240G_{(311)2} + 360G_{(211)3}\]
%% Here there are 6+3+3 terms I need to spread across, and all coefficients are multiples of 12.
%% The average is $(6 \cdot 120  + 3 \cdot 240 + 3 \cdot 360) / 12 = 210 = 7!/4!$ as required.


%% \subsection{What I think I know about Synthesis Coefficients}
%%  \begin{nstabbing}
%% \hspace{0.5in}\=$=\ $ \=\kill\\
%% $6G_3 $\>$=$\>$ \cdots +  G_{[12]} $\\
%% $24G_4 $\>$=$\>$ \cdots + 6G_{[13]} + G_{[121]}  $\\
%% $120G_5 $\>$=$\>$  \cdots + 36G_{[14]} + 12G_{[23]} + 8G_{[131]} + 4G_{[122]} +  G_{[1211]}$\\
%% $720G_6 $\>$=$\>$  \cdots +  240G_{[15]} + 120G_{[24]} + 60G_{[141]} +  60G_{[132]} + {}$\\
%% \>\> $\phantom{\cdots+}10G_{[1311]} + 5G_{[1221]} + 5G_{[1212]} + G_{[12111]}$
%% \end{nstabbing}
%% and what I'm finding so far as a refinement is
%% \begin{nstabbing}
%% \hspace{0.5in}\=$=\ $ \=\kill\\
%% $6G_3 $\>$=$\>$ \cdots +  2G_{[12]} + G_{[21]} $\\
%% $24G_4 $\>$=$\>$ \cdots + 9G_{[13]} + 3G_{[31]} + 2G_{[121]} + G_{[211]}  $\\
%% \end{nstabbing}
%% Can I guess more coefficients?
%% \begin{nstabbing}
%% \hspace{0.5in}\=$=\ $ \=\kill\\
%% $120G_5 $\>$=$\>$ \cdots + (4\cdot 4!/2!)G_{[14]} + (1\cdot 4!/2!)G_{[41]} + (3\cdot 4!/2!)G_{[23]} +  (2\cdot 4!/2!)G_{[23]} + {} $\\
%% \>\>$\phantom{\cdots+}(3\cdot 1\cdot 4!/3!)G_{[131]} + (1\cdot 1\cdot 4!/3!)G_{[311]} + {}$\\
%% \>\>$\phantom{\cdots+} (2\cdot 4!/3!)G_{[122]} +(1\cdot 4!/3!)G_{[212]} + \cdots$\\
%% $120G_5 $\>$=$\>$ \cdots + 48G_{[14]} + 12G_{[41]} + 36G_{[23]} + 24G_{[32]} + {} $\\
%% \>\>$\phantom{\cdots+}12G_{131} + 4G_{311} + {}$\\
%% \>\>$\phantom{\cdots+}8G_{122} + 4G_{212} + \cdots$\\
%% \end{nstabbing}
%% Now for $n=6$ I see
%% \[[15]:(5\cdot 5!/2!) - [51]:(1\cdot 5!/2!) = 240\]
%% \[[24]:(4\cdot 5!/2!) - [42]:(2\cdot 5!/2!) = 120\]
%% \[[141]:(4\cdot 5!/3!) - [411]:(1\cdot 5!/3!) = 60\]
%% \[[132]:(3\cdot 5!/3!) - [312]:(1\cdot 5!/3!) = 40\]
%% This seems wrong at first... But I can use the Jacobi identity to show that
%% \[20G_{[312]} + 20G_{[213]} + 40G_{[321]} + 40G_{[123]} + 60G_{[231]} + 60G_{[132]} = 60G_{[132]}\]
%% Terrific. Continuing:
%% \[[1311]:(3\cdot 5!/4!) - [3111]:(1\cdot 5!/4!) = 10\]
%% \[[1221]:(2\cdot 5!/4!) - [2121]:(1\cdot 5!/4!) = 5\]
%% \[[1212]:(2\cdot 5!/4!) - [2112]:(1\cdot 5!/4!) = 5\]
%% \[[12111]:(2\cdot 5!/5!) - [21111]:(1\cdot 5!/5!) = 1\]

%% This is nearly getting me to a statement of the theorem.

%% %% Let $C_n^k$ be the set of length-$k$ sequences $\lambda = \lambda(1),\ldots,\lambda(k)$
%% %% of positive integers whose sum is $n$. Set $C = \bigcup_n \bigcup_{k=1}^n   C_n^k$.
%% %% %% Let $D$ be the set of finite sequences of positive integers, except that the first item
%% %% %% also allowed to be $0$.
%% %% \begin{theorem}
%% %% Let $R$ be a (not necessarily commutative) semiring.
%% %%  Suppose we're given $a, b \in R$,
%% %% and two functions $(\lambda \mapsto L_{\lambda}), (\lambda \mapsto E_{\lambda}) : C \to R$. Assume that
%% %% \begin{enumerate}
%% %% \item $L_1 = a + b$
%% %% \item  For every $n\ge 2$, \[n!L_{n} = \sum_{k = 1}^{n-1}{(n-1)!\over k! }\left(\left(\sum_{\lambda\in C^k_{n-1}} E_{\lambda}\right) +
%% %%   \left(\sum_{\lambda\in C^k_n} \lambda(2)L_{\lambda}\right)\right)\]
%% %% (This is meaningful in a semiring because $(n-1)!/k!$ is an integer.
%% %% Also, we assume for the sake of the above expression that $\lambda(2) = 0$ when $k=1$)
%% %% \item For every $\lambda \in C$ and $m \ge 1$,
%% %% \[ L_{\lambda m} + L_{m} L_{\lambda}  =  L_{\lambda} L_{m}\]
%% %% \[ E_{\lambda m} + L_{m} E_{\lambda}  =  E_{\lambda} L_{m}\]
%% %% \[ E_{ m} + L_{m} a  =  a L_{m}\]
%% %% %(i.e. ``$L_{\lambda m} \approx [L_\lambda, L_m]$'')
%% %% \end{enumerate}
%% %% Then for all $n \ge 1$,
%% %% \[ \sum_{m = 0}^n {n\choose m} a^mb^{n-m} = \sum_{k \ge 1}^n\sum_{\lambda \in C^k_n}{n!\over k!}\prod_{i=1}^k L_{\lambda(i)}\]

%% %% \end{theorem}

%% \section{Proof}
%% In this section we prove Theorem~\ref{big}.
%%  Therefore if we can show $\Z[X_n] = X_{n+1}$, then we have
%% \[ \sum_{m=0}^n {n\choose m}a^mb^{n-m} = \Z^n[1] = X_n\]
%% as required.
%% \subsection{Sketch of Proof}
%% Here's the general shape of the proof.
%% \begin{enumerate}
%% \item Deal with $G_0$:
%% \begin{enumerate}
%% \item Start with $\Z[X_n]$.
%% \item Push all copies of $a$ all the way to the right, creating many $G_{[0m]}$.
%% \item Push all $G_{[0m]}$ to the right, creating {\em all} $G_{[0\lambda]}$.
%% \[ \left(\sum_{k = 1}^n \sum_{n_1+n_2 = n\atop k_1+k_2=k}\sum_{\lambda_1\in {C_{n_1}^{k_1}}\atop \lambda_2\in C_{n_2}^{k_2}}
%% {n!\over k!}(k_1+1)G_{\lambda_1}G_{[0\lambda_2]}\right) + \left(\sum_{k = 1}^n \sum_{\lambda\in {C_n^k}}{n!\over k!} G_\lambda (a+b)\right)\]
%% \end{enumerate}
%% \item Deal with $G_1$:
%% \begin{enumerate}
%% \item Synthesize $G_1$ on the right.
%% \[ \left(\sum_{k = 1}^n \sum_{n_1+n_2 = n\atop k_1+k_2=k}\sum_{\lambda_1\in {C_{n_1}^{k_1}}\atop \lambda_2\in C_{n_2}^{k_2}}
%% {n!\over k!}(k_1+1)G_{\lambda_1}G_{[0\lambda_2]}\right) + \left(\sum_{k = 1}^n \sum_{\lambda\in {C_n^k}}{n!\over k!} G_{\lambda 1}\right)\]
%% \item Spread $G_1$ to the left, creating many $G_{[m1]}$.
%% \[ \left(\sum_{k = 1}^n \sum_{n_1+n_2 = n\atop k_1+k_2=k}\sum_{\lambda_1\in {C_{n_1}^{k_1}}\atop \lambda_2\in C_{n_2}^{k_2}}
%% {n!\over k!}(k_1+1)G_{\lambda_1}G_{[0\lambda_2]}\right) + {}\]
%% \[\left(\sum_{k = 1}^{n-1} \sum_{\lambda\in {C_n^k}}{n!\over (k+1)!} (k+1)G_{\lambda 1}\right) + G_{1^{n+1}}\]
%% \[= \left(\sum_{k = 1}^n \sum_{n_1+n_2 = n\atop k_1+k_2=k}\sum_{\lambda_1\in {C_{n_1}^{k_1}}\atop \lambda_2\in C_{n_2}^{k_2}}
%% {n!\over k!}(k_1+1)G_{\lambda_1}G_{[0\lambda_2]}\right) + {}\]
%% \[ \left(\sum_{k = 1}^n \sum_{n_1+n_2 = n\atop k_1+k_2=k}\sum_{\lambda_1\in {C_{n_1}^{k_1}}\atop \lambda_2\in C_{n_2}^{k_2}}
%% {n!\over k!}(k_1+1)G_{\lambda_1}G_{[m1\lambda_2]}\right) + {}\]
%% \[\left(\sum_{k = 1}^{n-1} \sum_{\lambda\in {C_n^k}}{n!\over (k+1)!} G_{\lambda \sim 1}\right) + G_{1^{n+1}}\]
%% \item Push $G_{[m1]}$ to the right, creating {\em all} $G_{[m1\lambda]}$.
%% \end{enumerate}
%% \item Deal with $G_2$:
%% \begin{enumerate}
%% \item Synthesize $G_2$ on the right. (because we have all $[01]$)
%% \item Spread $G_2$ to the left, creating many $G_{[m2]}$.
%% \item Push $G_{[m2]}$ to the right, creating {\em all} $G_{m2\lambda}$.
%% \end{enumerate}
%% \item Deal with $G_3$:
%% \begin{enumerate}
%% \item Synthesize $G_3$ on the right. (because we have all $[02],[011],[12],[21]$)
%% \item Spread $G_3$ to the left, creating many $G_{[m3]}$.
%% \item Push $G_{[m3]}$ to the right, creating {\em all} $G_{m3\lambda}$.
%% \end{enumerate}
%% \item Deal with $G_4$:
%% \begin{enumerate}
%% \item Synthesize $G_4$ on the right. (because we have required ingredients)
%% \item Spread $G_4$ to the left, creating many $G_{[m4]}$.
%% \item Push $G_{[m4]}$ to the right, creating {\em all} $G_{m4\lambda}$.
%% \end{enumerate}
%% \item $\cdots$
%% \end{enumerate}
%% \vfil\eject
%% \subsection{Sketch of Proof, 2}
%% Recall the synthesis recipe is
%% \[n!G_{n} = \left(\sum_{\lambda\in C_{n-1}}{(n-1)!\over |\lambda|! } G_{[0\lambda]}\right) +
%%   \left(\sum_{\substack{\lambda\in C_n\\ 2 \le |\lambda| \le n-1 }} \lambda(2){(n-1)!\over |\lambda|! }G_{[\lambda]}\right)
%% \eqno(\ddagger)\]
%% \subsubsection{Definitions}
%% \[S_p = \sum_{\lambda \in C_{n+1-p} } p{n!\over |\lambda|! }G_{\lambda p}\]
%% \[S'_p = \sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| +1\le n} } p{n!\over |\lambda|! }G_{\lambda p}
%%  = \sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| +1\le n} } p{n!\over (|\lambda|+1)! }(|\lambda| + 1)G_{\lambda p}\]
%% \[B_p = \sum_{\substack{n_1,n_2 \\n_1+n_2 = n+1-p }}
%% \sum_{\substack{\lambda_1 \in C_{n_1} \\ \lambda_2 \in C_{n_2} \\ |\lambda_1| + |\lambda_2| + 1 \le n}}
%%  p{n!\over(|\lambda_1| + |\lambda_2| + 1)! }G_{\lambda_1 p \lambda_2}\]
%% \[W_p^\ell = \sum_{\substack{m, n_1,n_2 \\ m+n_2=\ell-p \\ n_1 + n_2 = n}} \sum_{\lambda_1 \in C_{n_1} \atop \lambda_2 \in C_{n_2}} p{n!\over |\lambda_1|! (|\lambda_2 |+2)! }G_{\lambda_1 [mp \lambda_2]}\]
%% \[\bar Z = \sum_{\substack{m,n_1,n_2\\n_1 + n_2 + 1 = n  }} \sum_{\lambda_1 \in C_{n_1} \atop \lambda_2 \in C_{n_2}}
%% {n!\over (|\lambda_1| + |\lambda_2| + 1)!}G_{\lambda_1 [0 m] \lambda_2}\]
%% \[Z^\ell = \sum_{\substack{n_1,n_2\\n_1 + n_2 = n  \\ 1 + n_2 = \ell}} \sum_{\lambda_1 \in C_{n_1} \atop \lambda_2 \in C_{n_2}}
%% {n!\over |\lambda_1|! |\lambda_2 |! }G_{\lambda_1 [0  \lambda_2]}\]
%% \subsubsection{Hard}
%% %% \[S_{p;k} = p{n!\over k!} \sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| = k }} }G_{\lambda p}\]
%% %% \[S_p = \sum_{k = 1}^{n} S_{p;k}\]
%% %% \[S'_p = \sum_{k = 1}^{n-1} S_{p;k}\]
%% %% \[S_{p;5} = \sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| = 5 }} p{n!\over |\lambda|! }G_{\lambda p}\]
%% %% Suppose $5 \le n -1 $. Then $n \ge 6$ and $n! \ge 6!$ and
%% %% \[S_{p;5} = \sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| = 5 }} p{n!\over 5! }G_{\lambda p}\]
%% %% \[S_{p;5} = \sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| = 5 }} p{n!\over 6! } 6G_{\lambda p}\]
%% %% \[S_{p;5} = \sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| = 5 }} p{n!\over 6! } (G_{p\lambda} + \cdots + G_{\lambda p}) + p{n!\over 6!}(G_{[\lambda_1p]\lambda_2\lambda_3\lambda_4 \lambda_5 } + \cdots + 5G_{\lambda_1\lambda_2\lambda_3\lambda_4[\lambda_5 p]})\]
%% %% \[S_{p;5} = p{n!\over 6! }\sum_{\substack{\lambda \in C_{n+1-p} \\ |\lambda| = 5 }}  (G_{p\lambda} + \cdots + G_{\lambda p}) + (G_{[\lambda_1p]\lambda_2\lambda_3\lambda_4 \lambda_5 } + \cdots + 5G_{\lambda_1\lambda_2\lambda_3\lambda_4[\lambda_5 p]})\]
%% \subsubsection{$n=3$ Reasoning}
%% \[\Z[X_3] = (6G_{31} + 3G_{211} + 3G_{121} + G_{1111}) + {}\]
%% \[(6G_{[03]} + 3G_{[02]1} + 3G_{1[02]} + 3G_{[01]2} + 3G_{2[01]} + {} \]
%% \[G_{[01]11} + G_{1[01]1} + G_{11[01]})\]
%% \[ = (6G_{31} + 3G_{211} + 3G_{121}) + {}\]
%% \[(6G_{[03]} + 3G_{[021]} + 6G_{1[02]} + 3G_{[012]} + 6G_{2[01]} + {} \]
%% \[G_{[0111]} + 3G_{1[011]} + 3G_{11[01]}) + G_{1111}\]

%% \[ = (6G_{31} + 2G_{(211)} + G_{[11]2} + G_{[21]1} + 2G_{1[21]}) + {}\]
%% \[(6G_{[03]} + 3G_{[021]} + 6G_{1[02]} + 3G_{[012]} + 6G_{2[01]} + {} \]
%% \[G_{[0111]} + 3G_{1[011]} + 3G_{11[01]}) + G_{1111}\]
%% \subsubsection{Reasoning}
%% \[\Z[X_n] = S_1 + \bar Z = S'_1 + \bar Z + G_{1^{n+1}}\]
%% \[= S'_1 + \sum_{\ell= 2}^{n+1} Z^\ell + G_{1^{n+1}}\]
%% \[= \sum_{\ell = 2}^{n+1} W^\ell_1 + B_1 + \sum_{\ell= 2}^{n+1} Z^\ell + G_{1^{n+1}}\]
\end{document}
