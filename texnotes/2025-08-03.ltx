\documentclass{article}
\usepackage[tmargin=0.15in, bmargin=0.15in]{geometry}
\input{theorem}
\input{prooftree}
\usepackage{hyperref}
% https://tex.stackexchange.com/a/847
\hypersetup{
    colorlinks,
    urlcolor={blue},
}
\usepackage{makecell}
\usepackage{relsize}
\usepackage{latexsym}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\usepackage{stackengine}
\newcommand\oast{\stackMath\mathbin{\stackinset{c}{0ex}{c}{0ex}{\ast}{\bigcirc}}}

\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\sssection#1{\vskip1em \hrule\vskip 0.5em \noindent $\triangleright$ {\bf #1} \vskip0.5em \hrule\vskip 1em }
\def\I{\mathbb{I}}




\def\gets{\leftarrow}
\def\dia{\Diamond}
\def\all{\forall}

\def\spec{\mathsf{Spec}}
\def\breturn{\mathop{\mathbf{return}}\nolimits}
\def\bthunk{\mathop{\mathbf{thunk}}\nolimits}
\def\brun{\mathop{\mathbf{run}}\nolimits}
\def\bget{\mathop{\mathbf{get}}\nolimits}
\def\bGel{\mathop{\mathbf{Gel}}\nolimits}
\def\bgel{\mathop{\mathbf{gel}}\nolimits}
\def\bgbound{\mathop{\mathbf{gbound}}\nolimits}
\def\bgpath{\mathop{\mathbf{gpath}}\nolimits}
\def\bungel{\mathop{\mathbf{ungel}}\nolimits}
\def\bGet{\mathop\mathbf{Get}}
\def\dapt#1#2{#1[\![#2]\!]}
\def\dap#1#2{#1\{#2\}}
\def\ll{\langle\!\langle}
\def\rr{\rangle\!\rangle}
\def\rshape{\ {\mathsf{shape}}}
\def\rrefl{{\mathsf{refl}}}
\def\bd{\mathsf{Bd}}
\def\bdd{\mathsf{Bdd}}
\def\rset{\mathbf{Set}}
\def\rid{\mathsf{id}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\def\prequiv{\dashv\vdash}
\def\sq{\square}

\definecolor{blu}{rgb}{0.1,0.5,1}
\definecolor{orng}{rgb}{1,0.5,0.3}

\def\nameof#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}



\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{lorange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.8}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=lorange,colback=lorange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\parr{\mathbin{\rotatebox[origin=c]{180}{\&}}}
\def\iff{\ \Longleftrightarrow\ }
\def\bu{\bullet}
\def\J{\mathbb{J}}
\def\R{\mathbb{R}}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\cprov{\mathrel\#}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\N{{\mathbb N}}
\def\Z{{\mathbb Z}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\tw{\mathop\triangleright\nolimits}
\def\tb{\mathop\blacktriangleleft}
\def\sw#1{^{#1}_{#1}}
\def\TP{\mathbf{TPre}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{\textsf{\textbf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
%\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rtrue{\ \mathsf{true}}
\def\rfalse{\ \mathsf{false}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\A{\mathbf{A}}
\def\B{\mathbb{B}}
\def\C{\mathbb{C}}
\def\W{\mathbb{W}}
\def\S{\mathbf{S}}
\def\G{\mathbf{G}}
\def\D{\mathbb{D}}
\def\E{\mathbb{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\tri{\rhd}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}

% https://tex.stackexchange.com/questions/716631/curved-arrows-from-tikz-cd-do-not-work
\tikzset{
  curve/.style={
    settings={#1},
    to path={
      (\tikztostart)
      .. controls ($(\tikztostart)!\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      and ($(\tikztostart)!1-\pv{pos}!(\tikztotarget)!\pv{height}!270:(\tikztotarget)$)
      .. (\tikztotarget)\tikztonodes
    },
  },
  settings/.code={%
    \tikzset{quiver/.cd,#1}%
    \def\pv##1{\pgfkeysvalueof{/tikz/quiver/##1}}%
  },
  quiver/.cd,
  pos/.initial=0.35,
  height/.initial=0,
}

\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\tikzset{shorten <>/.style={shorten >=#1,shorten <=#1}}

\section{Weak Pushouts}

We suppose the existence of a property of commutative squares,
call it {\em cohesive}.
\[\begin{tikzcd}
	{X}  & { B} \\
	{A} & {R}
	\arrow["{}"', from=1-2, to=1-1]
	\arrow["", from=2-1, to=1-1]
	\arrow["{}"', from=2-2, to=1-2]
	\arrow["{}", from=2-2, to=2-1]
\end{tikzcd}\]
We say `$X$ is cohesive $A \to B$ over $R$' as an abbreviation.
We say $X$ is symmetric cohesive between $A$ and $B$ if $X$
is cohesive $A \to B$ and $B \to A$.
We assume
\begin{itemize}
\item every span has a universal (i.e. initial) cohesive completion
\item every span has a universal (i.e. initial) symmetric cohesive completion
\end{itemize}
We should expect (although I'm not sure how best to axiomatize) that
\[\begin{tikzcd}
	B & B \\
	B & A
	\arrow[equals, from=1-2, to=1-1]
	\arrow[equals, from=2-1, to=1-1]
	\arrow["f"', from=2-2, to=1-2]
	\arrow["f", from=2-2, to=2-1]
\end{tikzcd}\]
is the universal symmetric cohesive diagram on the span consisting of two copies of $f$.

First quick lemma I want to check to ensure I have things the right way around.
The cohesive completion of a span should inject into the symmetric cohesive completion.

% https://q.uiver.app/#q=WzAsNSxbMSwyLCJBIl0sWzIsMSwiQiJdLFsyLDIsIkMiXSxbMSwxLCJYIl0sWzAsMCwiWSJdLFsxLDNdLFswLDNdLFsyLDBdLFsyLDFdLFsxLDQsIiIsMix7ImN1cnZlIjoyfV0sWzAsNCwiIiwyLHsiY3VydmUiOi0yfV0sWzMsNCwiIiwyLHsic3R5bGUiOnsiYm9keSI6eyJuYW1lIjoiZGFzaGVkIn19fV1d
\[\begin{tikzcd}
	Y \\
	& X & B \\
	& A & C
	\arrow[dashed, from=2-2, to=1-1]
	\arrow[curve={height=12pt}, from=2-3, to=1-1]
	\arrow[from=2-3, to=2-2]
	\arrow[curve={height=-12pt}, from=3-2, to=1-1]
	\arrow[from=3-2, to=2-2]
	\arrow[from=3-3, to=2-3]
	\arrow[from=3-3, to=3-2]
\end{tikzcd}\]
So suppose $XABC$ is cohesive, and $YABC$ is symmetric cohesive. Therefore $YABC$
is also cohesive. But $XABC$ is the universal cohesive completion of $ABC$, so there
is a unique map $X \to Y$ making everything commute. Ok, that seems correct.


Ok, now let $ A$ be the cohesive completion of the span $1 \gets 0 \to 1$.
\[\begin{tikzcd}
	{ A}  & {1} \\
	{1} & {0}
	\arrow["{c}"', from=1-2, to=1-1]
	\arrow["d", from=2-1, to=1-1]
	\arrow["{!}"', from=2-2, to=1-2]
	\arrow["{!}", from=2-2, to=2-1]
\end{tikzcd}\]
I can consider the pushout of $ A$ with itself, to make a path consisting of
two steps. Call this ${ A}_2$, which has domain and codomain points as maps from $1$.
Or I can just recognize that there are maps $2 \to  A$ and $2 \to { A}_2$ accounting
for their respective boundaries.
I can then take the universal symmetric cohesive completion of these two
\[\begin{tikzcd}
	{K_2}  & { A} \\
	{{ A}_2} & {2}
	\arrow["{}"', from=1-2, to=1-1]
	\arrow["", from=2-1, to=1-1]
	\arrow["{}"', from=2-2, to=1-2]
	\arrow["{}", from=2-2, to=2-1]
\end{tikzcd}\]
and now $K_2$ is an object that represents two morphisms being composed to one.
More generally, I can take some pushouts of $n$ copies of $ A$, yielding ${ A}_n$.
Let $K_n$ be the universal symmetric completion
\[\begin{tikzcd}
	{K_n}  & { A} \\
	{{ A}_n} & {2}
	\arrow["{}"', from=1-2, to=1-1]
	\arrow["", from=2-1, to=1-1]
	\arrow["{}"', from=2-2, to=1-2]
	\arrow["{}", from=2-2, to=2-1]
\end{tikzcd}\]
For a type $C$ to behave like a category, it should be a fibrant object with respect
to the class of cofibrations $A_n \to K_n$. We should have solutions to lifting problems

\[\begin{tikzcd}
	{A_n} & C \\
	{K_n} & \textcolor{lgray}{1}
	\arrow[from=1-1, to=1-2]
	\arrow["{\eta_n}"', from=1-1, to=2-1]
	\arrow[color={lgray}, from=1-2, to=2-2]
	\arrow[dashed, from=2-1, to=1-2]
	\arrow[color={lgray}, from=2-1, to=2-2]
\end{tikzcd}\]
It might be that $\eta_0$ and $\eta_2$ suffice to be equivalent to the whole class of cofibrations.
\subsection{Associativity}
A type $C$ that is fibrant with respect to $\eta_2$ is a type that in some sense supports
composition of morphisms. I'd like to show that that composition must be associative. For
that I think I need to know the property of being a cohesive commutative square
somehow interacts well with composition.

\subsubsection{Vertical Composition}
% https://q.uiver.app/#q=WzAsNyxbMCwyLCJBIl0sWzIsMiwiQiJdLFs0LDIsIkMiXSxbMSwxLCJYIl0sWzMsMSwiWSJdLFsyLDAsIloiXSxbMiwzLCJEIl0sWzYsMV0sWzAsM10sWzEsM10sWzEsNF0sWzIsNF0sWzMsNV0sWzQsNV0sWzYsMCwiIiwyLHsiY3VydmUiOi0yfV0sWzYsMiwiIiwyLHsiY3VydmUiOjJ9XSxbNSwxLCIiLDIseyJzdHlsZSI6eyJuYW1lIjoiY29ybmVyIn19XV0=
\[\begin{tikzcd}
	&& Z \\
	& X && Y \\
	A && B && C \\
	&& D
	\arrow["\lrcorner"{anchor=center, pos=0.125, rotate=-45}, draw=none, from=1-3, to=3-3]
	\arrow[from=2-2, to=1-3]
	\arrow[from=2-4, to=1-3]
	\arrow[from=3-1, to=2-2]
	\arrow[from=3-3, to=2-2]
	\arrow[from=3-3, to=2-4]
	\arrow[from=3-5, to=2-4]
	\arrow[curve={height=-12pt}, from=4-3, to=3-1]
	\arrow[from=4-3, to=3-3]
	\arrow[curve={height=12pt}, from=4-3, to=3-5]
\end{tikzcd}\]
I think I want to require that if $X$ is cohesive $A \to B$ and $Y$ is cohesive $B \to C$,
then $Z$, given by the pushout of $X$ and $Y$ over $B$, is cohesive $A \to C$.

Notice that this also gives me vertical composability of symmetric cohesive squares.
If $X$ is symmetric cohesive $A = B$ and $Y$ is symmetric cohesive $B = C$, then
$Z$ is the same pushout regardless of which direction the morphisms go; it is then
symmetric cohesive $A = C$.
\subsection{Horizontal Composition}
Suppose we are trying to compose something like
\[\begin{tikzcd}
	A & B & C
	\arrow[""{name=0, anchor=center, inner sep=0}, "f", curve={height=-12pt}, from=1-1, to=1-2]
	\arrow[""{name=1, anchor=center, inner sep=0}, "g"', curve={height=12pt}, from=1-1, to=1-2]
	\arrow[""{name=2, anchor=center, inner sep=0}, "h", curve={height=-12pt}, from=1-2, to=1-3]
	\arrow[""{name=3, anchor=center, inner sep=0}, "k"', curve={height=12pt}, from=1-2, to=1-3]
	\arrow["\alpha", shorten <=3pt, shorten >=3pt, Rightarrow, from=0, to=1]
	\arrow["\beta", shorten <=3pt, shorten >=3pt, Rightarrow, from=2, to=3]
\end{tikzcd}\]
I think the appropriate diagram is something like
% https://q.uiver.app/#q=WzAsMTYsWzEsNywiQSJdLFs0LDcsIkIiXSxbNyw3LCJDIl0sWzEsNiwiQVxcb3BsdXMgQiJdLFs3LDYsIkJcXG9wbHVzIEMiXSxbNCw4LCJEIl0sWzQsNSwiQVxcb3BsdXMgQyJdLFswLDMsImYiXSxbMiw0LCJnIl0sWzYsMywiaCJdLFs4LDQsImsiXSxbMSwxLCJcXGFscGhhIl0sWzcsMSwiXFxiZXRhIl0sWzMsMiwiaFxcY2lyYyBmIl0sWzUsMywia1xcY2lyYyBnIl0sWzQsMCwiXFxiZXRhKlxcYWxwaGEiXSxbNSwxXSxbMCwzXSxbMSwzXSxbMSw0XSxbMiw0XSxbNSwwLCIiLDIseyJjdXJ2ZSI6LTJ9XSxbNSwyLCIiLDIseyJjdXJ2ZSI6Mn1dLFswLDZdLFsyLDZdLFszLDUsIiIsMix7InN0eWxlIjp7Im5hbWUiOiJjb3JuZXIifX1dLFs0LDUsIiIsMix7InN0eWxlIjp7Im5hbWUiOiJjb3JuZXIifX1dLFs2LDUsIiIsMix7InN0eWxlIjp7Im5hbWUiOiJjb3JuZXIifX1dLFszLDddLFszLDhdLFs0LDldLFs0LDEwXSxbNywxMV0sWzgsMTFdLFs5LDEyXSxbMTAsMTJdLFs3LDEzXSxbOSwxM10sWzgsMTRdLFsxMCwxNF0sWzYsMTRdLFs2LDEzXSxbMTMsMTVdLFsxNCwxNV0sWzExLDE1XSxbMTIsMTVdXQ==
\[\begin{tikzcd}
	&&&& {\beta*\alpha} \\
	& \alpha &&&&&& \beta \\
	&&& {h\circ f} \\
	f &&&&& {k\circ g} & h \\
	&& g &&&&&& k \\
	&&&& {A\oplus C} \\
	& {A\oplus B} &&&&&& {B\oplus C} \\
	& A &&& B &&& C \\
	&&&& D
	\arrow[from=2-2, to=1-5]
	\arrow[from=2-8, to=1-5]
	\arrow[from=3-4, to=1-5]
	\arrow[from=4-1, to=2-2]
	\arrow[from=4-1, to=3-4]
	\arrow[from=4-6, to=1-5]
	\arrow[from=4-7, to=2-8]
	\arrow[from=4-7, to=3-4]
	\arrow[from=5-3, to=2-2]
	\arrow[from=5-3, to=4-6]
	\arrow[from=5-9, to=2-8]
	\arrow[from=5-9, to=4-6]
	\arrow[from=6-5, to=3-4]
	\arrow[from=6-5, to=4-6]
	\arrow["\lrcorner"{anchor=center, pos=0.05, rotate=-45}, draw=none, from=6-5, to=9-5]
	\arrow[from=7-2, to=4-1]
	\arrow[from=7-2, to=5-3]
	\arrow["\lrcorner"{anchor=center, pos=0.05}, draw=none, from=7-2, to=9-5]
	\arrow[from=7-8, to=4-7]
	\arrow[from=7-8, to=5-9]
	\arrow["\lrcorner"{anchor=center, pos=0.05, rotate=-90}, draw=none, from=7-8, to=9-5]
	\arrow[from=8-2, to=6-5]
	\arrow[from=8-2, to=7-2]
	\arrow[from=8-5, to=7-2]
	\arrow[from=8-5, to=7-8]
	\arrow[from=8-8, to=6-5]
	\arrow[from=8-8, to=7-8]
	\arrow[curve={height=-12pt}, from=9-5, to=8-2]
	\arrow[from=9-5, to=8-5]
	\arrow[curve={height=12pt}, from=9-5, to=8-8]
   \arrow["\star"{anchor=center, pos=0.05}, draw=none, from=2-2, to=7-2]
   \arrow["\star"{anchor=center, pos=0.05, color={red}}, draw=none, from=1-5, to=6-5]
	\arrow["\star"{anchor=center, pos=0.05}, draw=none, from=2-8, to=7-8]
\end{tikzcd}\]
The assumptions include the following.
$A\oplus B$ and $A\oplus C$ and $B \oplus C$ are pushouts over $D$.
$h \o f$ and $k \o g$ are pushouts over $B$.
The maps $A \oplus C$ into $h\o f$ and $k\o g$ can be constructed from
the pushout UMP of $A \oplus C$. The object $\beta * \alpha$ is a pushout
over $\alpha$ and $\beta$ over $B$. The maps from $h \o f$ and $k \o g$ into
$\beta * \alpha$ can be constructed from pushout UMPs of the two 1-morphism compositions.

Given all of that, we axiomatize `horizontal composition' by asserting that
\begin{itemize}
\item $\alpha$ is cohesive $f \to g$ over $A \oplus B$,
\item $\beta$ is cohesive $h \to k$ over $B \oplus C$
\end{itemize}
then $\beta * \alpha$ is cohesive $h f \to kg$ over $A \oplus C$.
\subsection{A Potential Problem}
I can take the universal cohesive completion of
\[\begin{tikzcd}
	{X}  & { 1} \\
	{{ 1}} & {2}
	\arrow["{}"', from=1-2, to=1-1]
	\arrow["", from=2-1, to=1-1]
	\arrow["{}"', from=2-2, to=1-2]
	\arrow["{}", from=2-2, to=2-1]
\end{tikzcd}\]
And I get something that is like a 2-cell from $\rid$ to itself.

\subsection{Back to Associativity}
Suppose I have a category $C$ that `supports binary composition of morphisms'.
This means we can solve lifting problems
\[\begin{tikzcd}
	{A_2} & C \\
	{K_2} & \textcolor{lgray}{1}
	\arrow[from=1-1, to=1-2]
	\arrow["{\eta_2}"', from=1-1, to=2-1]
	\arrow[color={lgray}, from=1-2, to=2-2]
	\arrow[dashed, from=2-1, to=1-2]
	\arrow[color={lgray}, from=2-1, to=2-2]
\end{tikzcd}\]

\subsection{A Definite Mistake}

Wait, surely it's {\em not} the case that the only bidirectional
cells from a cell to itself are identities. If both the domain
and the codomain are like the standard Eckman-Hilton thing
with two directed cells from the identity to itself,
then any number of signed twists are allowable.

\section{Trees}
\subsection{Lax Categories}

There should be some way of getting handle on the definition
of a category where composition is merely lax, and
with a corresponding lax associativity etc., and specializations
of that to reversibility ought to follow.

\subsection{Low-Dimensional Cases}

The type of distinct 1-paths $P_1$ is the same as the type of 2-cells $C_2$.
It is $\mathsf{List}\ \mathsf{Unit}$. It is $\N$. We can call these $0$-trees.
The $0$-tree that is the natural number zero has the realization as the unit type.
The $0$-tree that is the natural number $n$ is the pushout of $n$ copies of
the walking morphism. We obtain this by applying some abstract morphism-creating
process to a contractible domain type and a contractible codomain type.

Now we consider the codes of $1$-trees, i.e. $2$-paths $P_2$, i.e.
$3$-cells $C_3$. This is the familiar type of ordered finite trees, whose
internal nodes can have any finite arity from $\N$. Neither internal
nodes nor leaves carry any data. To build the realization of a tree,
we need realizations of $2$-cells. Even though the codes of $1$-paths
and $2$-cells are the same type, the previous paragraph described
realizations of $1$-paths, and realizations of $2$-cells are just a
bit more. Suppose we have a $1$-path $p \in P_1$. The unique $0$-sphere $s \in S_0$ (whose realization is a 2-point set) goes into it. I can also characterize $S^0$ as being an element of
the $0$-spheres that are made up of two compatible $0$-paths.
There is also a canonical $1$-path $c \in C_1$ consisting of a single cell.
We construct a lift of $p$ via
\[\begin{tikzcd}
\sem{L_2(p)}_{C_2} \pbck & \sem p_{P_1} \\
	\sem c_{C_1} & \sem s_{S_0}
	\arrow[ from=1-2, to=1-1]
	\arrow[ from=2-1, to=1-1]
	\arrow[""', from=2-2, to=1-2]
	\arrow["", from=2-2, to=2-1]
\end{tikzcd}\]
where $L_2 : P_1 \to C_2$ is the name of this function that gives us the cell.

Ok, so what's a tree in $P_2$? It's either a leaf or a node with a
list of children each of which is a tree. It has a domain and codomain
that are in $P_1$.

Let's remind ourselves that a pullback in $\mathbf{Poly}$ exists that's like
\[\begin{tikzcd}
S_{n+1} \pbck & P_{n+1} \\
	 C_{n+1} & S_n
	\arrow[ to=1-2, from=1-1]
	\arrow[ to=2-1, from=1-1]
	\arrow[""', to=2-2, from=1-2]
	\arrow["", to=2-2, from=2-1]
\end{tikzcd}\]
\begin{center}\includegraphics[scale=0.50]{spheres-2025-08-03.png}\end{center}
So we can reason that the $C_{n+1} \to S_n$ and $S_{n+1} \to P_{n+1}$ maps
are both isomorphisms on codes. The content of $C_{n+2}$ is determined
by some pullback-esque map
\[\begin{tikzcd}
C_{n+2} \pbck & P_{n+1} \\
	 C_{n+1} & S_n
	\arrow[ to=1-2, from=1-1]
	\arrow[ to=2-1, from=1-1]
	\arrow[""', to=2-2, from=1-2]
	\arrow["", to=2-2, from=2-1]
\end{tikzcd}\]
except that's not really a pullback; the upstairs square on realizations isn't
a pushout, but the `weak pushout' that forms a directed cell. We still
have that $C_{n+2} \to P_{n+1}$ is an isomorphism on codes. This was
already guaranteed by composing the other two isomorphisms from earlier.

\subsection{Paths}

It remains to explain what exactly paths are.
\subsubsection{1-paths}
A 1-path in $P_1$ is a list of unit. We get the realization by gluing together
many copies of the unique element of $C_1$.

\subsubsection{2-paths}
Let's generalize spheres and paths a bit. Say $S$ and $P$
are the spheres and paths whose domain is a single cell, and let $S'$ and $P'$ be the more general
notion of spheres and paths that allow paths on the domain. Maybe I need this only for one
level, not hereditarily.

We define the codes of $P_2$ to be the inductive type of trees; either a leaf, or a node that knows
the list of its children. What's the realization of a node? Well, we have a list of $P_2$ for the children.
Knowing that I have a boundary map $\partial : P_2 \to S_1$, this is enough information to
horizontally glue their realizations together, yielding something in $P_2'$. Then I vertically
compose with the appropriate element of $C_2$ to get the full realization.
\subsubsection{3-paths}
A path in $P_3$ is something like a leaf over a chosen $C_2$, or it's a node, with some
extra data. That extra data is for starters a choice of an element in $C_3$, whose
realization we're going to glue to something. Running out of steam here.
\subsection{Operads}
Consider that trees are the free $T$-operad for $T$ being the list monad.

Recall a few things. Let $T$ be a cartesian monad on $\C$. A $T$-multicategory
is a monoid whose carrier is the span $C_0 \gets C_1 \to TC_0$. It has `operations'
in $C_1$, and `types' in $C_0$. The span composed monadically with itself tells
us which pairs of $C_1 \x TC_1$ that are composable. The monoid object tells
us that composition is associative. A $T$-operad is when $C_0$ is the terminal
object of $\C$.

So if we take $\C$ to be sets and $C_0$ to be the singleton set, and $T$ is the list
monad, then the types of operations are just arities. The free $T$-operad has trees
with $n$ leaves for the arity $n$. Associativity and unit laws means that trees compose
as expected.

For higher trees, what if the objects $C_0$ are the set of all arities, and
$TC_0$ is trees? No, I can't make stuff typecheck that way either.

\section{Braids}

Going back to the idea of trying to combine parametricity and HoTT to
get braid groups.

A circled set is a set together with a map from $S^1$.
Given circled sets $X, Y$, we can define $X \tensor Y$
by taking the pushout of the carriers of $X$ and $Y$ identifying
the basepoints of their respective circles, and letting the
circle of the tensor product be the composition of the two different
loops. Let $\rightsquigarrow$ be the evident notion of
circled set homomorphism, where we map carriers and preserve the circle.

The conjecture is that parametric functions of type
\[ ( X : \mathsf{CSet} )
\to (\overbrace{X \otimes \cdots \otimes X}^{\textstyle n\hbox{ times}})
\rightsquigarrow (\overbrace{X \otimes \cdots \otimes X}^{\textstyle n\hbox{ times}})
\]
are exactly braids on $n$ strands.

\subsection{Braids on One Strand}
I think I at least understand how to show the degenerate case of one strand,
which is a good start. We suppose we have a function
\[ j :  ( X : \mathsf{CSet} )
\to X \rightsquigarrow X
\]
which is the same thing as
\[ j :  ( X : \mathsf{Set} ) (\eta : S^1 \to X) \to
(h : X \to X) \x (h \o \eta = \eta)
\]
So we can temporarily set aside the homomorphism condition and analyze what
the first component of $j$, namely
\[ j_1 :  ( X : \mathsf{Set} ) (\eta : S^1 \to X) (x : X) \to X \]
could possibly be. For it is also a parametric function.
Its parametricity free theorem says
\[  ( X_1\ X_2 : \mathsf{Set} ) ({\sim} : X_1 \to X_2 \to \mathsf{Set}) \]
\[ (\eta_1 : S^1 \to X_1) (\eta_2 : S^1 \to X_2) (\_ : (s : S^1) \to \eta_1\ s \sim \eta_2\ s)\]
\[(x_1 : X_1) (x_2 :  X_2) (\_ : x_1 \sim x_2)\]
\[  \to j_1\ X_1\ \eta_1\ x_1 \sim j_1\ X_2\ \eta_2\ x_2\]
and if we pick a function $f : X_1 \to X_2 $ to instantiate the relation $\sim$, we get
\[  ( X_1\ X_2 : \mathsf{Set} ) (f : X_1 \to X_2 ) \]
\[ (\eta_1 : S^1 \to X_1) (x_1 : X_1) \]
\[  \to f(j_1\ X_1\ \eta_1\ x_1) = j_1\ X_2\ (f \o \eta_1)\ (f\ x_1)\]
And then if we pick $X_1 = 1 + S^1$ and say $\eta_1 = \binr$ and $x_1 = \binl *$, we get
\[  ( X_2 : \mathsf{Set} ) (f : 1 + S^1 \to X_2) \]
\[  \to f(j_1\ (1 + S^1)\ \binr\ (\binl *)) =  j_1\ X_2\ (f \o \binr)\ (f\ (\binl *))\]
Now if we say $f$ comes from case analyzing and yielding either $x_2 : X_2$ or $\eta_2 : S^1 \to X_2$ we have
\[  ( X_2 : \mathsf{Set} ) (x_2 : X_2) (\eta_2 : S^1 \to X_2) \]
\[  \to (\bcase j_1\ (1 + S^1)\ \binr\ (\binl *) \bof\]
\[ \binl * \imp x_2 \celse \binr s \imp \eta_2\ s) =  j_1\ X_2\ \eta_2\ x_2\]
So we discover there are two sorts of functions $j_1\ X_2\ \eta_2\ x_2$ can
be, depending on what $j_1\ (1 + S^1)\ \binr\ (\binl *)$ evaluates to.
Either it's just the identity map on $X_2$, or it's a fixed point in the
loop that lies in $X_2$ via $\eta_2$.

We want to reason that the latter case is impossible, because of the nontriviality
of $S^1$. That is, specifically because for any $s$, the constant map $\lambda x . s : S^1 \to S^1$ is distinct from the identity map $S^1 \to S^1$.
So suppose towards a contradiction that there exists $s_0$ such that
\[ j_1\ (1 + S^1)\ \binr\ (\binl *) = \binr s_0\]
This means
\[  ( X_2 : \mathsf{Set} ) (x_2 : X_2) (\eta_2 : S^1 \to X_2) \]
\[  \to \eta_2\ s_0 =  j_1\ X_2\ \eta_2\ x_2\]
we can let $X_2 = S^1$ and let $\eta_2 = \rid$, and we get
\[  (x_2 : S^1) \to  s_0 =  j_1\ S^1\ \rid\ x_2\]
But recall that we're supposed to have $h \o \eta = \eta$, i.e.
\[ ( s: S^1) \to h\ (\eta\ s) = \eta\ s\]
and $h = j_1\ S^1\ \rid$ and $\eta = \rid$ in this case, so
\[ ( s: S^1) \to \ j_1\ S^1\ \rid\  s =  s\]
So we find that $j_1\ S^1\ \rid$ is both the constant $s_0$ function, and the identity function, a contradiction.

\subsection{Braids on Two Strands}
Now let's start thinking about
\[ ( X : \mathsf{CSet} )
\to (X \otimes X) \rightsquigarrow (X \otimes X)
\]
which is
\[ m : ( X : \mathsf{Set} ) (\eta : S^1 \to X) (x : X \otimes X) \to X \otimes X\]
\[ p : ( X : \mathsf{Set} ) (\eta : S^1 \to X) (s : S^1) \to m\ X\ \eta\ (\eta_{X \otimes X} s) = \eta_{X \otimes X} s\]
My tentative plan is to analyze $m$ in isolation, and then `filter out' the possible
functions that could satisfy $m$'s type by looking at $p$.

We can further break down $m$ by deconstructing $X \otimes X$ on the left,
since it's a pushout. That is, having an $m$ as above is equivalent to having
\[ m_1 : ( X : \mathsf{Set} ) (\eta : S^1 \to X) (x : X) \to X \otimes X\]
\[ m_2 : ( X : \mathsf{Set} ) (\eta : S^1 \to X) (x : X) \to X \otimes X\]
together with a path
\[ ( X : \mathsf{Set} ) (\eta : S^1 \to X)
 \to m_1\ X\ \eta\ (\eta\ \mathsf{base})
=  m_2\ X\ \eta\ (\eta\ \mathsf{base})
\]

\subsubsection{Mapping One Strand into Two}
So the next thing for me to analyze is what $m_1, m_2$ can possibly be.
The parametricity free theorem for $m_1$ is like
\[  ( X_1\ X_2 : \mathsf{Set} ) ({\sim} : X_1 \to X_2 \to \mathsf{Set}) \]
\[ (\eta_1 : S^1 \to X_1) (\eta_2 : S^1 \to X_2) (\_ : (s : S^1) \to \eta_1\ s \sim \eta_2\ s)\]
\[(x_1 : X_1) (x_2 :  X_2) (\_ : x_1 \sim x_2)\]
\[  \to m_1\ X_1\ \eta_1\ x_1 \sim m_1\ X_2\ \eta_2\ x_2\]
where that last $\sim$ denotes the implied relation
of type  $(X_1 \otimes X_1) \to (X_2 \otimes X_2) \to \mathsf{Set}$ that
arises from the base relation $X_1 \to X_2 \to \mathsf{Set}$. Then functional
instantiation should give me
\[  ( X_1\ X_2 : \mathsf{Set} ) (f : X_1 \to X_2 ) \]
\[ (\eta_1 : S^1 \to X_1) (x_1 : X_1) \]
\[  \to (f\otimes f)(m_1\ X_1\ \eta_1\ x_1) = m_1\ X_2\ (f \o \eta_1)\ (f\ x_1)\]
where $f \otimes f$ is the hopefully evident functorial lifing of $f$ to
$(X_1 \otimes X_1) \to (X_2 \otimes X_2)$. Now comes the time that
I need to make a clever choice of $X_1$ as some inductive datatype that represents
the type I hope describes the possible functions.

I'm going to guess that there are three possibilities: send $x$ to the left
2-cell, send $x$ to the right 2-cell, or send everything to a constant point
that lies on the two joined circles. So I'm setting $X_1$ to $1 + 1 + S^1 \wedge S^1$.
Let $W = S^1 \wedge S^1$.
I think I send $\eta_1$ to $\eta_{W}$, the big loop around the wedge
of circles. I think I send $x_1$ to $x_{W}$, the basepoint of the wedge
of circles. So now I have
\[  (X_2 : \mathsf{Set} ) (f : 1 + 1 + W \to X_2 ) \]
\[  \to (f\otimes f)(m_1\ (1 + 1 + W)\ \eta_W\ x_W) = m_1\ X_2\ (f \o \eta_W)\ (f\ x_W)\]
I think I want to quantify over yet another $(X : \mathsf{Set}) (\eta : S^1 \to X) (x : X)$
and instantiate $X_2 := X \otimes X$ and
\[ f (\binj_1\ *) = \binl_{X\otimes X} x\]
\[ f (\binj_2\ *) = \binr_{X\otimes X} x\]
\[ f (\binj_3 (\binl( s: S^1))) = \binl_{X\otimes X} (\eta\ s)\]
\[ f (\binj_3 (\binr( s: S^1))) = \binr_{X\otimes X} (\eta\ s)\]
and then I wind up with
\[ (X : \mathsf{Set}) (\eta : S^1 \to X) (x : X) \]
\[ \cdots = m_1\ (X\otimes X)\ (f \o \eta_W)\ (f\ x_W)\]
No that's not right, I need $m_1$ to be applied to a general $X$. Hmm.
\end{document}
