\documentclass{article}
\input{theorem}
\input{prooftree}
\usepackage{stmaryrd}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\coe{\mathsf{coe}}
\def\bpush{\mathbf{push}}
\def\bpull{\mathbf{pull}}

\def\wo{\setminus}
\def\fA{\mathsf{A}}
\def\fC{\mathsf{C}}
\def\fX{\mathsf{X}}
\def\ff{\mathsf{f}}
\def\fm{\mathsf{m}}
\def\rspan{\mathsf{Span}}
% \def\El#1{\mathsf{El}({#1})}
\def\El#1{\ulcorner{#1}\urcorner}
\def\quote#1{{\ulcorner {#1} \urcorner}}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}
\def\mor#1#2{#1 \to \underline{#2}}

\def\ridp{\mathsf{idp}}
\def\ssem#1{\langle\!\langle{#1}\rangle\!\rangle}

\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{orange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.9}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=orange,colback=orange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{\mathbin{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\munit{I}
\def\tt{{\mathsf t}}
\def\rr{{\mathsf r}}
\def\ii{{\mathbb I}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{{\mathsf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\frommaps{\ar[from=uu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\frommapt{\ar[from=uuu,mapsto,shorten <=2em, shorten >=2em, crossing over]}
\def\C{\mathbf{C}}
\def\G{\mathbf{G}}
\def\S{\mathbf{S}}
\def\D{\mathbf{D}}
\def\E{\mathbf{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\tri{\triangleright}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\null{\emptyset}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}



\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\def\tensor{\otimes}
\def\htensor{\mathrel{\hat\otimes}}
\def\lol{\multimap}
\def\hlol{\mathrel{\hat\multimap}}
\def\wtf{{\color{red}???}}

\def\re{\mathbf{E}}
\def\sh{\sharp}
\def\shp{\mathrel{\sharp}}
\def\zero{\texttt{0}}
\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}

\section{More about Syntax for (Co)Ends}

Dan reminded me that, naturally, it'd be sensible to hope for a
path-induction-like elim rule for $\hom$.

\[
\erule
{\Delta, \gamma : \C ; \Gamma \prov e : A \qquad \Delta / \alpha - \C, \beta + \C; \Gamma \prov A : \rtype}
{\Delta, \alpha : \C, \beta : \C;\Gamma, h : \hom(\alpha, \beta) \prov \coe_h e : A}
\]

The thought I had about dependency and variance before went like this:

First consider the simply-typed case. If we have $A : \C \to \rset$ and we have
$B : \C^\op \to \rset$, then we have $B \to A : \C \to \rset$.
Syntactically, we would say
\[
\erule
{ \alpha + \C \prov A : \rtype \qquad  \alpha - \C \prov B : \rtype}
{ \alpha + \C \prov B \to A : \rtype}
\]
or more generally
\[
\erule
{\Delta \prov A : \rtype \qquad \Delta^\op \prov B : \rtype}
{\Delta \prov B \to A : \rtype}
\]
In the dependent case, suppose we have $B : \C^\op \to \rset$
and $A$ is a functor-ish thing (probably a fibration somehow, although I don't
understand how yet)  whose `object part'
is a function $(c : \C) \to B(c) \to \rset$.
By functor-ish what I mean is that for every $f : c \to d$
and every $y: B(d)$, then `the morphism part' of $A$ tells us how to
\[ A_{fy} :  A_c(B_f(y)) \to A_d(y)\]
and respects composition and identities appropriately.

Given these ingredients, we can indeed make a covariant functor, call it $(x : B) \to A$,
in $\C \to \rset$. Given an object $c$, we give $(x : B_c) \to A_c(x)$.
Given a morphism $f : c \to d$, we need to build something
\[((x : B_c) \to A_c(x)) \to ((y : B_d) \to A_d(y))\]
and we do this with the usual post- and pre-composition dance, just fixed up to
involve dependency:
\[\lambda \alpha : ((x : B_c) \to A_c(x)) .\lambda y : B_d .  A_{fy}(\alpha(B_f(y)))\]

So what have we shown, in syntax?
\[
\erule
{\alpha + \C; x : B \prov A : \rtype \qquad \alpha - \C \prov B : \rtype}
{\alpha + \C \prov (x : B) \to A : \rtype }
\]
and I could imagine generalizing this to
\[
\erule
{\Delta; x : B \prov A : \rtype \qquad \Delta^\op \prov B : \rtype}
{\Delta \prov (x : B) \to A : \rtype }
\]

But can I support additional assumptions in $\Gamma$?

Suppose $B$ is itself dependent on some other regular (i.e. in $\Gamma$) variable
$z : C$. That means
$B$'s object part is, what, $(c : \C^\op) \to C(z) \to \rset$?

Wait, do I even know that ambivariant functors $\C\x\C^\op \to \rset$ admit
full $\Pi$ types?

Suppose I have
\[\Gamma : \C \x \C^\op \to \rset \]
\[A : (\delta : \C)(\delta' : \C^\op) (\gamma : \Gamma(\delta', \delta)) \to \rset\]
\[B : (\delta : \C)(\delta' : \C^\op) (\gamma : \Gamma(\delta', \delta))
(\alpha : A(\delta, \delta', \gamma)) \to \rset\]
this is wrong, because it's not using $A$ as a contravariant functor. Also wrong is
\[B : (\delta : \C)(\delta' : \C^\op) (\gamma : \Gamma(\delta', \delta))
(\alpha : A(\delta', \delta, \gamma)) \to \rset\]
because then there's a type mismatch of $\gamma$.

Should I be asking for a $\gamma : \Gamma(\delta', \delta)$ {\em and}
a $\gamma' : \Gamma(\delta, \delta')$? No, I can't do that, because I can't
apply $\Gamma$ to those arguments.
%% More generally, we would expect well-formed contexts to be contravariant functors
%% functors out of $\Delta$; so still in the case of singleton $\Delta$,
%% we expect the well-formedness $\alpha + \C \prov \Gamma  \rctx$ to mean
%%  $\sem\Gamma : \C^\op \to \rset$ and $\alpha + \C ; \Gamma \prov A : \rtype$
%% to mean that $\sem A$ is a functor-ish thing whose object part is
%% \[(c : \C) \to \sem \Gamma(c) \to \rset \]
%% and whose morphism part is
%% \[(f : c \to d) (\gamma : \sem \Gamma(d)) \to \sem A_c (\sem \Gamma(\gamma)) \to \sem A_d(\gamma) \]

%% So we might expect a $\Pi$-intro-shaped variance rule to look like
%% \[
%% \erule
%% {\Delta^\op; \Gamma \prov A : \rtype \qquad \Delta ; \Gamma \prov B : \rtype}
%% {\Delta; \Gamma \prov (x : A) \to B}
%% \]
%% $\ldots$ errr nope, I generalized too fast, again. $\Gamma$ appearing under both $\Delta$
%% and $\Delta^\op$ is weird.
\end{document}
