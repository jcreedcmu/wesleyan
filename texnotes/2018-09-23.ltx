\documentclass{article}
%\usepackage[tmargin=0.15in, bmargin=0.15in]{geometry}
\input{theorem}
\input{prooftree}
\usepackage{relsize}
\usepackage{stmaryrd}
\usepackage{latexsym}
\usepackage{yfonts}
\usepackage{amsmath}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{tikz}
\usetikzlibrary{calc,arrows,cd,decorations.pathreplacing}
\usetikzlibrary{decorations.pathmorphing}
\usepackage{tcolorbox}
\tcbuselibrary{breakable}
\usepackage{listings}
\lstset{basicstyle=\ttfamily\footnotesize,breaklines=true}

\def\inh#1{\textcolor{blue}{#1}}
\def\smooth{\mathrel{\mathsf{smooth}}}
\def\zed{\emptyset}
\def\lint{{\textstyle\int}}
\def\isopen{\textcolor{orange}{\mathlarger{\mathlarger{\mathlarger{\textbf ?}}}}}
\def\isok{\textcolor{green}{\mathlarger{\mathlarger{\mathlarger{\checkmark}}}}}
\def\isbad{\textcolor{red}{\mathlarger{\mathlarger{\mathlarger{\x}}}}}

\def\mhave{\textcolor{blue}{\hbox{have}}}
\def\mwant{\textcolor{orange}{\hbox{want}}}

\def\chave{\eqno\mhave}
\def\cset{\eqno \textcolor{green}{\hbox{set}}}
\def\cwant{\eqno\mwant}
\def\gol{\sqsubset}
\def\gor{\sqsupset}

\def\sp{\bullet}
\def\ot{\leftarrow}
\def\prequiv{\dashv\vdash}
\def\fdom{{\mathbf{d}f}}
\def\fcod{{\mathbf{e}f}}
\def\fidom{\mathbf{\bar d}f}
\def\ficod{\mathbf{\bar e}f}

\def\thn{\mathrel|}
\def\coe{\mathsf{coe}}
\def\bpush{\mathbf{push}}
\def\bpull{\mathbf{pull}}

\definecolor{blu}{rgb}{0.1,0.5,1}
\definecolor{orng}{rgb}{1,0.5,0.3}

\def\wo{\setminus}
\def\fA{\mathsf{A}}
\def\fC{\mathsf{C}}
\def\fX{\mathsf{X}}
\def\ff{\mathsf{f}}
\def\fm{\mathsf{m}}
\def\rspan{\mathsf{Span}}
% \def\El#1{\mathsf{El}({#1})}
\def\El#1{\ulcorner{#1}\urcorner}
\def\U{\mathsf{U}}
\def\uu{\mathsf{u}}
\def\uni{\U}
\def\mor#1#2{#1 \to \underline{#2}}

\def\ridp{\mathsf{idp}}
\def\ssem#1{\langle\!\langle{#1}\rangle\!\rangle}

\definecolor{lred}{rgb}{0.95,0.8,0.8}
\definecolor{cyan}{rgb}{0.80,0.95,0.95}
\definecolor{lorange}{rgb}{0.95,0.90,0.80}
\definecolor{bluegray}{rgb}{0.6,0.6,0.85}
\definecolor{lgray}{gray}{0.8}
\newtcolorbox{declbox}{colframe=lred,colback=lred,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{thmbox}{colframe=cyan,colback=cyan,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{defnbox}{colframe=lorange,colback=lorange,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}
\newtcolorbox{tangentbox}{colframe=lgray,colback=lgray,grow to right by=-10mm,grow to left by=-10mm,
boxrule=0pt,boxsep=0pt,breakable}

\input{linear}
\def\rpath#1{[#1]}
\def\rfst{\mathsf{fst}\,}
\def\rsnd{\mathsf{snd}\,}
\def\bunfold{\mathbf{unfold}}
\def\bfold{\mathbf{fold}}
\def\susp#1{\langle {#1} \rangle}
\def\ssusp#1{\langle\!\langle {#1} \rangle\!\rangle}
\def\dto{\mathrel{\dot\to}}
\def\dns{{\downarrow}}
\def\ups{{\uparrow}}
\def\sprov{\Vdash}
\def\signat{{\color{red}\Sigma}}
\def\ep#1{\underline{#1}}
\def\wat{\mathbin{@}}
\def\wwat{\mathbin{\underline\wat}}
\def\cn{{:}}
\def\dv{{\div}}
\def\ww{{\mathsf w}}
\def\base{{\textfrak b}}

\def\N{{\mathbb N}}
\def\Z{{\mathbb Z}}
\def\munit{I}
\def\tt{{\mathsf t}}
\def\ii{{\mathbb I}}
\def\T{\mathbb{T}}
\def\tw{\mathsf{Tw}}
\def\sw#1{^{#1}_{#1}}
\def\TP{\mathbf{TPre}}
\def\pp{\textsf{\textbf p}}
\def\nn{{\mathsf n}}
\def\PP{\textsf{\textbf P}}
\def\NN{\textsf{\textbf N}}
\def\zz{{\mathsf z}}
\def\sem#1{[\![#1]\!]}
\def\usem#1{\lceil\!\!\lceil{#1}\rceil\!\!\rceil}
\def\zem#1{\langle\!\langle#1\rangle\!\rangle}
\def\col#1{{\mathsf{C}}_{#1}}
\def\lax{\mathop\bigcirc}
\def\rjust{\mathsf{just}}
\def\rcvt{\mathsf{cvt}}
\def\rtype{\mathsf{type}}
\def\rdtype{\mathsf{disc}}
\def\rkind{\mathsf{kind}}
\def\rmode{\mathsf{mode}}
\def\rprel{\mathbf{Prel}}
\def\rrfam{\mathbf{Rfam}}
\def\rset{\mathbf{Set}}
\def\rfinset{\mathbf{FinSet}}
\def\rrel{\mathbf{Rel}}
\def\rcat{\mathbf{Cat}}
\def\rfam{\mathbf{Fam}}
\def\binj{\mathbf{inj}}
\def\rid{\mathsf{id}}
\def\rtrue{\mathrel\mathrm{true}}
\def\pbck{\ar[dr, phantom, pos=0, "\lrcorner"]}
\def\bpbck{\ar[ddrr, phantom, pos=0, "\lrcorner"]}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}
\def\lpar{\bindnasrepma}
\def\lamp{\binampersand}
\def\btwo{\mathbf{2}}
\def\bone{\mathbf{1}}

\newarrow {Equiv} =====
\def\FinSet{\mathbf{FinSet}}
\def\x{\times}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}
\def\mapt{\ar[ddd,mapsto,shorten <=2em, shorten >=2em]}
\def\A{\mathbf{A}}
\def\B{\mathbf{B}}
\def\C{\mathbf{C}}
\def\G{\mathbf{G}}
\def\D{\mathbf{D}}
\def\DD{\mathbb{D}}
\def\E{\mathbf{E}}
\def\M{\mathbf{M}}
\def\pair#1#2{\langle#1,#2\rangle}
\def\ltri{{\lhd}}
\def\rtri{{\rhd}}
\def\tri{\rhd}
\def\ll{{<}}
\def\rr{{>}}
\def\cc{\mathsf{c}}
\def\dd{\mathsf{d}}
\def\o{\circ}
\def\rctx{\,\mathsf{ctx}}
\def\rdctx{\,\mathsf{dctx}}
\def\del{\partial}
\def\also#1{\ \textcolor{blue}{\celse #1}}
\newcounter{nodemaker}
\setcounter{nodemaker}{0}
\def\twocell#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift left=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift right=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\twocellswap#1#2{%
  \global\edef\mynodeone{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \global\edef\mynodetwo{twocell\arabic{nodemaker}}%
  \stepcounter{nodemaker}%
  \ar[#1,phantom,shift right=3,""{name=\mynodeone}]%
  \ar[#1,phantom,shift left=3,""'{name=\mynodetwo}]%
  \ar[Rightarrow,#2,from=\mynodeone,to=\mynodetwo]%
}
\def\maps{\ar[dd,mapsto,shorten <=2em, shorten >=2em]}



\def\fcont{^{f t_f}_{\cdot t^f}}
\def\fco{_{f t_f}^{\cdot t^f}}
\def\fcontf{^{f t_f}_{f t^f}}
\def\fcof{_{f t_f}^{f t^f}}
\def\deco{^{dt^e_d}_{et^d_e}}
\def\decont{^{et^d_e}_{dt^e_d}}

\def\fcontbot{^{f }_{\cdot t^f}}
\def\fcobot{_{f t_f}}
\def\fconttop{^{f t_f}}
\def\fcotop{_{f}^{\cdot t^f}}

\author{Jason Reed}
\definecolor{fib}{HTML}{ff7f00}
\definecolor{green}{HTML}{007f00}
\definecolor{red}{HTML}{df3f3f}
\definecolor{opfib}{HTML}{007fff}

% For lightening colors I used
% http://trycolors.com/ 6 parts white to 1 part color
\definecolor{opfibl}{HTML}{DBEDFF}
\definecolor{greenl}{HTML}{DBEDDB}
\definecolor{redl}{HTML}{FAE4E4}
\def\njudge#1{\fcolorbox{opfib}{white}{#1}}
\def\nrule#1{\fcolorbox{white}{opfibl}{#1}}
\def\neqn#1{\fcolorbox{white}{redl}{#1}}



\def\judge#1{\vskip 2em\noindent \njudge{$#1$}\vskip 0.5em\noindent}
\def\rule#1{\vskip 2em \noindent \nrule{$#1$}\vskip 0.5em\noindent}
\def\eqn#1{\vskip 2em \noindent \neqn{$#1$}\vskip 0.5em\noindent}
\def\prof{\nrightarrow}
\def\tensor{\otimes}
\def\htensor{\mathrel{\hat\otimes}}
\def\lol{\multimap}
\def\hlol{\mathrel{\hat\multimap}}
\def\wtf{{\color{red}???}}

\def\re{\mathbf{E}}
\def\sh{\sharp}
\def\shp{\mathrel{\sharp}}
\def\zero{\texttt{0}}
\def\doubs#1{{}^{{#1}^\op}_{\x {#1}}}
\def\doub#1{{#1}^\op \x {#1}}

\begin{document}

\def\
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}


\section{Remembering Some Stuff About Directed Cubes}

\def\bu{{\bullet}}
Say we have $0$-cells that are bitstrings.
Then $1$-cells are strings that are mostly bits, except
for one occurrence of $\bu$.
\[\begin{tikzcd}
  00 \ar[r, "0\bu"]\ar[d, "\bu0"']& 01 \ar[d, "\bu1"] \ar[dl, phantom, "\swarrow_{\bu\bu}"]\\
  10 \ar[r, "1\bu"']& 11
\end{tikzcd}\]
Generally $n$-cells are strings with $n$ occurrences of $\bu$.
The $1$-cell named $ b {\bu}  c$
goes from $ b 0  c$ to $ b 1  c$, where $b$ and $c$ are aribtrary bitstrings.

The $2$-cell named $b \bu c \bu d$ goes
$$b0c\bu d ; b\bu  c1 d\to b\bu c 0d ;  b1c \bu d$$
But I guess there's a general principle of interposing more non-$\bu$ symbols.
So I might as well say that the prototypical arrow $\bu$ goes $0 \to 1$
and the prototypical $2$-cell $\bu \bu$ goes
$$0\bu  ; \bu  1 \to \bu  0 ;  1 \bu $$
Now let's name the $3$-cell.
\[\begin{tikzcd}
  000 \ar[r, "0\bu0"]\ar[d, "\bu00"']& 01 \ar[d, "\bu10"] \ar[dl, phantom, "\swarrow_{\bu\bu 0}"]\\
  100 \ar[r, "1\bu0"']& 110
\end{tikzcd}\]

\[\begin{tikzcd}
  000 \ar[dr, "00\bu" description, orange]\ar[rrr, "0\bu0"]\ar[ddd, "\bu00"', blue]
&&& 010 \ar[ddd, "\bu10"] \ar[dl, "01\bu" description]\\
%
&  001 \ar[r, "0\bu1", orange]\ar[d, "\bu01"']
& 011 \ar[d, "\bu11", orange] \\
&  101 \ar[r, "1\bu1"']
& 111
%
\\
  100 \ar[rrr, "1\bu0"', blue]\ar[ur, "10\bu" description]
&&& 110\ar[ul, "11\bu" description, blue]
\end{tikzcd}\]
Now the domain and codomain 0-cells of this situation are $000$ and $111$.
The domain and codomain 1-cells are
$$00\bu ; 0\bu 1 ; \bu 11 \to \bu 00 ; 1 \bu 0 ; 11 \bu$$
There should be two ways of achieving this, the domain, which goes through
010, and the codomain, which goes through 101.
The way through 010, call it the domain, is:
$$0 \bu \bu ; \bu 1 \bu ;  \bu \bu 0$$

The way through 101, call it the codomain is:
$$\bu \bu 1 ; \bu 0 \bu ; 1 \bu \bu$$
Actually, to be more honest, I should horizontally include some identity arrows on
either side of these vertical compositions.

I'm dealing with a 3-cell
$$(0 \bu \bu * \bu 11) ; (0\bu 0 * \bu 1 \bu) ; ( \bu \bu 0 * 11 \bu)$$
$$\to$$
$$(00\bu * \bu \bu 1) ; (\bu 0 \bu * 1 \bu 1) ; (\bu 0 0 * 1 \bu \bu)$$

\section{What's the pattern}
We want to say an $n$-cell $b$ (with $n$ copies of $\bu$ in it) sits inside the domain
or codomain of $c$ (which is $b$ with one bit replaced by a $\bu$). Or more
to the point we want to derive the whole domain and codomain from $c$.

The immediate domain and codomain of an $n$-cell are sequences $(n-1)$-cells, of
length $n$.

$$\dom(i) = [p_i/i]\bu^n\qquad \cod = \mathsf{rev} (\mathsf{flip} \dom)$$
$$n \in \{0, \ldots, n-1\}$$
$$p_i = \begin{cases}0&i\hbox{ even} \\ 1&i\hbox{ odd} \end{cases}$$

So what's the 4-dimensional case? I predict $\bu^4$ should have shape
$$0\bu\bu\bu ; \bu 1 \bu\bu ; \bu\bu 0\bu ; \bu\bu\bu 1$$
$$\to \bu\bu\bu 0 ; \bu \bu 1\bu ; \bu 0 \bu \bu ; 1\bu\bu\bu $$
So if $\bu^3$ has shape
$$0 \bu \bu ; \bu 1 \bu ;  \bu \bu 0 \to \bu \bu 1 ; \bu 0 \bu ; 1 \bu \bu$$
then I'm going to sum up the contributions from the domain ignoring
order and get
$$00 \bu \bu , 0\bu 1 \bu ,  0\bu \bu 0 \to 0\bu \bu 1 , 0\bu 0 \bu , 01 \bu \bu$$
$$01 \bu \bu , \bu 11 \bu ,  \bu 1\bu 0 \to \bu 1 \bu 1 , \bu 10 \bu , 1 1\bu \bu$$
$$0 \bu 0\bu , \bu 1 0\bu ,  \bu \bu0 0 \to \bu \bu0 1 , \bu 0 0\bu , 1 \bu0 \bu$$
$$0 \bu \bu 1, \bu 1 \bu 1,  \bu \bu 0 1\to \bu \bu 1 1, \bu 0 \bu 1, 1 \bu \bu 1$$
cancelling out things that are both consumed and produced I get
$$00\bu\bu, 0\bu1\bu,  0\bu\bu0 \to  $$
$$ \bu11\bu, \bu1\bu0 \to 11\bu\bu$$
$$ \bu\bu00 \to \bu00\bu,1\bu0\bu$$
$$ \to \bu\bu11,\bu0\bu1,1\bu\bu1$$
Hm, time to write some code, as I'm starting to distrust my ability to
keep doing this by hand without making mistakes.

\section{Having Written Some Code}

The pattern is that the $k^{th}$ boundary of $*^n$ is somehow giving us
$n \choose k$ and some choices of bit values. In the example above,
I'm looking at $4\choose 2$ and getting out
\[\dom = 00\bu\bu, 0\bu1\bu,  0\bu\bu0, \bu11\bu, \bu1\bu0, \bu\bu00\]
\[\cod =  11\bu\bu,
  \bu00\bu,1\bu0\bu,
 \bu\bu11,\bu0\bu1,1\bu\bu1\]
I have to choose 2 out of the 4 positions to be bits rather than $\bu$,
and having done that the bit values are determined. I flip bits every time
I encounter a $\bu$ from the left to right, and I initialize with $0$ if
I'm talking about the domain, $1$ if codomain.

\section{Ordering}

The composition order of the $(n-1)$-cells in the boundary of $\bu^n$ is clear.
The 1-dimensional domain of $\bu^5$ for instance is
\[ 0000\bu; 000\bu1; 00\bu11; 0\bu111; \bu1111 \]
and those must be composed in that order. Its codomain at that dimension is
\[ \bu 0000; 1\bu000; 11\bu 00; 111 \bu 0;  1111\bu \]
and must be composed in that order. Let's look at the things belonging to the
domain of the 2-dimensional domain of $\bu^4$.
\vfil\eject
\[a: 00\bu\bu/ b: 0\bu1\bu/  c: 0\bu\bu0/ d: \bu11\bu/ e: \bu1\bu0/ f: \bu\bu00\]
For each of these $\bu^2$ occurrences, it has domain $0\bu, \bu1$ and codomain
$1\bu, \bu0$.
So hopefully I can line these up visually in a way that makes sense to me and say that the domain elements of these are
\[000\bu/ 001\bu/  00\bu0/ 011\bu/ 01\bu0/ 0\bu00\]
\[00\bu1/ 0\bu11/  0\bu10/ \bu111/ \bu110/ \bu100\]
and the codomain elements of these are
\[001\bu/ 011\bu/  01\bu0/ 111\bu/ 11\bu0/ 1\bu00\]
\[00\bu0/ 0\bu10/  0\bu00/ \bu110/ \bu100/ \bu000\]

\noindent
$ 001\bu \prov a \le b$\\
$ 00\bu0 \prov a \le c$\\
$ 011\bu \prov a \le d$\\
$ 01\bu0 \prov c \le e$\\
$ 0\bu00 \prov c \le f$\\
$ 0\bu10 \prov b \le c$\\
$ \bu110 \prov d \le e$\\
$ \bu100 \prov e \le f$

Okay, so I think this is a sufficient counterexample to show that the composition
order is not fixed; $c$ and $d$ are concurrently applicable to
\[00\bu0 ; 0\bu10; 011\bu; \bu111\]


\section{Some Thoughts about Matroids}

The usual definition of matroids in terms of a closure operator goes like this.

\def\sq{\square}
A matroid is a set $E$ together with an operation $\sq : \ps E \to \ps E$
which is a closure operator, i.e.
\begin{enumerate}
\item $X  \subseteq Y \imp \sq X  \subseteq \sq Y$
\item $X \subseteq \sq X$
\item $\sq\sq X \subseteq \sq X$
\end{enumerate}
and which satisfies MacLane-Steinitz exchange, i.e.
\begin{quote}
(E)$\ $ For any $X, a, b$, if
$a \in \sq (X + b) \setminus \sq X$,
then
$b \in \sq (X + a) \setminus \sq X$.
\end{quote}
writing $X + a$ to mean $X \cup \{a\}$.

I want to claim that an alternative --- and more constructively
pleasant --- definition is (classically) equivalent to this one.
I say that the {\em constructive exchange} property is
\begin{quote}
(CE)$\ $  For any $X, a, b$, if
$a \in \sq (X + b)$,
then either
$b \in \sq (X + a)$ or $a \in \sq X$.
\end{quote}

\begin{lemma}(LEM)
Assuming $\sq$ is a closure operator, then $(E)$ implies $(CE)$.
\end{lemma}

\begin{proof}
Suppose $(E)$. Let $X, a, b$ be given, suppose $a\in \sq(X + b)$.
By LEM, either $a \in \sq X$ or not. If it does, we're done.
So assume $a \not\in\sq X$. Hence the premise of $(E)$ is satisfied,
and we get $b\in \sq (X + a)\setminus \sq X$, which is stronger
than the required conclusion.
\cqed
\end{proof}

\begin{lemma}
Assuming $\sq$ is a closure operator, then $(CE)$ implies $(E)$.
\end{lemma}

\begin{proof}
Suppose $(CE)$. Let $X, a, b$ be given, suppose $a\in \sq(X + b) \setminus \sq(X)$.
Well, $a \in \sq(X + b)$ so the premise of $(CE)$ is satisfied, and we learn
that either $a \in \sq(X)$ or $b \in \sq(X + a)$. But it can't be that $a\in \sq(X)$
by assumption. So definitely $b\in \sq(X + a)$. We must show $b\not\in \sq X$.
Suppose $b\in \sq X$. We claim that $\sq (X + b) = \sq X$, which would mean
we're done, since $a \in \sq (X + b) = \sq X$ would be a contradiction.

Why is this? by monotonicity
$\sq X \subseteq \sq (X + b)$, and conversely
\[\sq (X + b) \subseteq \sq (\sq X + b) = \sq \sq X = \sq X\]
\cqed
\end{proof}

\subsection{Generalizing}

A thing that occurs to me is that augmenting to force membership of
individual elements in sets is itself a closure operation. For every
$a \in X$ there is a closure $F_a : \ps E \to \ps E$ which is just
$\dash \cup \{a\}$. So what $(CE)$ is really saying is

\begin{quote}
For any $X, a, b$, if
$F_a \sq F_b X =  \sq F_b X $,
then either
$F_b \sq  F_a X = \sq  F_a X $ or $F_a  \sq X = \sq X$.
\end{quote}

And we can apply Postel's law to this to refine it to
the following. Suppose we have a category $\C$ with some monads
$\sq, F_a, F_b, \ldots$. We say that $F_a$ and $F_b$ exchange
around $\sq$ when

\begin{quote}
From a morphism $\sq F_b X  \to F_a \sq F_b X $,
we can build either a morphism
$F_b \sq  F_a X \to \sq  F_a X $ or $F_a  \sq X \to  \sq X$.
\end{quote}

This is a bit of a mess. Suppose
I start with a morphism like
$f : A \to \sq F_b X$. The object
 $A$ acts as a generalized element of $\sq (X + b)$.
Oh wait but I need to get at elements of the set to call $F$.

Hm... maybe I want $F_A$ for arbitrary {\em objects} of the category.
Or something more like $A \tensor \dash$. Where in the actual
matroid case, $\tensor$ is union of subsets of the carrier. So suppose
I have a morphism $f : A \to \sq(B \tensor X)$. Then I should
get out something like a tradeoff between $B \to \sq(A \tensor X)$
and $A \to \sq X$. One possibility is to say $f$ yields a decomposition
$A_1 + A_2$ of $A$ and further $A_1 \to \sq X$ and $B \to \sq(A_2 \tensor X)$.

\subsection{Realizing this as a connective}

Is there some kind of pair of logical connectives that reify this
split? Like, assuming that $A \prov \sq (B \tensor X)$ holds,
we get all of
\[
\star_1(ABX) \prov \sq X
\qquad
B \prov \sq(\star_2(ABX) \tensor X)
\qquad
\star_1(ABX) \lor \star_2(ABX) \prequiv A
\]
?
I could make some educated guesses based on conjecturing that
propositional variables `not in play' aren't actually used, so that
maybe $\star_1(ABX) = \sq X$ and $\star_2(ABX)$ is just some binary
operator $B \star X$ not involving $A$. My requirements are then
(still assuming that $A \prov \sq(B \tensor X)$) that
\[
B \prov \sq((B \star X) \tensor X)
\qquad
\sq X \lor (B \star X) \prequiv A
\]

\vfil\eject
\section{Paths}

In a strict $\infty$-category $\C$ we define equivalence coinductively
by saying that
$C \equiv D$ (`cells $C$ and $D$ are equivalent')
if there are $f : C \to D$ and $g : D \to C$ such
that $f \o g \equiv \rid_D$ and $g \o f \equiv \rid_C$.

\begin{lemma}
$\equiv$ is symmetric, transitive, reflexive.
\end{lemma}


\begin{lemma}
If $f \equiv f'$ and $g \equiv g'$, then
$f \o g \equiv f' \o g'$.
\end{lemma}

\begin{proof}
Compose the given data horizontally:
\[  \begin{tikzcd}
  * \ar[r, "f"]\ar[dr, phantom, "\Downarrow"]
& * \ar[r, "g"] \ar[dr, phantom, "\Downarrow"]&  *\\
  * \ar[r, "f'"'] & * \ar[r, "g'"']&  *
  \end{tikzcd}
\]
and
\[  \begin{tikzcd}
  * \ar[r, "f'"]\ar[dr, phantom, "\Downarrow"]
& * \ar[r, "g'"] \ar[dr, phantom, "\Downarrow"]&  *\\
  * \ar[r, "f"'] & * \ar[r, "g"']&  *
  \end{tikzcd}
\]

Critically using the interchange law to show that we get identities
out of the composition of the 2-cells. This then depends on the fact
that $\alpha * \beta \equiv \alpha' * \beta'$ when $\alpha \equiv \alpha'$
and $\beta \equiv \beta'$ (specifically for $\alpha'$ and  $\beta'$ being identities)
so this lemma should be generalized to all vertical, horizontal, etc. forms of composition.
\cqed
\end{proof}

Consider a strict $\infty$-category $\C$ with a distinguished subset $W$ of cells, such that
\begin{enumerate}
\item
For any $f\in W$ we have $\dom f\in W$ and $\cod f \in W$.
\item
for every cell in $\C$ whose domain and codomain are in $W$,
there is a cell in $W$ (with the same domain and codomain)
that is equivalent to it.
\end{enumerate}

The intuition is that the outer category $\C$ is playing the role
of the free strict $\infty$-category on the weak $\infty$-category $W$ ---
$\C$'s cells are composition diagrams of cells in $W$, and as such are strictly
associative. The reflection principle (2) says that every diagram has a composite.

There is a weak composition operator on $W$ which takes $f, g\in W$, forms
$f \o g$ in the larger category $\C$, then reflects back into $W$. Call this
$f \o_W g$.
Similarly there is $\rid_W$ for every cell.

Weak composition isn't necessarily strictly associative, but
it should be weakly associative. Here's a
counterexample to strict associativity. Let $\C$ be a 2-category
that has only one $0$-object,
call it $*$. 1-cells in $\C$ are strings over some alphabet plus $*$.
1-cells in $W$ are the strings that begin with $*$. There are unique 2-cells
between any pair of strings that are the same after erasing all $*$s.
All 2-cells between 1-cells in $W$ are in $W$ --- this is necessarily the
case, as the only 2-cell equivalent to a given 2-cell $\alpha$ is $\alpha$ itself.

Strict associativity fails like this: an iterated
weak composite of ($f$ and $g$) and $h$ is ${**}fgh$.
Associated the other way, it's ${*}f{*}gh$.

Let $C \equiv_W D$ mean that there are cells $f$ and $g$ in $W$ going between
$C$ and $D$ such that
$f \o_W g \equiv_W \rid_W$ and $g \o_W f \equiv_W \rid_W$



\begin{lemma}
If $C, D\in W$ and $C \equiv D$ then $C\equiv_W D$.
\end{lemma}

\begin{proof}
We have by assumption $f: C \leftrightarrow D : g$ such that
$f \o g \equiv \rid$.
We can find $f', g' \in W$ with $f \equiv f'$ and $g \equiv g'$.  By earlier lemma
we have $f' \o g' \equiv f \o g = \rid$.

We know that $f' \o_W g' \equiv f' \o g' \equiv \rid \equiv \rid_W$.
Transitivity of $\equiv$ gives
$f' \o_W g' \equiv  \rid_W$.
Coinduction hypothesis gives
$f' \o_W g' \equiv_W  \rid_W$.
The $g-f$ case is symmetric to the $f-g$ reasoning we just did.
We now see that $C \equiv_W D$.
\cqed
\end{proof}

\begin{lemma}
If $C\equiv_W D$ then $C \equiv D$.
\end{lemma}

\begin{proof}
Necessarily $C, D \in W$. We have $f, g$ such that
$f \o_W g \equiv_W \rid_W$.
By coinduction hypothesis, $f \o_W g \equiv \rid_W$.
We observe
$f \o g \equiv f \o_W g \equiv \rid_W \equiv \rid$
and by transitivity of $\equiv$
(and a symmetric argument for $g \o f$) we have what's claimed.
\cqed
\end{proof}

\subsection{The Braided Category Counterexample}

Picture a structure. It has an object $X$. It has a morphism $1_X$.
It has a 2-cells which are finite sets of points in $[0,1] \x [0,1]$.
It has 3-cells which are braidings of those finite sets. This structure
is supposed to be $W$. We want $\C$ to feel like free $3$-category on this,
but it won't be literally that, since we need to bake in composition.

This will have an object $X$, and an infinite collection of morphisms,
call them $\rid_X, \iota, \iota^2, \iota^3, \ldots$ where $\iota = 1_X$
from the originally specified $W$. So the homset $[X, X]$ is just
$\N$. It's always some number of copies of empty space. The
2-dimensional homset between two of these thingies can include points,
but we also want to allow purely syntactic compositions of them --- so
$[n, m]$ is some type of pasting diagrams. A crucial
constructor of this datatype
is the `point' $\ell : 1 \to 1$. We can compose these horizontally
$\ell_{nmk} * \ell_{n'm'k'} : (n + n') \to (m + m')$ which has $k + k'$
points, or vertically
$\ell_{nmk} \o \ell_{mpk'} : n \to p$ which also has $k + k'$ points,
and associativity and interchange are built in.


 The 3-dimensional homset between pasting diagrams
$D_1$ and $D_2$ is braiding diagrams between the points of $D_1$ and $D_2$.
\section{Another Way to use Strict $n$-Categories}
Consider the strict 3-category where there is one $0$-cell $X$
one $1$-cell $\iota$ for each natural number. The $2$-cells
from $n$ to $n$ (there are no heterogeneous $2$-cells generally from $n$ to $m$)
are lists of naturals, whose length is $n$.

Vertical composition of two $n$-lists is pointwise sum. Horizontal
composition is concatenation. The $3$-cells from one list to another
are braidings. Internally, we can see that $[2,0]$ and $[1,1]$ are
internally equivalent, in the sense that there are $3$-cells that go back
and forth and compose to the identity braiding.
But $[0,0]$ and $[0]$ are not; the
domain and codomain of $[0,0]$ are both $2$, and the domain and
codomain of $0$ are both $1$. They're not eligible for even asking the
question of internal equivalence.
Indeed the $1$-cells are all not equivalent to one another; there are two 2-cells
going from $n$ to $m$ for $n\ne m$.
So there's genuinely more than 1 nonequivalent $1$-cell, so this isn't the `braids
in $3$-space' tricategory.

But let's postulate some more data, an equivalence relation $\sim$. Objects
are eligible to be $\sim$. Morphisms with equivalent domains and equivalent codomains
are eligible to be $\sim$, and so on.

For this example we say that all $1$-cells are to be equivalent. (They all share
the same domain and codomain, so that's ok). And we say that a pair of 2-cells
$\ell$ and $\ell'$ are equivalent if $\sum \ell = \sum\ell'$. This is okay,
since their domains and codomains are equivalent no matter what, since all 1-cells
are equivalent. We say two $3$-cells are equivalent if... oh, hm, this is where
the actual data of the {\em how} the domains and codomains are equivalent matters.

Okay, so perhaps the $\sim$ relation is to be limited to when the domains and codomains
are actually equal. We can still say that $[2,0] \sim [1,1]$.

So the example is: All $1$-cells are equivalent. All $2$-cells with the same sum
are equivalent. Two $3$-cells are equivalent only if they're equal.

Now let's deal with some things
I want to demand of $\sim$ that I want to prove do actually hold in this example.
\begin{lemma}
If $x \sim y$, then there exist $f : x \to y$ and $g : y \to x$
such that $g \o f \equiv 1_x$ and $f \o g \equiv 1_y$.
\end{lemma}

\begin{proof}
No this totally isn't true. For example, the $1$-cells aren't natively equivalent,
we just want to assert that they are.
\cqed
\end{proof}

\begin{lemma}
If $f : C \to D$ and $g : D \to E$ and $f \sim f'$ and $g \sim g'$,
then $g f \sim g' f'$.
\end{lemma}

\begin{proof}
Vertical composition is easy. Horizontal composition of 2-cells also works.
\cqed
\end{proof}

Bah, I don't think this works as such.

\begin{question}
Is there something that can be achieved by combining a strict $n$-category
structure and a weak-$n$-groupoid structure? Is the equivalence I need
something like HoTT equality?
\end{question}


\end{document}
