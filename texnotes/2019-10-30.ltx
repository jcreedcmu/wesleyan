\documentclass{article}
\usepackage{amssymb}
\input{theorem}

\input{prooftree}
\def\erule#1#2{\begin{prooftree}#1\justifies #2\end{prooftree}}

\usepackage{tikz}
\usepackage{tikz-cd}
\usetikzlibrary{calc}
\def\ups{{\uparrow}}
\def\dns{{\downarrow}}
\def\adjust{\big|}
\def\O{\mathcal{O}}
\def\rid{\mathsf{id}}
\def\int{\square}
\def\bd{\partial}
\def\prov{\vdash}
\def\prequiv{\dashv\vdash}
\def\imp{\Rightarrow}
\def\cqed{\hskip2mm{\vrule width .5em height .5em depth 0em}} % at the end of a |P.
\def\o{\circ}
\def\C{\mathbf{C}}
\def\X{\mathbf{X}}
\def\Y{\mathcal{Y}}
\def\x{\times}
\def\st{\mathrel|}
\def\rset{\mathbf{Set}}
\def\rcat{\mathbf{Cat}}
\def\op{\mathsf{op}}
\def\P{\mathbb{P}}
\def\I{\mathbb{I}}
\def\N{\mathbb{N}}
\def\dash{\hbox{---}}
\def\dom{\mathop{\mathrm{dom}}}
\def\cod{\mathop{\mathrm{cod}}}
\def\celse{\mathrel{|}}
\def\cn{{:}}
\def\rok{\mathrel\mathsf{ok}}
\def\llam#1{\langle {#1} \rangle}

\begin{document}
\tikzset{
   commutative diagrams/.cd,
   arrow style=tikz,
   diagrams={>=stealth}}
\def\says#1#2{#1\{#2\}}
\def\rand#1#2{#2_{#1}}

Let $J$ be a Grothendieck topology, i.e. for an object $P$ in a category $\P$, we'll
have that $J(P)$ is a set of sieves that count as covering $P$. To be a Grothendieck topology
we need:
\begin{enumerate}
\item $\hom(\dash, P)$ covers $P$.
\item If $S$ covers $P$, then $T$ covers $P$ precisely when for all $f : Q \to P \in S$, we have
$f^*T = \{ g : R \to Q \st f \o g \in T\}$ covers $Q$.
\end{enumerate}


Let's define a collection of morphisms $\Phi_J \subseteq \P$.
We say:
We'll say the natural transformation $\phi : S \to T \in \P$ is
going to be in $\Phi_J$ if:
\[
\Phi_J = \{ \phi : S \to T \in \P \st \forall P \in \P .\  \forall t \in T(P).
\]
\[
\exists j \in J(P) . \forall f : Q \to P \in j(Q) . \exists s \in S(Q) . \phi_Q(s) = T(f) (t)\}
\]
In words: a natural transformation $\phi : S \to T$ is going to
 be in $\Phi$ if for every $P \in \P$ and every $t \in T(P)$, there exists a covering
 sieve $j \in J(P)$ such that for every morphism $f : Q \to P \in j$, there exists $s \in S(Q)$
 such that $\phi_Q(s) = T(f)(t)$.

\begin{lemma}
For any covering sieve $j \in J(P)$ we have $\iota \in \Phi_J$, where
$\iota$ is the evident inclusion $\iota: j \to \hom(\dash, P)$
\end{lemma}

\begin{proof}
We must show
\[
 \forall P' \in \P .\  \forall t : P'\to P.
\exists j' \in J(P') . \forall f : Q \to P' \in j'(Q) . \exists s \in j(Q) . s = t \o f
\]
But we can just set $j' = t^* j$ and this holds by the base change axiom.
\cqed
\end{proof}

What are these morphisms in terms of Lawvere-Tierney topologies? Are they perhaps the subobjects
that are already closed?

\section{Oops}

Hm, I think I'm just grasping at the definition of local epimorphisms
or local isomorphisms or something.

Let's try to think of some concrete examples.

For topological spaces, the relevant probe category I think is $\P$
being something like the kleisli category for the set-of-finite-sets
monad on $\rset$. We can think of a morphism $f : X \to Y$ as picking
out for every $x\in X$ an arbitrary formal union of finite formal
intersection of elements of $Y$. For example, a morphism $1 \to \{a,
b, c\}$ is $a \cup (b \cap c)$. I suppose this isn't quite the
straighforward monad I have in mind, since $a \cup (a \cap b)$ would
be equal to $a$. I'd like to take as canonical representatives to be
the maximal ones; so $T Y$ is a collection of subsets of subsets of
$Y$, but closed in the following sense: In order for $S \in TY$, (e.g.
$S = \{\{a\}, \{a, b\}, \{a, c\}, \{a, b, c\}\}$) and $U \in S$, and
$U \subseteq V \subseteq Y$, then also $V \in S$. So basically filters on the
power set of $Y$, except without the finite intersection condition.

Or do I still want that? What would it mean. If $U \in S$ (e.g. $\{a, b\} \in S$
 and $V\in S$ (e.g. $\{b, c\}\in S$) then I would require $U \cap V \in S$.
(e.g. $\{b\}\in S$) No, that doesn't seem right.

What's composition? Let $f: X \to Y$ and $g : Y \to Z$ be given.
Suppose $x \in X$. Then $f(x) \in 2^{2^Y}$. We have $g$ as a function
$Y \to 2^{2^z}$. We need a function $gf : X \to (Z \to 2) \to 2$.

Thinking through the CPS monad I'd say
\[ gf = \lambda x .\lambda k:(Z \to 2) .f\ x\ (\lambda y . g\ y\ k ) \]

Let's see if I can convince myself this is right. What's the morphism $1 \to \{a, b\}$
that assigns $a \cap b$? It's the function $1 \to (\{a, b\} \to 2) \to 2$ that returns
true only if the continuation says true for $a$ and $b$.

What's the morphism $1 \to \{a, b\}$
that assigns $a \cup b \ (\cup (a \cap b))$? It's the function $1 \to (\{a, b\} \to 2) \to 2$ that returns
true only if the continuation says true for $a$ or $b$.

Given a function $f : X \to (Y \to 2) \to 2$ the setwise interpretation of it is

\[ \lambda x . \{ S \subseteq Y \st f\ x\ (\lambda y . y \in S) = 1\}\]

so the set interpretation of $gf$ is

\[ \lambda x . \{ S \subseteq Z \st f\ x\ (\lambda y.g\ y\ (\lambda z . z \in S)) = 1\}\]

or more like

\[ \lambda x . \{ S \subseteq Z \st (\lambda y.g\ y\ (\lambda z . z \in S)) \in f(x) \}\]
\[ \lambda x . \{ S \subseteq Z \st \{y \st  g\ y\ (\lambda z . z \in S)\} \in f(x) \}\]
\[ \lambda x . \{ S \subseteq Z \st \{y \st  (\lambda z . z \in S) \in g(y)\} \in f(x) \}\]
\[ (g\o f)(x) = \{ S \subseteq Z \st \{y \st  S \in g(y)\} \in f(x) \}\]

Ok, let's test this out. Say my $f: 1\to \{a, b, c\}$ and $g : \{a, b, c\} \to \{a, b, d, e\}$.
I give $f$ by $a \cup (b \cap c)$ i.e. $f = \{\{a\}, \{b, c\}, \ldots\}$
and $g(a) = \{\{a\}, \ldots\}$ and $g(b) = \{\{b\}, \ldots\}$
and $g(c) = \{\{d\}, \{e\}, \ldots\}$. I want to observe what happens when a $\cup$ lands
under a $\cap$. What I expect to get out is $gf = a \cup (b \cap (d \cup e)) = a \cup (b\cap d) \cup (b\cap e)$.

So I expect $\{b, d\} \in gf$. Is in fact $\{y \st \{b, d\} \in g(y)\} \in f(*)$? Yeah!
By upward, closure $\{b, d\} \in g(b)$ and also $\{b, d\} \in g(c)$. And $\{b, c\} \in f(*)$.

Ok, so that's my $\P$: it's the kleisli category for the ``upclosed-subsets of finite-subsets of''  monad on $\rset$.
Let's now describe the functor from $\P$ to $\rset^\op$. We take $P\in \P$ to $2^P$ in $\rset$.
We need to take $f : P \to Q \in \P$ to $2^Q \to 2^P \in \rset$. But we can regard
$f$ as a special sort of function $P \to 2^{2^Q}$ and swizzle it around.

Let $X = \N$. Let's look at two morphisms $1 \to X \in \P$ namely
$\{\{3, 4\}\}$ and $\{\{0\},\{1\}, \ldots\}$.
We should get out of these $\rset$-functions $2^X \to 2^1$.

Suppose I have some other space $Y\in \rset^\op$, and a probe consisting of a bunch
of putatively open sets taking the form of $2^X \to Y \in \rset^\op$, i.e.
$Y \to 2^X \in \rset$.

There should be a filling diagram like so in $\hat\P$.
\[\begin{tikzcd}
?\ar[r]\ar[d, hookrightarrow]& \mathcal{O}(Y) \ar[d, hookrightarrow]\\
\hom_\P(\dash, 1)\ar[r]\ar[ur, dotted]&  \hom_{\rset^\op}(2^{\dash}, Y)\\
\P\ar[r,"2^{\dash}"]&\rset^\op
\end{tikzcd}\]
This means I want a covering sieve on $1 \in \P$, because I ultimately want to get
out a single {\em open set} that's the finite intersection or arbitrary union of some open sets.

Could I take $\P$ to just be the CPS monad on $\rset$ and let the Grothendieck topology track
the existence of finite intersections and arbitrary unions?

The piece of $\hom_\P(\dash, 1)$ that I most care about is the identity morphism $1 \to 1\in \P$.
The sieve that I want to put in $?$ to guarantee the existence of finite unions in the topology
is I think something corresponding to a morphism $F \to 1$.

\section{Thoughts about intervalically presented categories}

Let's think about another probe category: let $\P$ have one object,
thought of as the closed unit interval, and the morphisms are strictly
monotone maps from the interval to itself, but allowing a finite
number of discontinuities.

An example of a graph of an allowed function is

\definecolor{mred}{rgb}{0.9,0.1,0.1}
\definecolor{mgreen}{rgb}{0.1,0.5,0.1}
\definecolor{mblue}{rgb}{0.3,0.3,0.9}
\[\begin{tikzpicture}
\fill[fill={rgb:blue,5;yellow,8;white,14}] (-2,2)--(-2,-2)--(2,-2)--(2,2)--cycle;
 \begin{scope}[shift={(0,-2.3)}]
\draw (-2,-0.1)--(-2,0.1);
\draw (2,-0.1)--(2,0.1);
\draw (-2, 0)--(2,0);
\coordinate [label={[label distance=5]below:$g\o f$}] (fg) at (0,0);
\foreach \point in {fg}
\fill [black] (\point) circle (2pt);
\end{scope}

 \begin{scope}[shift={(-2.3,0)}]
\draw (-0.1,-2)--(0.1,-2);
\draw (-0.1,2)--(0.1,2);
\draw (0,-2)--(0,2);
\coordinate [label={[label distance=5]left:$g$}] (g) at (0,0.5);
\coordinate [label={[label distance=5]left:$f$}] (f) at (0,-0.5);
\foreach \point in {g,f}
\fill [black] (\point) circle (2pt);
\end{scope}

\draw (-2,-2)--(0,-1)--(0,1)--(2,2);
\end{tikzpicture}\]
I guess it's really more like a span $\I \leftarrow \I \to \I$ with some conditions.
The point, however, is that the data of category is like a presheaf $P \in \hat\P$.
$P(\I)$ is the set of all paths in the category, with morphisms in the path placed in particular
points in time, for example
\[\begin{tikzpicture}
\draw (-2,-0.1)--(-2,0.1);
\draw (2,-0.1)--(2,0.1);
\draw (-2, 0)--(2,0);
    \coordinate [label={[label distance=5]above:$g$}] (g) at (0.5,0);
    \coordinate [label={[label distance=5]above:$f$}] (f) at (-0.5,0);
    \foreach \point in {g,f}
    \fill [black] (\point) circle (2pt);
\end{tikzpicture}\]
Really I should be clear about the fact that the spaces between the morphisms
are objects, like
\[\begin{tikzpicture}
\draw[line width=1pt, mred] (-2, 0)--(f);
\draw[line width=1pt, mgreen] (g)--(f);
\draw[line width=1pt, mblue] (2, 0)--(g);

\draw (-2,-0.1)--(-2,0.1);
\draw (2,-0.1)--(2,0.1);

\coordinate [label={[mred, label distance=5]below:$A$}] (A) at ($0.5*(f)+0.5*(-2,0)$);
\coordinate [label={[mgreen, label distance=5]below:$B$}] (B) at ($0.5*(f)+0.5*(g)$);
\coordinate [label={[mblue, label distance=5]below:$C$}] (C) at ($0.5*(g)+0.5*(2,0)$);
\coordinate [label={[label distance=5]above:$g$}] (g) at (0.5,0);
\coordinate [label={[label distance=5]above:$f$}] (f) at (-0.5,0);
\foreach \point in {g,f}
\fill [black] (\point) circle (2pt);
\end{tikzpicture}\]
and I think we want to identify paths that differ up to identities; e.g.
the previous path is the same thing as
\[\begin{tikzpicture}
\draw[line width=1pt, mred] (-2, 0)--(f);
\draw[line width=1pt, mgreen] (g)--(f);
\draw[line width=1pt, mblue] (2, 0)--(g);

\draw (-2,-0.1)--(-2,0.1);
\draw (2,-0.1)--(2,0.1);

\coordinate [label={[mred, label distance=5]below:$A$},label={[label distance=5]above:$\rid_A$}] (A) at ($0.5*(f)+0.5*(-2,0)$);
\coordinate [label={[mgreen, label distance=5]below:$B$}] (B) at ($0.5*(f)+0.5*(g)$);
\coordinate [label={[mblue, label distance=5]below:$C$}] (C) at ($0.5*(g)+0.5*(2,0)$);
\coordinate [label={[label distance=5]above:$g$}] (g) at (0.5,0);
\coordinate [label={[label distance=5]above:$f$}] (f) at (-0.5,0);
\foreach \point in {g,f,A}
\fill [black] (\point) circle (2pt);
\end{tikzpicture}\]

Reparameterization may force us to squidge up the morphism-points next
to each other: when this happens, we compose the morphisms. For this
definition to be well-defined, composition must be associative.
So a category is a certain sort of action for this monoid of endomorphisms on $\I$.

Which maybe means that I can say identities {\em explicitly} show up when you do
a squidge over a region that has zero morphisms in it.

The objects of a category are the elements that are completely invariant under the action.
If we `zoom in' to either endpoint, we eventually reach an object. In fact, for a cofinite
set of points on the interval, if we `zoom in' there, we reach an object.

Now let's consider a map from such a category to another. Is it actually a functor?
Objects have to map to objects. Domains and codomains have to map to domains and codomains
respectively. Given a single-morphism path, we have to actually map the object-like parts
to object-like parts --- equivarance under
local reparameterizations guarantees it. The morphism part could get mapped away, into purely
object stuff, if the domain and codomain match after mapping.

And under squidging reparameterizations, we see that presheaf-maps have to preserve composition.

Under `zooming-in' reparameterizations, we see that paths made up from many morphisms have
their mapping behavior determined by how the individual morphisms are mapped.

So I think $\rcat$ is a full subcategory of $\hat\P$ here.

\vskip 1em\hrule\vskip 1em

I think another way to organize this is to avoid the requirement that the maps in $\P$
have finitely many plateaus, but simply avoid having infinitely many morphisms
in paths in a category. In fact a path in a category can be defined as a function
$\pi$ from $[0,1]$ to morphisms in the category, but requiring that at every $t$,
if $\pi(t) = f$, then there exist $a < t < b$ such that for any $u \in (a,t)$
we have $\pi(u) = \rid_{\dom_f}$, and for any
 $u \in (t,b)$ we have $\pi(u) = \rid_{\cod_f}$.

\vskip 1em\hrule\vskip 1em

The category $\P$ is the one where morphisms $A\to B$ are spans
\[\begin{tikzcd}
A & S\ar[l, ->>]\ar[r, >->] & B
\end{tikzcd}\]
and the individual arrows are continuous montone maps from the unit interval to itself.
Composition is pullback.

Possibly I want the open unit interval not closed.

The main problem with this arrangement is I'm not sure the ``Grothendieck topology''
that guarantees composites exist actually satisfies the axioms. If you pullback
a covering sieve along a morphism that squashes an open interval to a point, does
it still cover?

It seems certain that {\em something} has to go wrong, or at least weird, since
$\rcat$ being a category of sheaves would mean that it was a topos, and therefore
lccc, which it is clearly not.

\vskip 1em\hrule\vskip 1em

Yeah, I think it's just not a Grothendieck topology.

\subsubsection*{Higher Cubes}

I think it might
be worth thinking about the case of the interval under simply monotone
injective continuous maps, and similarly for higher cubes under an
appropriate notion of monotonicity.

Suppose we have $f : \I \to \I$. Then
monotonicity is just
\[
\erule
{x_1 \le x_2}
{f(x_1) \le f(x_2)}
\]
Suppose we have $f : \I^2 \to \I^2$. Then if two points are separated in 2-time, they must
absolutely stay so separated.
\[
\erule
{y_1 \le y_2}
{f(x_1, y_1)_y \le f(x_2, y_2)_y}
\]
And for the same value of $y$, we must have that $f$ is monotone with respect to $x$:
\[
\erule
{ x_1 \le x_2}
{f(x_1, y)_x \le f(x_2, y)_x}
\]
In fact I think the $y$-coordinate of the output of $f$ must be determined by
the input $y$ alone.

So here is how you can build a valid reparameterizations $f :\I^n \to \I^n$. It is
given as a sequence of functions $f_1, \ldots, f_n$. Each $f_i : \I^{n+1-i} \to \I$.
We require
\[
\erule
{x \le y}
{f_i(x, \bar z) \le f_i(y, \bar z)}
\]
and we say
\[ f(x_1, \ldots, x_n)_i = f_i(x_i, \ldots, x_n)\]

\vskip 1em\hrule\vskip 1em

(2019.11.21)

Had some thoughts about how to express some properties of the directed
interval type in a finite way, sort of reminiscent of the surreal
number `up' and `down' operations.

Postulate that $0:\I$ and $1:\I$, and that $\ups,\dns: \I \to \I$ exist.
The intended meaning is that $\ups x = (x+1)/2$ and $\dns x = x/2$.

So we can assert at least that $\ups 0 = \dns 1$, since both of them should represent $1/2$.
Then we can say something about the kind of functions $f:\I \to \I$ we expect to exist.
They should be well-behaved continuous monotone functions.
Clearly these properties are preserved under taking the `left half' ($f \mapsto f \o \dns$)
and `right half' ($f \mapsto f \o \ups$) of a function's graph. Moreover, given a pair of
functions $\ell, r : \I \to \I$ such that $\ell(1) = r(0)$, we should be able to paste them
together into a function $\ell * r$ such that $(\ell * r) \o \dns = \ell$ and $(\ell * r) \o \ups = r$.
Note that since $\ell(1) = r(0)$ we must have $((\ell * r) \o \dns)(1) = ((\ell * r) \o \ups)(0))$
so it's a good thing we required $\dns 1 = \ups 0$ earlier.

In any event, we want to require that the `decomposition'
map
\[d :(\I \to \I) \to \Sigma \ell, r : \I \to \I . \ell(1) = r(0)\]
 given
by
\[d(f) = \langle f \o \dns, f \o \ups, \mathsf{idp} \rangle\]
 is an equivalence.

In fact, if I can imagine a sheaf model where types are interpreted over $\rset^{\I^\op}$,
then maybe I can even say that generally the map
\[d : \{A:\rset\} \to (\I \to A) \to \Sigma \ell, r : \I \to A . \ell(1) = r(0)\]
 given again by
by
\[d(f) = \langle f \o \dns, f \o \ups, \mathsf{idp} \rangle\]
is an equivalence.

\subsubsection*{An Undirected Interval}
If I added $\lnot : \I \to \I$ with $\lnot 0 = 1$ and $\lnot 1 = 0$ and $\lnot (\ups x) = \dns (\lnot x)$
and $\lnot (\dns x) = \ups (\lnot x)$ would I get an undirected interval?

\subsubsection*{Homotopies}
I sort of expect that if $e : \I \to \I$ is an equivalence, and $f : \I \to A$ is a path, then
somehow $f \o e = f$, to get associativity of composition. Extensionality tells me that this is the same as expecting
$\forall i : \I . f(e(i)) = f(i)$. So it would be sufficient to show $\forall i : \I . e(i) = i$,
which is just $ e = \mathsf{id}$.

This seems dangerous and close to wrong. I expect I can have equivalent paths $f, g$ such that $f(1/2) = 1/4$ and
$g(1/2) = 3/4$, and I wouldn't want to conclude that $1/4 = 3/4$, right?

\subsubsection*{Quotienting out by Homotopies?}
Should I explicitly form a HIT by taking $\I \to A$ as the carrier and throwing in equality paths for precomposition
by any equivalence on $\I$?

Or do I postulate that there {\em exists} a directed path type $\pi A$ and that there's an
evaluation map $\pi A \to \I \to A$, and that given an equality path $e : x =_{\pi A} y$
in the directed path space, we can somehow extract an equivalence on $\I$ from this?
That can't be right. What I want to postulate would be more like an elim rule, arising from the HIT.

What's the source in the literature that I seem to be reinventing? Freyd 2008, ``Algebraic Real Analysis''.
nLab has some stuff about the coalegbra of the real interval. Something about midpoint algebras etc.

\subsubsection*{Midpoint operator}
\def\hf{{\odot}}
\def\uds{{\updownarrow}}
Can I coinductively define midpoint $x|y$ of $x$ and $y$ thinking of $x$ and $y$ as inductive
data defined over constants $0$, $1$, and operations $\ups,\dns$? I think so.
Let $\hf := 1/2 = \ups 0 = \dns 1$. Define
\[\uds(\ups x) = \ups\dns x\]
\[\uds(\dns x) = \dns\ups x\]
then
\[x | 0 = \dns x \qquad x | 1 = \ups x\]
\[ \ups x | \ups y = \ups(x | y)\]
\[ \dns x | \dns y = \dns(x | y)\]
\[ \ups x | \dns y = \uds(x | y) \]

\subsubsection*{The open interval?}

Let's say the inductively accessible points of the interval are just strings $\epsilon, \ups, \dns, \ups\ups, \ups\dns$, etc.
$\epsilon$ represents one-half. There are maps $\dom : (\I \to A) \to A$ and $\cod : (\I \to A) \to A$ which take limits.
These are fixpoint operators. $\dom (\rid_{\I})$ is 0. $\cod (\rid_{\I})$ is 1. Hm, this still doesn't absolve me from the
need to assert $\ups \dom (\rid_{\I}) = \dns \cod (\rid_{\I})$. Although I could express it as
$ \dom \ups = \cod \dns$ assuming shifts commute with $\dom/\cod$. And decomposition still takes $f : \I \to A$ to
\[\langle f \o \dns, f \o \ups, \mathsf{idp} \rangle : \Sigma \ell, r : \I \to A . \cod \ell = \dom r\]
and is supposed to be invertible. The definition of midpoint now runs:
\[\uds(\epsilon) = \epsilon\]
\[\uds(\ups x) = \ups\dns x\]
\[\uds(\dns x) = \dns\ups x\]
then
\[x | \epsilon = \uds x\]
\[ \ups x | \ups y = \ups(x | y)\]
\[ \dns x | \dns y = \dns(x | y)\]
\[ \ups x | \dns y = \uds(x | y) \]

\subsubsection*{Defining Function Values at Midpoints}

Here's another way to decompose a function into parts.
Let $x \imp_A y$ be a type for any $A: \rset$ and $x, y : A$.
It's intended to be the same as $f :\I \to A$ such that $f(0) = x$ and $f(1) = y$.
Let's say there is an evaluation function
\[ \_\cdot\_ : (x \imp_A y) \to \I \to A \]
such that in fact
\[ p : x \imp_A y \prov p\cdot0 = x\]
\[ p : x \imp_A y \prov p\cdot1 = y\]
And an abstraction rule like
\[
\erule
{i : \I \prov e : A}
{\llam i . e : [i/0]e \imp_A [i/1]e}
\]
This is all just like before, except there's more algebra to $\I$, that we can form midpoints.
So given $f : x \imp z$, we can form
\[\llam i . f \cdot \dns i : x \imp f \cdot \hf\]
\[\llam i . f \cdot \ups i : f \cdot \hf \imp z\]
Hm, wait, I've lost the information that $f \cdot \hf$ is actually in between $x$ and $z$.
But do I need it?

\subsubsection*{Graded Time Dimensions}

I was trying to consider specific-dimensional higher cubes, but if I
want to capture them all at once, I think I probably want a presheaf
base category with one object per dimension, instead of one
infinite-dimensional thing.

So call these objects $C_1, C_2$, etc. Morphisms between them
are allowable reparameterizations. See above in `Higher Cubes'.

A typical element of the set produced by applying a presheaf over this
category to, say, $C_2$, I imagine looking like a 2-cell string
diagram:

\definecolor{lorange}{rgb}{1,0.95,0.8}
\definecolor{lgreen}{rgb}{0.95,1,0.8}
\definecolor{lblue}{rgb}{0.8,0.95,1}
\def\bitf#1{#1 [smooth, tension=0.8] coordinates {(-1.6,2) (-1,1) (0,0)}}
\def\bitg#1{#1 [smooth, tension=0.8] coordinates {(1,2) (0.55,1) (0,0)}}
\def\bitgrev#1{#1 [smooth, tension=0.8] coordinates {(0,0) (0.55,1) (1,2)}}
\def\bitfg#1{#1 [smooth, tension=0.8] coordinates {(0,0) (-0.2,-2) }}
\[\begin{tikzpicture}
\fill[fill={lorange}] (-2,2)  \bitf{--plot} \bitfg{--plot} -- (-2,-2)-- cycle;
\fill[fill={lgreen}] (2,2)  \bitg{--plot} \bitfg{--plot} -- (2,-2)--   cycle;
\fill[fill={lblue}] (0,0) \bitgrev{--plot} \bitf{--plot}  --   cycle;
\draw [mblue, line width=1.5pt] \bitf{plot};
\draw [mblue, line width=1.5pt] \bitg{plot};
\draw [mblue, line width=1.5pt] \bitfg{plot};
\node at (1,0) {$C$};
\node at (-1.25,-0.8) {$A$};
\node at (0,1.2) {$B$};
\node [mblue] at (-1.4,1) {$f$};
\node [mblue] at (0.8,1) {$g$};
\node [mblue] at (0.1,-1) {$h$};
\coordinate [label={[label distance=5]left:$\alpha$}] (g) at (0,0);
\foreach \point in {g}
\fill [black] (\point) circle (2pt);
\end{tikzpicture}\]

We can say that `1-time' proceeds from left to right: $f : A \to B$ and $g : B \to C$ are 1-cells.
We can say that `2-time' proceeds from top to bottom: $\alpha : g \o f \imp h$ is a 2-cell.

Restricting along reparameterization morphisms lets us zoom in on smaller parts of the diagram. Nonmonomorphic
plateaus let us zoom `infinitely' at some points, so we must ensure that abrupt transitions --- i.e. where $n$-cells
with $n > 1$ actually exist --- cannot be so zoomed. The global points of a presheaf are the 0-cells.
I imagine something like allowing only those reparameterizations that
preserve the rationals (or maybe the dyadic rationals) and that 1-cells, 2-cells, etc. live at irrational
(or non-dyadic-rational, e.g. 1/3) coordinates. I could restrict to monomorphisms entirely to prevent the `infinitely
thin' vertical wire of a 1-morphism being stretched out into nonzero measure, but I {\em want} to preserve the ability to zoom
in infinitely at boundaries of the cube, to obtain domains and codomains.

An observation that occurred to me this morning (= 2019.11.22) was
maybe I can get away with having a family of intervals, i.e. $\I_1$
the walking 1-time interval, $\I_2$ the walking 2-time interval, etc.
and perhaps the representable $n$-cube is a product $yC_n = \I_1 \x \cdots \x \I_n$ of them
in the category of presheaves. In particular, the diagram above
is meant to depict a map $\I_1 \x \I_2 \to \C$ for a category $\C$,
with the input of type $\I_1$ being the $x$-coordinate, and $\I_2$
corresponding to the $y$-coordinate.

I think the maps $\I_i \to \I_j$ are something like
\[
\cases{
  \hbox{constants $\in [0,1]$} & if $i < j$\cr
  \hbox{monotone continuous maps $[0,1] \to [0,1]$} & if $i = j$\cr
  \hbox{continuous maps $[0,1] \to [0,1]$} & if $i > j$
}
\]

This makes good modal sense: variables from higher intervals $\I_n$ for big $n$ are like
more strongly boxed, coming from some $\square_n$. We delete lesser-boxed things from the context when trying to map
into $\I_n$ --- we can't depend on them.

\subsubsection*{Is this all completely broken?}

If I take the 2-time interval $\I_2$ and map it into a 2-cell string diagram with one morphism that proceeds
from top to bottom, in such a way that it wiggles back and forth in the $1$-time direction,
 its object-level domain and codomain cease to be objects.

Actually, there's an even simpler demonstration. Imagine trying to zoom into the following red rectangle:
\[\begin{tikzpicture}
\fill[fill={lorange}] (-2,2)  \bitf{--plot} \bitfg{--plot} -- (-2,-2)-- cycle;
\fill[fill={lgreen}] (2,2)  \bitg{--plot} \bitfg{--plot} -- (2,-2)--   cycle;
\fill[fill={lblue}] (0,0) \bitgrev{--plot} \bitf{--plot}  --   cycle;
\draw [mblue, line width=1.5pt] \bitf{plot};
\draw [mblue, line width=1.5pt] \bitg{plot};
\draw [mblue, line width=1.5pt] \bitfg{plot};
\node at (1,0) {$C$};
\node at (-1.25,-0.8) {$A$};
\node at (0,1.2) {$B$};
\node [mblue] at (-1.4,1) {$f$};
\node [mblue] at (0.8,1) {$g$};
\node [mblue] at (0.1,-1) {$h$};
\coordinate [label={[label distance=5]left:$\alpha$}] (g) at (0,0);
\foreach \point in {g}
\fill [black] (\point) circle (2pt);
\draw [red, line width=1.5pt] (-1,2)--(2,2)--(2,-2)--(-1,-2)--cycle;
\end{tikzpicture}\]

The result isn't a well-formed 2-cell because the left edge isn't an object!
But maybe this is somehow ok? Can I say that a $2$-cell in a type $\C$ is not just a map
from $\I_1 \x \I_2$ into it, but rather one such that if you set the $1$-time to a constant
0 or 1, that it's a constant? That sort of seems right from the way homotopy is usually defined.

It still seems worrying that we can zoom in to the left edge at all,
and get a horizontal stripe of pure $f$. I no longer know exactly how to characterize all the possible diagrams
in terms of the data of $\C$.

In general, a well-behaved map $\I_1 \x \cdots \x \I_n \to \C$ is one where if you set the $i$th argument
to a constant, it doesn't depend on any $j$th argument for $j > i$.

\subsubsection*{Maps into the universe}

I'm eager to speculate wildly and prematurely about what maps $\I_i \to \rset$
look like. I definitely hope that $\I_1 \to \rset$ looks
like functions from one set to another, stretched out over time --- so
that intermediate points in time are other sets.
I'm starting to think that $\I_{\ge 2}$ maybe look like relations evolving over time?
\end{document}
